
hs.elf:     file format elf32-littlenios2
hs.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000003e0 memsz 0x000003e0 flags r-x
    LOAD off    0x00001400 vaddr 0x00010400 paddr 0x00010478 align 2**12
         filesz 0x00000078 memsz 0x00000078 flags rw-
    LOAD off    0x000014f0 vaddr 0x000104f0 paddr 0x000104f0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001478  2**0
                  CONTENTS
  2 .text         000003d4  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  000103f4  000103f4  000013f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000078  00010400  00010478  00001400  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000104f0  000104f0  000014f0  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00010500  00010500  00001478  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000218  00000000  00000000  000014a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000172f  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b30  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000bd9  00000000  00000000  00003917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000023c  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000888  00000000  00000000  0000472c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000035c  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00005310  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  00005340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000642d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00006430  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006433  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00006435  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00006439  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000643d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00006441  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000644a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000644e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00006452  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  00006455  2**0
                  CONTENTS, READONLY
 29 .jdi          00003431  00000000  00000000  00006475  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00038f06  00000000  00000000  000098a6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000103f4 l    d  .rodata	00000000 .rodata
00010400 l    d  .rwdata	00000000 .rwdata
000104f0 l    d  .bss	00000000 .bss
00010500 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hs_bsp//obj/HAL/src/crt0.o
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010384 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
000101c8 g     F .text	0000002c alt_main
00010478 g       *ABS*	00000000 __flash_rwdata_start
000101f4 g     F .text	00000038 alt_putstr
0001045c g     O .rwdata	00000004 jtag_uart
00010398 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000104fc g     O .bss	00000004 errno
000104f4 g     O .bss	00000004 alt_argv
00018458 g       *ABS*	00000000 _gp
00010400 g     O .rwdata	00000030 alt_fd_list
000103a0 g     F .text	00000038 alt_icache_flush
00010000 g       *ABS*	00000000 __alt_mem_ram
00010460 g     O .rwdata	00000004 alt_max_fd
00010500 g       *ABS*	00000000 __bss_end
0001008c g     F .text	00000044 alt_getchar
00010430 g     O .rwdata	00000028 alt_dev_null
0001036c g     F .text	00000018 alt_dcache_flush_all
00010478 g       *ABS*	00000000 __ram_rwdata_end
00010464 g     O .rwdata	00000008 alt_dev_list
00010400 g       *ABS*	00000000 __ram_rodata_end
00010500 g       *ABS*	00000000 end
000102dc g     F .text	00000090 altera_avalon_uart_write
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000004c _start
0001024c g     F .text	00000004 alt_sys_init
00010400 g       *ABS*	00000000 __ram_rwdata_start
000103f4 g       *ABS*	00000000 __ram_rodata_start
00010500 g       *ABS*	00000000 __alt_stack_base
000104f0 g       *ABS*	00000000 __bss_start
0001006c g     F .text	00000020 main
000104f0 g     O .bss	00000004 alt_envp
00010474 g     O .rwdata	00000004 alt_errno
000103f4 g       *ABS*	00000000 __flash_rodata_start
0001022c g     F .text	00000020 alt_irq_init
000104f8 g     O .bss	00000004 alt_argc
0001046c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010478 g       *ABS*	00000000 _edata
00010500 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001a000 g       *ABS*	00000000 __alt_data_end
00010458 g     O .rwdata	00000004 uart
0001001c g       .entry	00000000 _exit
000103d8 g     F .text	0000001c strlen
0001038c g     F .text	0000000c alt_icache_flush_all
00010250 g     F .text	0000008c altera_avalon_uart_read
000100d0 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_ram-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6a11614 	ori	gp,gp,33880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	10813c14 	ori	r2,r2,1264

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18c14014 	ori	r3,r3,1280

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	00100d00 	call	100d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	00101c80 	call	101c8 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
   1006c:	deffff04 	addi	sp,sp,-4
   10070:	dfc00015 	stw	ra,0(sp)

while (1){
  char c = alt_getchar();
   10074:	001008c0 	call	1008c <alt_getchar>
  alt_putstr(c);
   10078:	11003fcc 	andi	r4,r2,255
   1007c:	2100201c 	xori	r4,r4,128
   10080:	213fe004 	addi	r4,r4,-128
   10084:	00101f40 	call	101f4 <alt_putstr>
}
   10088:	003ffa06 	br	10074 <main+0x8>

0001008c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1008c:	00800074 	movhi	r2,1
   10090:	10810004 	addi	r2,r2,1024
   10094:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   10098:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1009c:	01000074 	movhi	r4,1
   100a0:	21011604 	addi	r4,r4,1112
   100a4:	d80b883a 	mov	r5,sp
   100a8:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   100ac:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   100b0:	00102500 	call	10250 <altera_avalon_uart_read>
   100b4:	0080020e 	bge	zero,r2,100c0 <alt_getchar+0x34>
        return -1;
    }
    return c;
   100b8:	d8800007 	ldb	r2,0(sp)
   100bc:	00000106 	br	100c4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   100c0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   100c4:	dfc00117 	ldw	ra,4(sp)
   100c8:	dec00204 	addi	sp,sp,8
   100cc:	f800283a 	ret

000100d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100d0:	deffff04 	addi	sp,sp,-4
   100d4:	01000074 	movhi	r4,1
   100d8:	01400074 	movhi	r5,1
   100dc:	dfc00015 	stw	ra,0(sp)
   100e0:	21010004 	addi	r4,r4,1024
   100e4:	29411e04 	addi	r5,r5,1144

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   100e8:	2140061e 	bne	r4,r5,10104 <alt_load+0x34>
   100ec:	01000074 	movhi	r4,1
   100f0:	01400074 	movhi	r5,1
   100f4:	21000804 	addi	r4,r4,32
   100f8:	29400804 	addi	r5,r5,32
   100fc:	2140141e 	bne	r4,r5,10150 <alt_load+0x80>
   10100:	00000d06 	br	10138 <alt_load+0x68>
   10104:	00c00074 	movhi	r3,1
   10108:	18c11e04 	addi	r3,r3,1144
   1010c:	00bfff04 	movi	r2,-4
   10110:	1907c83a 	sub	r3,r3,r4
   10114:	1886703a 	and	r3,r3,r2
   10118:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1011c:	10fff326 	beq	r2,r3,100ec <alt_load+0x1c>
   10120:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   10124:	39c00017 	ldw	r7,0(r7)
   10128:	110d883a 	add	r6,r2,r4
   1012c:	10800104 	addi	r2,r2,4
   10130:	31c00015 	stw	r7,0(r6)
   10134:	003ff906 	br	1011c <alt_load+0x4c>
   10138:	01000074 	movhi	r4,1
   1013c:	01400074 	movhi	r5,1
   10140:	2100fd04 	addi	r4,r4,1012
   10144:	2940fd04 	addi	r5,r5,1012

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10148:	2140121e 	bne	r4,r5,10194 <alt_load+0xc4>
   1014c:	00000d06 	br	10184 <alt_load+0xb4>
   10150:	00c00074 	movhi	r3,1
   10154:	18c00804 	addi	r3,r3,32
   10158:	00bfff04 	movi	r2,-4
   1015c:	1907c83a 	sub	r3,r3,r4
   10160:	1886703a 	and	r3,r3,r2
   10164:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10168:	10fff326 	beq	r2,r3,10138 <alt_load+0x68>
   1016c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   10170:	39c00017 	ldw	r7,0(r7)
   10174:	110d883a 	add	r6,r2,r4
   10178:	10800104 	addi	r2,r2,4
   1017c:	31c00015 	stw	r7,0(r6)
   10180:	003ff906 	br	10168 <alt_load+0x98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10184:	001036c0 	call	1036c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10188:	dfc00017 	ldw	ra,0(sp)
   1018c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10190:	001038c1 	jmpi	1038c <alt_icache_flush_all>
   10194:	00c00074 	movhi	r3,1
   10198:	18c10004 	addi	r3,r3,1024
   1019c:	00bfff04 	movi	r2,-4
   101a0:	1907c83a 	sub	r3,r3,r4
   101a4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101ac:	10fff526 	beq	r2,r3,10184 <alt_load+0xb4>
   101b0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
   101b4:	39c00017 	ldw	r7,0(r7)
   101b8:	110d883a 	add	r6,r2,r4
   101bc:	10800104 	addi	r2,r2,4
   101c0:	31c00015 	stw	r7,0(r6)
   101c4:	003ff906 	br	101ac <alt_load+0xdc>

000101c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101cc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101d4:	001022c0 	call	1022c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   101d8:	001024c0 	call	1024c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101dc:	d1202817 	ldw	r4,-32608(gp)
   101e0:	d1602717 	ldw	r5,-32612(gp)
   101e4:	d1a02617 	ldw	r6,-32616(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   101e8:	dfc00017 	ldw	ra,0(sp)
   101ec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101f0:	001006c1 	jmpi	1006c <main>

000101f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   101f4:	defffe04 	addi	sp,sp,-8
   101f8:	dc000015 	stw	r16,0(sp)
   101fc:	dfc00115 	stw	ra,4(sp)
   10200:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10204:	00103d80 	call	103d8 <strlen>
   10208:	01000074 	movhi	r4,1
   1020c:	21011604 	addi	r4,r4,1112
   10210:	800b883a 	mov	r5,r16
   10214:	100d883a 	mov	r6,r2
   10218:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	dc000017 	ldw	r16,0(sp)
   10224:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10228:	00102dc1 	jmpi	102dc <altera_avalon_uart_write>

0001022c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1022c:	deffff04 	addi	sp,sp,-4
   10230:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10234:	00103980 	call	10398 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10238:	00800044 	movi	r2,1
   1023c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10240:	dfc00017 	ldw	ra,0(sp)
   10244:	dec00104 	addi	sp,sp,4
   10248:	f800283a 	ret

0001024c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1024c:	f800283a 	ret

00010250 <altera_avalon_uart_read>:
  int flags)
{
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   10250:	39d0000c 	andi	r7,r7,16384

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   10254:	20c00017 	ldw	r3,0(r4)
   10258:	18c00204 	addi	r3,r3,8
   1025c:	18800037 	ldwio	r2,0(r3)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   10260:	18000035 	stwio	zero,0(r3)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   10264:	10c0200c 	andi	r3,r2,128
   10268:	1800021e 	bne	r3,zero,10274 <altera_avalon_uart_read+0x24>
      {
        return 1;
      }
    }
  }
  while (block);
   1026c:	383ff926 	beq	r7,zero,10254 <altera_avalon_uart_read+0x4>
   10270:	00000706 	br	10290 <altera_avalon_uart_read+0x40>

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   10274:	20c00017 	ldw	r3,0(r4)
   10278:	18c00037 	ldwio	r3,0(r3)
   1027c:	28c00005 	stb	r3,0(r5)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   10280:	108000cc 	andi	r2,r2,3
   10284:	103ff91e 	bne	r2,zero,1026c <altera_avalon_uart_read+0x1c>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   10288:	00800044 	movi	r2,1
   1028c:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10290:	00800074 	movhi	r2,1
   10294:	10811d04 	addi	r2,r2,1140
   10298:	10800017 	ldw	r2,0(r2)
   1029c:	10000926 	beq	r2,zero,102c4 <altera_avalon_uart_read+0x74>
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   102a0:	deffff04 	addi	sp,sp,-4
   102a4:	dfc00015 	stw	ra,0(sp)
   102a8:	103ee83a 	callr	r2
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
   102ac:	00c002c4 	movi	r3,11
   102b0:	10c00015 	stw	r3,0(r2)
 
  return 0;
   102b4:	0005883a 	mov	r2,zero
}
   102b8:	dfc00017 	ldw	ra,0(sp)
   102bc:	dec00104 	addi	sp,sp,4
   102c0:	f800283a 	ret
   102c4:	00800074 	movhi	r2,1
   102c8:	10813f04 	addi	r2,r2,1276
      }
    }
  }
  while (block);

  ALT_ERRNO = EWOULDBLOCK;
   102cc:	00c002c4 	movi	r3,11
   102d0:	10c00015 	stw	r3,0(r2)
 
  return 0;
   102d4:	0005883a 	mov	r2,zero
}
   102d8:	f800283a 	ret

000102dc <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   102dc:	defffd04 	addi	sp,sp,-12
   102e0:	dc400115 	stw	r17,4(sp)
   102e4:	dc000015 	stw	r16,0(sp)
   102e8:	dfc00215 	stw	ra,8(sp)
   102ec:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   102f0:	39d0000c 	andi	r7,r7,16384
  count = len;
   102f4:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   102f8:	20800017 	ldw	r2,0(r4)
   102fc:	10c00237 	ldwio	r3,8(r2)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   10300:	18c0100c 	andi	r3,r3,64
   10304:	18000526 	beq	r3,zero,1031c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   10308:	28c00044 	addi	r3,r5,1
   1030c:	29400007 	ldb	r5,0(r5)
   10310:	11400135 	stwio	r5,4(r2)
      count--;
   10314:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   10318:	180b883a 	mov	r5,r3
      count--;
    }
  }
  while (block && count);
   1031c:	3800021e 	bne	r7,zero,10328 <altera_avalon_uart_write+0x4c>
   10320:	803ff51e 	bne	r16,zero,102f8 <altera_avalon_uart_write+0x1c>
   10324:	00000b06 	br	10354 <altera_avalon_uart_write+0x78>

  if (count)
   10328:	80000a26 	beq	r16,zero,10354 <altera_avalon_uart_write+0x78>
   1032c:	00800074 	movhi	r2,1
   10330:	10811d04 	addi	r2,r2,1140
   10334:	10800017 	ldw	r2,0(r2)
   10338:	10000226 	beq	r2,zero,10344 <altera_avalon_uart_write+0x68>
   1033c:	103ee83a 	callr	r2
   10340:	00000206 	br	1034c <altera_avalon_uart_write+0x70>
   10344:	00800074 	movhi	r2,1
   10348:	10813f04 	addi	r2,r2,1276
  {
    ALT_ERRNO = EWOULDBLOCK;
   1034c:	00c002c4 	movi	r3,11
   10350:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
   10354:	8c05c83a 	sub	r2,r17,r16
   10358:	dfc00217 	ldw	ra,8(sp)
   1035c:	dc400117 	ldw	r17,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00304 	addi	sp,sp,12
   10368:	f800283a 	ret

0001036c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1036c:	0005883a 	mov	r2,zero
   10370:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10374:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10378:	10800804 	addi	r2,r2,32
   1037c:	10fffd1e 	bne	r2,r3,10374 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10380:	f800283a 	ret

00010384 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   10384:	3005883a 	mov	r2,r6
   10388:	f800283a 	ret

0001038c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1038c:	0009883a 	mov	r4,zero
   10390:	01440004 	movi	r5,4096
   10394:	00103a01 	jmpi	103a0 <alt_icache_flush>

00010398 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10398:	000170fa 	wrctl	ienable,zero
   1039c:	f800283a 	ret

000103a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   103a0:	00840004 	movi	r2,4096
   103a4:	1140012e 	bgeu	r2,r5,103ac <alt_icache_flush+0xc>
   103a8:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   103ac:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   103b0:	2005883a 	mov	r2,r4
   103b4:	1140032e 	bgeu	r2,r5,103c4 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   103b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   103bc:	10800804 	addi	r2,r2,32
   103c0:	003ffc06 	br	103b4 <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   103c4:	210007cc 	andi	r4,r4,31
   103c8:	20000126 	beq	r4,zero,103d0 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   103cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   103d0:	0000203a 	flushp
   103d4:	f800283a 	ret

000103d8 <strlen>:
   103d8:	2005883a 	mov	r2,r4
   103dc:	10c00007 	ldb	r3,0(r2)
   103e0:	18000226 	beq	r3,zero,103ec <strlen+0x14>
   103e4:	10800044 	addi	r2,r2,1
   103e8:	003ffc06 	br	103dc <strlen+0x4>
   103ec:	1105c83a 	sub	r2,r2,r4
   103f0:	f800283a 	ret
