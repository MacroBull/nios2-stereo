
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010240

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000058a4 memsz 0x000058a4 flags r-x
    LOAD off    0x000068c4 vaddr 0x000158c4 paddr 0x00017330 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008d9c vaddr 0x00018d9c paddr 0x00018d9c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000055d4  00010240  00010240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  00015814  00015814  00006814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000158c4  00017330  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018d9c  00018d9c  00008d9c  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00018ef0  00018ef0  00008330  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a70  00000000  00000000  00008358  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000164b6  00000000  00000000  00008dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000603b  00000000  00000000  0001f27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000069e8  00000000  00000000  000252b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015d4  00000000  00000000  0002bca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002695  00000000  00000000  0002d278  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004730  00000000  00000000  0002f90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00034040  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d8  00000000  00000000  000340a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036c95  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00036c98  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036c9b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036c9c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00036c9d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00036ca1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00036ca5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00036ca9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00036cb2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00036cbb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  00036cc4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  00036cc7  2**0
                  CONTENTS, READONLY
 29 .jdi          00003431  00000000  00000000  00036ce7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00031907  00000000  00000000  0003a118  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010240 l    d  .text	00000000 .text
00015814 l    d  .rodata	00000000 .rodata
000158c4 l    d  .rwdata	00000000 .rwdata
00018d9c l    d  .bss	00000000 .bss
00018ef0 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_bsp//obj/HAL/src/crt0.o
00010288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000158c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00011d94 l     F .text	00000008 __fp_lock
00011d9c l     F .text	00000008 __fp_unlock
00011db0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00012e00 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00012f2c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001304c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013078 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013178 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001326c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013350 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001352c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017320 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000137b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013900 l     F .text	00000038 alt_dev_reg
00016298 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013bdc l     F .text	00000204 altera_avalon_jtag_uart_irq
00013de0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000146dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014b88 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014cc0 l     F .text	00000050 alt_get_errno
00014d10 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00018dc4 g     O .bss	00000004 alt_instruction_exception_handler
00012cf4 g     F .text	00000054 _isatty_r
00013474 g     F .text	00000078 alt_main
000102b8 g     F .text	000000a8 _puts_r
00018df0 g     O .bss	00000100 alt_irq
00012d48 g     F .text	0000005c _lseek_r
00017330 g       *ABS*	00000000 __flash_rwdata_start
00018ef0 g       *ABS*	00000000 __alt_heap_start
00012a84 g     F .text	0000005c __sseek
000120e4 g     F .text	00000010 __sinit
00011f4c g     F .text	00000068 __sfmoreglue
0001350c g     F .text	00000020 __malloc_unlock
00011294 g     F .text	0000015c memmove
000120cc g     F .text	00000018 _cleanup
000150d0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012c9c g     F .text	00000058 _fstat_r
00018da8 g     O .bss	00000004 errno
00012a00 g     F .text	00000008 __seofread
00018db0 g     O .bss	00000004 alt_argv
0001f2f8 g       *ABS*	00000000 _gp
00013788 g     F .text	00000030 usleep
00016118 g     O .rwdata	00000180 alt_fd_list
000150f0 g     F .text	00000090 alt_find_dev
0001115c g     F .text	00000138 memcpy
00011da4 g     F .text	0000000c _cleanup_r
00014c48 g     F .text	00000078 alt_io_redirect
00015814 g       *ABS*	00000000 __DTOR_END__
00010360 g     F .text	00000014 puts
000153d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00013fdc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00012f1c g     F .text	00000008 .hidden __udivsi3
000131c8 g     F .text	000000a4 isatty
00015348 g     F .text	0000008c alt_icache_flush
00018da4 g     O .bss	00000004 __malloc_top_pad
00010000 g       *ABS*	00000000 __alt_mem_ram
0001040c g     F .text	000004c0 __sfvwrite_r
00011958 g     F .text	00000054 _sbrk_r
00012da4 g     F .text	0000005c _read_r
00017318 g     O .rwdata	00000004 alt_max_fd
00012b98 g     F .text	000000f0 _fclose_r
00011d64 g     F .text	00000030 fflush
00018da0 g     O .bss	00000004 __malloc_max_sbrked_mem
000133a0 g     F .text	000000d4 lseek
000172f8 g     O .rwdata	00000004 _global_impure_ptr
000113f0 g     F .text	00000568 _realloc_r
00018ef0 g       *ABS*	00000000 __bss_end
00014a98 g     F .text	000000f0 alt_iic_isr_register
00014fcc g     F .text	00000104 alt_tick
00012104 g     F .text	00000018 __fp_lock_all
00014a4c g     F .text	0000004c alt_ic_irq_enabled
00014f34 g     F .text	00000098 alt_alarm_stop
00018db8 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d0 alt_irq_handler
000160f0 g     O .rwdata	00000028 alt_dev_null
00014698 g     F .text	00000044 alt_dcache_flush_all
00017330 g       *ABS*	00000000 __ram_rwdata_end
00017310 g     O .rwdata	00000008 alt_dev_list
00013808 g     F .text	000000f8 write
000158c4 g       *ABS*	00000000 __ram_rodata_end
000130c8 g     F .text	000000b0 fstat
00012f24 g     F .text	00000008 .hidden __umodsi3
00018ef0 g       *ABS*	00000000 end
00013b18 g     F .text	000000c4 altera_avalon_jtag_uart_init
000101cc g     F .exceptions	00000074 alt_instruction_exception_entry
00015814 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
000141e8 g     F .text	00000218 altera_avalon_jtag_uart_write
000120f4 g     F .text	00000004 __sfp_lock_acquire
00011074 g     F .text	000000e8 memchr
00012258 g     F .text	000002f0 _free_r
0001564c g     F .text	00000194 __call_exitprocs
00017300 g     O .rwdata	00000004 __malloc_sbrk_base
00010240 g     F .text	0000004c _start
00018dbc g     O .bss	00000004 _alt_tick_rate
00018dc0 g     O .bss	00000004 _alt_nticks
0001357c g     F .text	000000fc read
0001396c g     F .text	00000048 alt_sys_init
00015538 g     F .text	00000114 __register_exitproc
00013e88 g     F .text	00000068 altera_avalon_jtag_uart_close
000158c4 g       *ABS*	00000000 __ram_rwdata_start
00015814 g       *ABS*	00000000 __ram_rodata_start
00018dc8 g     O .bss	00000028 __malloc_current_mallinfo
000139b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015294 g     F .text	000000b4 alt_get_fd
00014540 g     F .text	00000158 alt_busy_sleep
00012b44 g     F .text	00000054 _close_r
000154bc g     F .text	0000007c memcmp
00013a74 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018ef0 g       *ABS*	00000000 __alt_stack_base
00013ac4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000119ac g     F .text	00000154 __swsetup_r
00011fb4 g     F .text	00000118 __sfp
00015ce8 g     O .rwdata	00000408 __malloc_av_
00012100 g     F .text	00000004 __sinit_lock_release
000129ac g     F .text	00000054 __sread
00015180 g     F .text	00000114 alt_find_file
0001472c g     F .text	000000a4 alt_dev_llist_insert
000134ec g     F .text	00000020 __malloc_lock
000136d8 g     F .text	000000b0 sbrk
00011d08 g     F .text	0000005c _fflush_r
00018d9c g       *ABS*	00000000 __bss_start
00012888 g     F .text	00000124 memset
0001028c g     F .text	0000002c main
00018db4 g     O .bss	00000004 alt_envp
00018d9c g     O .bss	00000004 __malloc_max_total_mem
00013a14 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012ae0 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00012c88 g     F .text	00000014 fclose
000108cc g     F .text	000007a8 _malloc_r
0001731c g     O .rwdata	00000004 alt_errno
00012548 g     F .text	000000c4 _fwalk
00012e6c g     F .text	00000054 .hidden __divsi3
00012134 g     F .text	00000124 _malloc_trim_r
00015814 g       *ABS*	00000000 __CTOR_END__
00015814 g       *ABS*	00000000 __flash_rodata_start
00015814 g       *ABS*	00000000 __DTOR_LIST__
00013938 g     F .text	00000034 alt_irq_init
00013678 g     F .text	00000060 alt_release_fd
00015470 g     F .text	00000014 atexit
00012ae8 g     F .text	0000005c _write_r
000172fc g     O .rwdata	00000004 _impure_ptr
00018dac g     O .bss	00000004 alt_argc
00011b00 g     F .text	00000208 __sflush_r
0001482c g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
0001211c g     F .text	00000018 __fp_unlock_all
00017308 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000148b8 g     F .text	00000050 alt_ic_isr_register
00017330 g       *ABS*	00000000 _edata
00018ef0 g       *ABS*	00000000 _end
00010240 g       *ABS*	00000000 __ram_exceptions_end
00013ef0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000149a8 g     F .text	000000a4 alt_ic_irq_disable
00012a08 g     F .text	0000007c __swrite
00017304 g     O .rwdata	00000004 __malloc_trim_threshold
00015484 g     F .text	00000038 exit
0001260c g     F .text	000000c4 _fwalk_reent
00012ec0 g     F .text	0000005c .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000120f8 g     F .text	00000004 __sfp_lock_release
000157e0 g     F .text	00000034 _exit
00014400 g     F .text	00000140 alt_alarm_start
000126d0 g     F .text	000001b8 __smakebuf_r
00010374 g     F .text	00000098 strlen
00014ddc g     F .text	00000158 open
00014888 g     F .text	00000030 alt_icache_flush_all
00017324 g     O .rwdata	00000004 alt_priority_mask
00014908 g     F .text	000000a0 alt_ic_irq_enable
00017328 g     O .rwdata	00000008 alt_alarm_list
000147d0 g     F .text	0000005c _do_ctors
00012f7c g     F .text	000000d0 close
000132d0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000120fc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409014 	ori	at,at,576
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ram-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a37c04 	addi	r2,r2,-29200
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a37c04 	addi	r2,r2,-29200
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	21000104 	addi	r4,r4,4
   10168:	1105883a 	add	r2,r2,r4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e0:	000531fa 	rdctl	r2,exception
   101e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101e8:	e0bffd17 	ldw	r2,-12(fp)
   101ec:	10801f0c 	andi	r2,r2,124
   101f0:	1004d0ba 	srli	r2,r2,2
   101f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101f8:	0005333a 	rdctl	r2,badaddr
   101fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10200:	d0a6b317 	ldw	r2,-25908(gp)
   10204:	10000726 	beq	r2,zero,10224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10208:	d0a6b317 	ldw	r2,-25908(gp)
   1020c:	e0fffd17 	ldw	r3,-12(fp)
   10210:	1809883a 	mov	r4,r3
   10214:	e17fff17 	ldw	r5,-4(fp)
   10218:	e1bffe17 	ldw	r6,-8(fp)
   1021c:	103ee83a 	callr	r2
   10220:	00000206 	br	1022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10228:	0005883a 	mov	r2,zero
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

Disassembly of section .text:

00010240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1024c:	00bffd16 	blt	zero,r2,10244 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10250:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10254:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10258:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1025c:	d6bcbe14 	ori	gp,gp,62200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10260:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10264:	10a36714 	ori	r2,r2,36252

    movhi r3, %hi(__bss_end)
   10268:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1026c:	18e3bc14 	ori	r3,r3,36592

    beq r2, r3, 1f
   10270:	10c00326 	beq	r2,r3,10280 <_start+0x40>

0:
    stw zero, (r2)
   10274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1027c:	10fffd36 	bltu	r2,r3,10274 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10280:	00132d00 	call	132d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10284:	00134740 	call	13474 <alt_main>

00010288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10288:	003fff06 	br	10288 <alt_after_alt_main>

0001028c <main>:
 */

#include <stdio.h>

int main()
{
   1028c:	defffe04 	addi	sp,sp,-8
   10290:	dfc00115 	stw	ra,4(sp)
   10294:	df000015 	stw	fp,0(sp)
   10298:	d839883a 	mov	fp,sp

while (1){
  printf("Hello from Nios II!1231231231432u4ieuripowamadjfis;fmacwi;rmwaeri;wmriwe;criwpwuieropwruicw;mwriwc;ermcwi;amrcija;smfisa;dm\n");
   1029c:	01000074 	movhi	r4,1
   102a0:	21160504 	addi	r4,r4,22548
   102a4:	00103600 	call	10360 <puts>
  usleep(1000*1000);
   102a8:	010003f4 	movhi	r4,15
   102ac:	21109004 	addi	r4,r4,16960
   102b0:	00137880 	call	13788 <usleep>
}
   102b4:	003ff906 	br	1029c <main+0x10>

000102b8 <_puts_r>:
   102b8:	defff604 	addi	sp,sp,-40
   102bc:	dc000715 	stw	r16,28(sp)
   102c0:	2021883a 	mov	r16,r4
   102c4:	2809883a 	mov	r4,r5
   102c8:	dc400815 	stw	r17,32(sp)
   102cc:	dfc00915 	stw	ra,36(sp)
   102d0:	2823883a 	mov	r17,r5
   102d4:	00103740 	call	10374 <strlen>
   102d8:	81400217 	ldw	r5,8(r16)
   102dc:	11000044 	addi	r4,r2,1
   102e0:	d8800115 	stw	r2,4(sp)
   102e4:	00800074 	movhi	r2,1
   102e8:	2980030b 	ldhu	r6,12(r5)
   102ec:	10962404 	addi	r2,r2,22672
   102f0:	d8800215 	stw	r2,8(sp)
   102f4:	00800044 	movi	r2,1
   102f8:	d8800315 	stw	r2,12(sp)
   102fc:	00800084 	movi	r2,2
   10300:	d8800515 	stw	r2,20(sp)
   10304:	dc400015 	stw	r17,0(sp)
   10308:	d9000615 	stw	r4,24(sp)
   1030c:	dec00415 	stw	sp,16(sp)
   10310:	3088000c 	andi	r2,r6,8192
   10314:	1000061e 	bne	r2,zero,10330 <_puts_r+0x78>
   10318:	29001917 	ldw	r4,100(r5)
   1031c:	00b7ffc4 	movi	r2,-8193
   10320:	31880014 	ori	r6,r6,8192
   10324:	2084703a 	and	r2,r4,r2
   10328:	2980030d 	sth	r6,12(r5)
   1032c:	28801915 	stw	r2,100(r5)
   10330:	8009883a 	mov	r4,r16
   10334:	d9800404 	addi	r6,sp,16
   10338:	001040c0 	call	1040c <__sfvwrite_r>
   1033c:	1000061e 	bne	r2,zero,10358 <_puts_r+0xa0>
   10340:	00800284 	movi	r2,10
   10344:	dfc00917 	ldw	ra,36(sp)
   10348:	dc400817 	ldw	r17,32(sp)
   1034c:	dc000717 	ldw	r16,28(sp)
   10350:	dec00a04 	addi	sp,sp,40
   10354:	f800283a 	ret
   10358:	00bfffc4 	movi	r2,-1
   1035c:	003ff906 	br	10344 <_puts_r+0x8c>

00010360 <puts>:
   10360:	00800074 	movhi	r2,1
   10364:	109cbf04 	addi	r2,r2,29436
   10368:	200b883a 	mov	r5,r4
   1036c:	11000017 	ldw	r4,0(r2)
   10370:	00102b81 	jmpi	102b8 <_puts_r>

00010374 <strlen>:
   10374:	208000cc 	andi	r2,r4,3
   10378:	10002026 	beq	r2,zero,103fc <strlen+0x88>
   1037c:	20800007 	ldb	r2,0(r4)
   10380:	10002026 	beq	r2,zero,10404 <strlen+0x90>
   10384:	2005883a 	mov	r2,r4
   10388:	00000206 	br	10394 <strlen+0x20>
   1038c:	10c00007 	ldb	r3,0(r2)
   10390:	18001826 	beq	r3,zero,103f4 <strlen+0x80>
   10394:	10800044 	addi	r2,r2,1
   10398:	10c000cc 	andi	r3,r2,3
   1039c:	183ffb1e 	bne	r3,zero,1038c <strlen+0x18>
   103a0:	10c00017 	ldw	r3,0(r2)
   103a4:	01ffbff4 	movhi	r7,65279
   103a8:	39ffbfc4 	addi	r7,r7,-257
   103ac:	00ca303a 	nor	r5,zero,r3
   103b0:	01a02074 	movhi	r6,32897
   103b4:	19c7883a 	add	r3,r3,r7
   103b8:	31a02004 	addi	r6,r6,-32640
   103bc:	1946703a 	and	r3,r3,r5
   103c0:	1986703a 	and	r3,r3,r6
   103c4:	1800091e 	bne	r3,zero,103ec <strlen+0x78>
   103c8:	10800104 	addi	r2,r2,4
   103cc:	10c00017 	ldw	r3,0(r2)
   103d0:	19cb883a 	add	r5,r3,r7
   103d4:	00c6303a 	nor	r3,zero,r3
   103d8:	28c6703a 	and	r3,r5,r3
   103dc:	1986703a 	and	r3,r3,r6
   103e0:	183ff926 	beq	r3,zero,103c8 <strlen+0x54>
   103e4:	00000106 	br	103ec <strlen+0x78>
   103e8:	10800044 	addi	r2,r2,1
   103ec:	10c00007 	ldb	r3,0(r2)
   103f0:	183ffd1e 	bne	r3,zero,103e8 <strlen+0x74>
   103f4:	1105c83a 	sub	r2,r2,r4
   103f8:	f800283a 	ret
   103fc:	2005883a 	mov	r2,r4
   10400:	003fe706 	br	103a0 <strlen+0x2c>
   10404:	0005883a 	mov	r2,zero
   10408:	f800283a 	ret

0001040c <__sfvwrite_r>:
   1040c:	30800217 	ldw	r2,8(r6)
   10410:	10006726 	beq	r2,zero,105b0 <__sfvwrite_r+0x1a4>
   10414:	defff404 	addi	sp,sp,-48
   10418:	dd000615 	stw	r20,24(sp)
   1041c:	2029883a 	mov	r20,r4
   10420:	2900030b 	ldhu	r4,12(r5)
   10424:	ddc00915 	stw	r23,36(sp)
   10428:	dc000215 	stw	r16,8(sp)
   1042c:	dfc00b15 	stw	ra,44(sp)
   10430:	df000a15 	stw	fp,40(sp)
   10434:	dd800815 	stw	r22,32(sp)
   10438:	dd400715 	stw	r21,28(sp)
   1043c:	dcc00515 	stw	r19,20(sp)
   10440:	dc800415 	stw	r18,16(sp)
   10444:	dc400315 	stw	r17,12(sp)
   10448:	2080020c 	andi	r2,r4,8
   1044c:	2821883a 	mov	r16,r5
   10450:	302f883a 	mov	r23,r6
   10454:	10002726 	beq	r2,zero,104f4 <__sfvwrite_r+0xe8>
   10458:	28800417 	ldw	r2,16(r5)
   1045c:	10002526 	beq	r2,zero,104f4 <__sfvwrite_r+0xe8>
   10460:	2080008c 	andi	r2,r4,2
   10464:	bc400017 	ldw	r17,0(r23)
   10468:	10002a26 	beq	r2,zero,10514 <__sfvwrite_r+0x108>
   1046c:	05600034 	movhi	r21,32768
   10470:	0027883a 	mov	r19,zero
   10474:	0025883a 	mov	r18,zero
   10478:	ad7f0004 	addi	r21,r21,-1024
   1047c:	980d883a 	mov	r6,r19
   10480:	a009883a 	mov	r4,r20
   10484:	90004626 	beq	r18,zero,105a0 <__sfvwrite_r+0x194>
   10488:	900f883a 	mov	r7,r18
   1048c:	81400717 	ldw	r5,28(r16)
   10490:	ac80022e 	bgeu	r21,r18,1049c <__sfvwrite_r+0x90>
   10494:	01e00034 	movhi	r7,32768
   10498:	39ff0004 	addi	r7,r7,-1024
   1049c:	80800917 	ldw	r2,36(r16)
   104a0:	103ee83a 	callr	r2
   104a4:	0080520e 	bge	zero,r2,105f0 <__sfvwrite_r+0x1e4>
   104a8:	b8c00217 	ldw	r3,8(r23)
   104ac:	98a7883a 	add	r19,r19,r2
   104b0:	90a5c83a 	sub	r18,r18,r2
   104b4:	1885c83a 	sub	r2,r3,r2
   104b8:	b8800215 	stw	r2,8(r23)
   104bc:	103fef1e 	bne	r2,zero,1047c <__sfvwrite_r+0x70>
   104c0:	0005883a 	mov	r2,zero
   104c4:	dfc00b17 	ldw	ra,44(sp)
   104c8:	df000a17 	ldw	fp,40(sp)
   104cc:	ddc00917 	ldw	r23,36(sp)
   104d0:	dd800817 	ldw	r22,32(sp)
   104d4:	dd400717 	ldw	r21,28(sp)
   104d8:	dd000617 	ldw	r20,24(sp)
   104dc:	dcc00517 	ldw	r19,20(sp)
   104e0:	dc800417 	ldw	r18,16(sp)
   104e4:	dc400317 	ldw	r17,12(sp)
   104e8:	dc000217 	ldw	r16,8(sp)
   104ec:	dec00c04 	addi	sp,sp,48
   104f0:	f800283a 	ret
   104f4:	a009883a 	mov	r4,r20
   104f8:	800b883a 	mov	r5,r16
   104fc:	00119ac0 	call	119ac <__swsetup_r>
   10500:	1000ec1e 	bne	r2,zero,108b4 <__sfvwrite_r+0x4a8>
   10504:	8100030b 	ldhu	r4,12(r16)
   10508:	bc400017 	ldw	r17,0(r23)
   1050c:	2080008c 	andi	r2,r4,2
   10510:	103fd61e 	bne	r2,zero,1046c <__sfvwrite_r+0x60>
   10514:	2080004c 	andi	r2,r4,1
   10518:	10003a1e 	bne	r2,zero,10604 <__sfvwrite_r+0x1f8>
   1051c:	0039883a 	mov	fp,zero
   10520:	0025883a 	mov	r18,zero
   10524:	90001a26 	beq	r18,zero,10590 <__sfvwrite_r+0x184>
   10528:	2080800c 	andi	r2,r4,512
   1052c:	85800217 	ldw	r22,8(r16)
   10530:	10007626 	beq	r2,zero,1070c <__sfvwrite_r+0x300>
   10534:	b027883a 	mov	r19,r22
   10538:	95809436 	bltu	r18,r22,1078c <__sfvwrite_r+0x380>
   1053c:	2081200c 	andi	r2,r4,1152
   10540:	10009f1e 	bne	r2,zero,107c0 <__sfvwrite_r+0x3b4>
   10544:	81000017 	ldw	r4,0(r16)
   10548:	e00b883a 	mov	r5,fp
   1054c:	980d883a 	mov	r6,r19
   10550:	00112940 	call	11294 <memmove>
   10554:	81000217 	ldw	r4,8(r16)
   10558:	81400017 	ldw	r5,0(r16)
   1055c:	9005883a 	mov	r2,r18
   10560:	2587c83a 	sub	r3,r4,r22
   10564:	2ce7883a 	add	r19,r5,r19
   10568:	80c00215 	stw	r3,8(r16)
   1056c:	84c00015 	stw	r19,0(r16)
   10570:	b8c00217 	ldw	r3,8(r23)
   10574:	e0b9883a 	add	fp,fp,r2
   10578:	90a5c83a 	sub	r18,r18,r2
   1057c:	1885c83a 	sub	r2,r3,r2
   10580:	b8800215 	stw	r2,8(r23)
   10584:	103fce26 	beq	r2,zero,104c0 <__sfvwrite_r+0xb4>
   10588:	8100030b 	ldhu	r4,12(r16)
   1058c:	903fe61e 	bne	r18,zero,10528 <__sfvwrite_r+0x11c>
   10590:	8f000017 	ldw	fp,0(r17)
   10594:	8c800117 	ldw	r18,4(r17)
   10598:	8c400204 	addi	r17,r17,8
   1059c:	003fe106 	br	10524 <__sfvwrite_r+0x118>
   105a0:	8cc00017 	ldw	r19,0(r17)
   105a4:	8c800117 	ldw	r18,4(r17)
   105a8:	8c400204 	addi	r17,r17,8
   105ac:	003fb306 	br	1047c <__sfvwrite_r+0x70>
   105b0:	0005883a 	mov	r2,zero
   105b4:	f800283a 	ret
   105b8:	00a00034 	movhi	r2,32768
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	9009883a 	mov	r4,r18
   105c4:	1480012e 	bgeu	r2,r18,105cc <__sfvwrite_r+0x1c0>
   105c8:	1009883a 	mov	r4,r2
   105cc:	980b883a 	mov	r5,r19
   105d0:	0012e6c0 	call	12e6c <__divsi3>
   105d4:	81400717 	ldw	r5,28(r16)
   105d8:	80c00917 	ldw	r3,36(r16)
   105dc:	988f383a 	mul	r7,r19,r2
   105e0:	a009883a 	mov	r4,r20
   105e4:	e00d883a 	mov	r6,fp
   105e8:	183ee83a 	callr	r3
   105ec:	00bfe016 	blt	zero,r2,10570 <__sfvwrite_r+0x164>
   105f0:	8080030b 	ldhu	r2,12(r16)
   105f4:	10801014 	ori	r2,r2,64
   105f8:	8080030d 	sth	r2,12(r16)
   105fc:	00bfffc4 	movi	r2,-1
   10600:	003fb006 	br	104c4 <__sfvwrite_r+0xb8>
   10604:	0027883a 	mov	r19,zero
   10608:	0011883a 	mov	r8,zero
   1060c:	0039883a 	mov	fp,zero
   10610:	0025883a 	mov	r18,zero
   10614:	90001f26 	beq	r18,zero,10694 <__sfvwrite_r+0x288>
   10618:	40006026 	beq	r8,zero,1079c <__sfvwrite_r+0x390>
   1061c:	982b883a 	mov	r21,r19
   10620:	94c0012e 	bgeu	r18,r19,10628 <__sfvwrite_r+0x21c>
   10624:	902b883a 	mov	r21,r18
   10628:	81000017 	ldw	r4,0(r16)
   1062c:	80800417 	ldw	r2,16(r16)
   10630:	a82d883a 	mov	r22,r21
   10634:	81800217 	ldw	r6,8(r16)
   10638:	81c00517 	ldw	r7,20(r16)
   1063c:	1100022e 	bgeu	r2,r4,10648 <__sfvwrite_r+0x23c>
   10640:	31c7883a 	add	r3,r6,r7
   10644:	1d401816 	blt	r3,r21,106a8 <__sfvwrite_r+0x29c>
   10648:	a9c04416 	blt	r21,r7,1075c <__sfvwrite_r+0x350>
   1064c:	80800917 	ldw	r2,36(r16)
   10650:	81400717 	ldw	r5,28(r16)
   10654:	a009883a 	mov	r4,r20
   10658:	da000115 	stw	r8,4(sp)
   1065c:	e00d883a 	mov	r6,fp
   10660:	103ee83a 	callr	r2
   10664:	102d883a 	mov	r22,r2
   10668:	da000117 	ldw	r8,4(sp)
   1066c:	00bfe00e 	bge	zero,r2,105f0 <__sfvwrite_r+0x1e4>
   10670:	9da7c83a 	sub	r19,r19,r22
   10674:	98001f26 	beq	r19,zero,106f4 <__sfvwrite_r+0x2e8>
   10678:	b8800217 	ldw	r2,8(r23)
   1067c:	e5b9883a 	add	fp,fp,r22
   10680:	95a5c83a 	sub	r18,r18,r22
   10684:	15adc83a 	sub	r22,r2,r22
   10688:	bd800215 	stw	r22,8(r23)
   1068c:	b03f8c26 	beq	r22,zero,104c0 <__sfvwrite_r+0xb4>
   10690:	903fe11e 	bne	r18,zero,10618 <__sfvwrite_r+0x20c>
   10694:	8f000017 	ldw	fp,0(r17)
   10698:	8c800117 	ldw	r18,4(r17)
   1069c:	0011883a 	mov	r8,zero
   106a0:	8c400204 	addi	r17,r17,8
   106a4:	003fdb06 	br	10614 <__sfvwrite_r+0x208>
   106a8:	180d883a 	mov	r6,r3
   106ac:	e00b883a 	mov	r5,fp
   106b0:	da000115 	stw	r8,4(sp)
   106b4:	d8c00015 	stw	r3,0(sp)
   106b8:	00112940 	call	11294 <memmove>
   106bc:	d8c00017 	ldw	r3,0(sp)
   106c0:	80800017 	ldw	r2,0(r16)
   106c4:	a009883a 	mov	r4,r20
   106c8:	800b883a 	mov	r5,r16
   106cc:	10c5883a 	add	r2,r2,r3
   106d0:	80800015 	stw	r2,0(r16)
   106d4:	d8c00015 	stw	r3,0(sp)
   106d8:	0011d080 	call	11d08 <_fflush_r>
   106dc:	d8c00017 	ldw	r3,0(sp)
   106e0:	da000117 	ldw	r8,4(sp)
   106e4:	103fc21e 	bne	r2,zero,105f0 <__sfvwrite_r+0x1e4>
   106e8:	182d883a 	mov	r22,r3
   106ec:	9da7c83a 	sub	r19,r19,r22
   106f0:	983fe11e 	bne	r19,zero,10678 <__sfvwrite_r+0x26c>
   106f4:	a009883a 	mov	r4,r20
   106f8:	800b883a 	mov	r5,r16
   106fc:	0011d080 	call	11d08 <_fflush_r>
   10700:	103fbb1e 	bne	r2,zero,105f0 <__sfvwrite_r+0x1e4>
   10704:	0011883a 	mov	r8,zero
   10708:	003fdb06 	br	10678 <__sfvwrite_r+0x26c>
   1070c:	81000017 	ldw	r4,0(r16)
   10710:	80800417 	ldw	r2,16(r16)
   10714:	11000236 	bltu	r2,r4,10720 <__sfvwrite_r+0x314>
   10718:	84c00517 	ldw	r19,20(r16)
   1071c:	94ffa62e 	bgeu	r18,r19,105b8 <__sfvwrite_r+0x1ac>
   10720:	9027883a 	mov	r19,r18
   10724:	b480012e 	bgeu	r22,r18,1072c <__sfvwrite_r+0x320>
   10728:	b027883a 	mov	r19,r22
   1072c:	e00b883a 	mov	r5,fp
   10730:	980d883a 	mov	r6,r19
   10734:	00112940 	call	11294 <memmove>
   10738:	80800217 	ldw	r2,8(r16)
   1073c:	80c00017 	ldw	r3,0(r16)
   10740:	14c5c83a 	sub	r2,r2,r19
   10744:	1cc7883a 	add	r3,r3,r19
   10748:	80800215 	stw	r2,8(r16)
   1074c:	80c00015 	stw	r3,0(r16)
   10750:	10004326 	beq	r2,zero,10860 <__sfvwrite_r+0x454>
   10754:	9805883a 	mov	r2,r19
   10758:	003f8506 	br	10570 <__sfvwrite_r+0x164>
   1075c:	a80d883a 	mov	r6,r21
   10760:	e00b883a 	mov	r5,fp
   10764:	da000115 	stw	r8,4(sp)
   10768:	00112940 	call	11294 <memmove>
   1076c:	80800217 	ldw	r2,8(r16)
   10770:	80c00017 	ldw	r3,0(r16)
   10774:	da000117 	ldw	r8,4(sp)
   10778:	1545c83a 	sub	r2,r2,r21
   1077c:	1d6b883a 	add	r21,r3,r21
   10780:	80800215 	stw	r2,8(r16)
   10784:	85400015 	stw	r21,0(r16)
   10788:	003fb906 	br	10670 <__sfvwrite_r+0x264>
   1078c:	81000017 	ldw	r4,0(r16)
   10790:	902d883a 	mov	r22,r18
   10794:	9027883a 	mov	r19,r18
   10798:	003f6b06 	br	10548 <__sfvwrite_r+0x13c>
   1079c:	e009883a 	mov	r4,fp
   107a0:	01400284 	movi	r5,10
   107a4:	900d883a 	mov	r6,r18
   107a8:	00110740 	call	11074 <memchr>
   107ac:	10003e26 	beq	r2,zero,108a8 <__sfvwrite_r+0x49c>
   107b0:	10800044 	addi	r2,r2,1
   107b4:	1727c83a 	sub	r19,r2,fp
   107b8:	02000044 	movi	r8,1
   107bc:	003f9706 	br	1061c <__sfvwrite_r+0x210>
   107c0:	80800517 	ldw	r2,20(r16)
   107c4:	81400417 	ldw	r5,16(r16)
   107c8:	80c00017 	ldw	r3,0(r16)
   107cc:	10a7883a 	add	r19,r2,r2
   107d0:	9885883a 	add	r2,r19,r2
   107d4:	1026d7fa 	srli	r19,r2,31
   107d8:	196bc83a 	sub	r21,r3,r5
   107dc:	a9800044 	addi	r6,r21,1
   107e0:	9885883a 	add	r2,r19,r2
   107e4:	1027d07a 	srai	r19,r2,1
   107e8:	3485883a 	add	r2,r6,r18
   107ec:	980d883a 	mov	r6,r19
   107f0:	9880022e 	bgeu	r19,r2,107fc <__sfvwrite_r+0x3f0>
   107f4:	1027883a 	mov	r19,r2
   107f8:	100d883a 	mov	r6,r2
   107fc:	2101000c 	andi	r4,r4,1024
   10800:	20001c26 	beq	r4,zero,10874 <__sfvwrite_r+0x468>
   10804:	a009883a 	mov	r4,r20
   10808:	300b883a 	mov	r5,r6
   1080c:	00108cc0 	call	108cc <_malloc_r>
   10810:	102d883a 	mov	r22,r2
   10814:	10002926 	beq	r2,zero,108bc <__sfvwrite_r+0x4b0>
   10818:	81400417 	ldw	r5,16(r16)
   1081c:	1009883a 	mov	r4,r2
   10820:	a80d883a 	mov	r6,r21
   10824:	001115c0 	call	1115c <memcpy>
   10828:	8080030b 	ldhu	r2,12(r16)
   1082c:	00fedfc4 	movi	r3,-1153
   10830:	10c4703a 	and	r2,r2,r3
   10834:	10802014 	ori	r2,r2,128
   10838:	8080030d 	sth	r2,12(r16)
   1083c:	b549883a 	add	r4,r22,r21
   10840:	9d4bc83a 	sub	r5,r19,r21
   10844:	85800415 	stw	r22,16(r16)
   10848:	84c00515 	stw	r19,20(r16)
   1084c:	81000015 	stw	r4,0(r16)
   10850:	902d883a 	mov	r22,r18
   10854:	81400215 	stw	r5,8(r16)
   10858:	9027883a 	mov	r19,r18
   1085c:	003f3a06 	br	10548 <__sfvwrite_r+0x13c>
   10860:	a009883a 	mov	r4,r20
   10864:	800b883a 	mov	r5,r16
   10868:	0011d080 	call	11d08 <_fflush_r>
   1086c:	103fb926 	beq	r2,zero,10754 <__sfvwrite_r+0x348>
   10870:	003f5f06 	br	105f0 <__sfvwrite_r+0x1e4>
   10874:	a009883a 	mov	r4,r20
   10878:	00113f00 	call	113f0 <_realloc_r>
   1087c:	102d883a 	mov	r22,r2
   10880:	103fee1e 	bne	r2,zero,1083c <__sfvwrite_r+0x430>
   10884:	81400417 	ldw	r5,16(r16)
   10888:	a009883a 	mov	r4,r20
   1088c:	00122580 	call	12258 <_free_r>
   10890:	8080030b 	ldhu	r2,12(r16)
   10894:	00ffdfc4 	movi	r3,-129
   10898:	1884703a 	and	r2,r3,r2
   1089c:	00c00304 	movi	r3,12
   108a0:	a0c00015 	stw	r3,0(r20)
   108a4:	003f5306 	br	105f4 <__sfvwrite_r+0x1e8>
   108a8:	94c00044 	addi	r19,r18,1
   108ac:	02000044 	movi	r8,1
   108b0:	003f5a06 	br	1061c <__sfvwrite_r+0x210>
   108b4:	00bfffc4 	movi	r2,-1
   108b8:	003f0206 	br	104c4 <__sfvwrite_r+0xb8>
   108bc:	00800304 	movi	r2,12
   108c0:	a0800015 	stw	r2,0(r20)
   108c4:	8080030b 	ldhu	r2,12(r16)
   108c8:	003f4a06 	br	105f4 <__sfvwrite_r+0x1e8>

000108cc <_malloc_r>:
   108cc:	defff504 	addi	sp,sp,-44
   108d0:	dc800315 	stw	r18,12(sp)
   108d4:	dfc00a15 	stw	ra,40(sp)
   108d8:	df000915 	stw	fp,36(sp)
   108dc:	ddc00815 	stw	r23,32(sp)
   108e0:	dd800715 	stw	r22,28(sp)
   108e4:	dd400615 	stw	r21,24(sp)
   108e8:	dd000515 	stw	r20,20(sp)
   108ec:	dcc00415 	stw	r19,16(sp)
   108f0:	dc400215 	stw	r17,8(sp)
   108f4:	dc000115 	stw	r16,4(sp)
   108f8:	288002c4 	addi	r2,r5,11
   108fc:	00c00584 	movi	r3,22
   10900:	2025883a 	mov	r18,r4
   10904:	18802a2e 	bgeu	r3,r2,109b0 <_malloc_r+0xe4>
   10908:	047ffe04 	movi	r17,-8
   1090c:	1462703a 	and	r17,r2,r17
   10910:	88009e16 	blt	r17,zero,10b8c <_malloc_r+0x2c0>
   10914:	89409d36 	bltu	r17,r5,10b8c <_malloc_r+0x2c0>
   10918:	00134ec0 	call	134ec <__malloc_lock>
   1091c:	00807dc4 	movi	r2,503
   10920:	14402736 	bltu	r2,r17,109c0 <_malloc_r+0xf4>
   10924:	8806d0fa 	srli	r3,r17,3
   10928:	04c00074 	movhi	r19,1
   1092c:	9cd73a04 	addi	r19,r19,23784
   10930:	18c5883a 	add	r2,r3,r3
   10934:	1085883a 	add	r2,r2,r2
   10938:	1085883a 	add	r2,r2,r2
   1093c:	9885883a 	add	r2,r19,r2
   10940:	14000317 	ldw	r16,12(r2)
   10944:	80814a26 	beq	r16,r2,10e70 <_malloc_r+0x5a4>
   10948:	80c00117 	ldw	r3,4(r16)
   1094c:	81000317 	ldw	r4,12(r16)
   10950:	00bfff04 	movi	r2,-4
   10954:	1884703a 	and	r2,r3,r2
   10958:	81400217 	ldw	r5,8(r16)
   1095c:	8085883a 	add	r2,r16,r2
   10960:	10c00117 	ldw	r3,4(r2)
   10964:	29000315 	stw	r4,12(r5)
   10968:	21400215 	stw	r5,8(r4)
   1096c:	18c00054 	ori	r3,r3,1
   10970:	10c00115 	stw	r3,4(r2)
   10974:	9009883a 	mov	r4,r18
   10978:	001350c0 	call	1350c <__malloc_unlock>
   1097c:	80800204 	addi	r2,r16,8
   10980:	dfc00a17 	ldw	ra,40(sp)
   10984:	df000917 	ldw	fp,36(sp)
   10988:	ddc00817 	ldw	r23,32(sp)
   1098c:	dd800717 	ldw	r22,28(sp)
   10990:	dd400617 	ldw	r21,24(sp)
   10994:	dd000517 	ldw	r20,20(sp)
   10998:	dcc00417 	ldw	r19,16(sp)
   1099c:	dc800317 	ldw	r18,12(sp)
   109a0:	dc400217 	ldw	r17,8(sp)
   109a4:	dc000117 	ldw	r16,4(sp)
   109a8:	dec00b04 	addi	sp,sp,44
   109ac:	f800283a 	ret
   109b0:	04400404 	movi	r17,16
   109b4:	89407536 	bltu	r17,r5,10b8c <_malloc_r+0x2c0>
   109b8:	00134ec0 	call	134ec <__malloc_lock>
   109bc:	003fd906 	br	10924 <_malloc_r+0x58>
   109c0:	8806d27a 	srli	r3,r17,9
   109c4:	18007526 	beq	r3,zero,10b9c <_malloc_r+0x2d0>
   109c8:	00800104 	movi	r2,4
   109cc:	10c0ef36 	bltu	r2,r3,10d8c <_malloc_r+0x4c0>
   109d0:	8806d1ba 	srli	r3,r17,6
   109d4:	19c00e04 	addi	r7,r3,56
   109d8:	39cb883a 	add	r5,r7,r7
   109dc:	04c00074 	movhi	r19,1
   109e0:	294b883a 	add	r5,r5,r5
   109e4:	9cd73a04 	addi	r19,r19,23784
   109e8:	294b883a 	add	r5,r5,r5
   109ec:	994b883a 	add	r5,r19,r5
   109f0:	2c000317 	ldw	r16,12(r5)
   109f4:	2c000e26 	beq	r5,r16,10a30 <_malloc_r+0x164>
   109f8:	80800117 	ldw	r2,4(r16)
   109fc:	01bfff04 	movi	r6,-4
   10a00:	010003c4 	movi	r4,15
   10a04:	1184703a 	and	r2,r2,r6
   10a08:	1447c83a 	sub	r3,r2,r17
   10a0c:	20c00716 	blt	r4,r3,10a2c <_malloc_r+0x160>
   10a10:	1800650e 	bge	r3,zero,10ba8 <_malloc_r+0x2dc>
   10a14:	84000317 	ldw	r16,12(r16)
   10a18:	2c000526 	beq	r5,r16,10a30 <_malloc_r+0x164>
   10a1c:	80800117 	ldw	r2,4(r16)
   10a20:	1184703a 	and	r2,r2,r6
   10a24:	1447c83a 	sub	r3,r2,r17
   10a28:	20fff90e 	bge	r4,r3,10a10 <_malloc_r+0x144>
   10a2c:	39ffffc4 	addi	r7,r7,-1
   10a30:	38c00044 	addi	r3,r7,1
   10a34:	01800074 	movhi	r6,1
   10a38:	9c000417 	ldw	r16,16(r19)
   10a3c:	31973a04 	addi	r6,r6,23784
   10a40:	32400204 	addi	r9,r6,8
   10a44:	82410326 	beq	r16,r9,10e54 <_malloc_r+0x588>
   10a48:	81000117 	ldw	r4,4(r16)
   10a4c:	00bfff04 	movi	r2,-4
   10a50:	208e703a 	and	r7,r4,r2
   10a54:	3c45c83a 	sub	r2,r7,r17
   10a58:	010003c4 	movi	r4,15
   10a5c:	2080ee16 	blt	r4,r2,10e18 <_malloc_r+0x54c>
   10a60:	32400515 	stw	r9,20(r6)
   10a64:	32400415 	stw	r9,16(r6)
   10a68:	1000510e 	bge	r2,zero,10bb0 <_malloc_r+0x2e4>
   10a6c:	00807fc4 	movi	r2,511
   10a70:	11c0ce36 	bltu	r2,r7,10dac <_malloc_r+0x4e0>
   10a74:	3808d0fa 	srli	r4,r7,3
   10a78:	01c00044 	movi	r7,1
   10a7c:	30800117 	ldw	r2,4(r6)
   10a80:	210b883a 	add	r5,r4,r4
   10a84:	294b883a 	add	r5,r5,r5
   10a88:	2009d0ba 	srai	r4,r4,2
   10a8c:	294b883a 	add	r5,r5,r5
   10a90:	298b883a 	add	r5,r5,r6
   10a94:	2a000217 	ldw	r8,8(r5)
   10a98:	3908983a 	sll	r4,r7,r4
   10a9c:	81400315 	stw	r5,12(r16)
   10aa0:	82000215 	stw	r8,8(r16)
   10aa4:	2088b03a 	or	r4,r4,r2
   10aa8:	2c000215 	stw	r16,8(r5)
   10aac:	31000115 	stw	r4,4(r6)
   10ab0:	44000315 	stw	r16,12(r8)
   10ab4:	1805d0ba 	srai	r2,r3,2
   10ab8:	01400044 	movi	r5,1
   10abc:	288a983a 	sll	r5,r5,r2
   10ac0:	21404336 	bltu	r4,r5,10bd0 <_malloc_r+0x304>
   10ac4:	2144703a 	and	r2,r4,r5
   10ac8:	10000a1e 	bne	r2,zero,10af4 <_malloc_r+0x228>
   10acc:	00bfff04 	movi	r2,-4
   10ad0:	294b883a 	add	r5,r5,r5
   10ad4:	1886703a 	and	r3,r3,r2
   10ad8:	2144703a 	and	r2,r4,r5
   10adc:	18c00104 	addi	r3,r3,4
   10ae0:	1000041e 	bne	r2,zero,10af4 <_malloc_r+0x228>
   10ae4:	294b883a 	add	r5,r5,r5
   10ae8:	2144703a 	and	r2,r4,r5
   10aec:	18c00104 	addi	r3,r3,4
   10af0:	103ffc26 	beq	r2,zero,10ae4 <_malloc_r+0x218>
   10af4:	023fff04 	movi	r8,-4
   10af8:	01c003c4 	movi	r7,15
   10afc:	18c5883a 	add	r2,r3,r3
   10b00:	1085883a 	add	r2,r2,r2
   10b04:	1085883a 	add	r2,r2,r2
   10b08:	9895883a 	add	r10,r19,r2
   10b0c:	52c00304 	addi	r11,r10,12
   10b10:	1819883a 	mov	r12,r3
   10b14:	5c000017 	ldw	r16,0(r11)
   10b18:	59bffd04 	addi	r6,r11,-12
   10b1c:	8180041e 	bne	r16,r6,10b30 <_malloc_r+0x264>
   10b20:	0000ce06 	br	10e5c <_malloc_r+0x590>
   10b24:	2000d70e 	bge	r4,zero,10e84 <_malloc_r+0x5b8>
   10b28:	84000317 	ldw	r16,12(r16)
   10b2c:	8180cb26 	beq	r16,r6,10e5c <_malloc_r+0x590>
   10b30:	80800117 	ldw	r2,4(r16)
   10b34:	1204703a 	and	r2,r2,r8
   10b38:	1449c83a 	sub	r4,r2,r17
   10b3c:	393ff90e 	bge	r7,r4,10b24 <_malloc_r+0x258>
   10b40:	80800317 	ldw	r2,12(r16)
   10b44:	80c00217 	ldw	r3,8(r16)
   10b48:	89400054 	ori	r5,r17,1
   10b4c:	81400115 	stw	r5,4(r16)
   10b50:	18800315 	stw	r2,12(r3)
   10b54:	10c00215 	stw	r3,8(r2)
   10b58:	8463883a 	add	r17,r16,r17
   10b5c:	9c400515 	stw	r17,20(r19)
   10b60:	9c400415 	stw	r17,16(r19)
   10b64:	20800054 	ori	r2,r4,1
   10b68:	88800115 	stw	r2,4(r17)
   10b6c:	8a400315 	stw	r9,12(r17)
   10b70:	8a400215 	stw	r9,8(r17)
   10b74:	8923883a 	add	r17,r17,r4
   10b78:	89000015 	stw	r4,0(r17)
   10b7c:	9009883a 	mov	r4,r18
   10b80:	001350c0 	call	1350c <__malloc_unlock>
   10b84:	80800204 	addi	r2,r16,8
   10b88:	003f7d06 	br	10980 <_malloc_r+0xb4>
   10b8c:	00800304 	movi	r2,12
   10b90:	90800015 	stw	r2,0(r18)
   10b94:	0005883a 	mov	r2,zero
   10b98:	003f7906 	br	10980 <_malloc_r+0xb4>
   10b9c:	01401f84 	movi	r5,126
   10ba0:	01c00fc4 	movi	r7,63
   10ba4:	003f8d06 	br	109dc <_malloc_r+0x110>
   10ba8:	81000317 	ldw	r4,12(r16)
   10bac:	003f6a06 	br	10958 <_malloc_r+0x8c>
   10bb0:	81c5883a 	add	r2,r16,r7
   10bb4:	10c00117 	ldw	r3,4(r2)
   10bb8:	9009883a 	mov	r4,r18
   10bbc:	18c00054 	ori	r3,r3,1
   10bc0:	10c00115 	stw	r3,4(r2)
   10bc4:	001350c0 	call	1350c <__malloc_unlock>
   10bc8:	80800204 	addi	r2,r16,8
   10bcc:	003f6c06 	br	10980 <_malloc_r+0xb4>
   10bd0:	9c000217 	ldw	r16,8(r19)
   10bd4:	00bfff04 	movi	r2,-4
   10bd8:	85800117 	ldw	r22,4(r16)
   10bdc:	b0ac703a 	and	r22,r22,r2
   10be0:	b4400336 	bltu	r22,r17,10bf0 <_malloc_r+0x324>
   10be4:	b445c83a 	sub	r2,r22,r17
   10be8:	00c003c4 	movi	r3,15
   10bec:	18805d16 	blt	r3,r2,10d64 <_malloc_r+0x498>
   10bf0:	05c00074 	movhi	r23,1
   10bf4:	008000b4 	movhi	r2,2
   10bf8:	bddcc004 	addi	r23,r23,29440
   10bfc:	10a36904 	addi	r2,r2,-29276
   10c00:	15400017 	ldw	r21,0(r2)
   10c04:	b9000017 	ldw	r4,0(r23)
   10c08:	00ffffc4 	movi	r3,-1
   10c0c:	858d883a 	add	r6,r16,r22
   10c10:	8d6b883a 	add	r21,r17,r21
   10c14:	20c0e426 	beq	r4,r3,10fa8 <_malloc_r+0x6dc>
   10c18:	ad4403c4 	addi	r21,r21,4111
   10c1c:	00fc0004 	movi	r3,-4096
   10c20:	a8ea703a 	and	r21,r21,r3
   10c24:	9009883a 	mov	r4,r18
   10c28:	a80b883a 	mov	r5,r21
   10c2c:	d9800015 	stw	r6,0(sp)
   10c30:	00119580 	call	11958 <_sbrk_r>
   10c34:	00ffffc4 	movi	r3,-1
   10c38:	1029883a 	mov	r20,r2
   10c3c:	d9800017 	ldw	r6,0(sp)
   10c40:	10c0a426 	beq	r2,r3,10ed4 <_malloc_r+0x608>
   10c44:	1180a236 	bltu	r2,r6,10ed0 <_malloc_r+0x604>
   10c48:	070000b4 	movhi	fp,2
   10c4c:	e7237204 	addi	fp,fp,-29240
   10c50:	e0c00017 	ldw	r3,0(fp)
   10c54:	a8c7883a 	add	r3,r21,r3
   10c58:	e0c00015 	stw	r3,0(fp)
   10c5c:	3500da26 	beq	r6,r20,10fc8 <_malloc_r+0x6fc>
   10c60:	b9000017 	ldw	r4,0(r23)
   10c64:	00bfffc4 	movi	r2,-1
   10c68:	2080e426 	beq	r4,r2,10ffc <_malloc_r+0x730>
   10c6c:	a185c83a 	sub	r2,r20,r6
   10c70:	1885883a 	add	r2,r3,r2
   10c74:	e0800015 	stw	r2,0(fp)
   10c78:	a0c001cc 	andi	r3,r20,7
   10c7c:	1800b526 	beq	r3,zero,10f54 <_malloc_r+0x688>
   10c80:	a0e9c83a 	sub	r20,r20,r3
   10c84:	00840204 	movi	r2,4104
   10c88:	a5000204 	addi	r20,r20,8
   10c8c:	10c7c83a 	sub	r3,r2,r3
   10c90:	a545883a 	add	r2,r20,r21
   10c94:	1083ffcc 	andi	r2,r2,4095
   10c98:	18abc83a 	sub	r21,r3,r2
   10c9c:	9009883a 	mov	r4,r18
   10ca0:	a80b883a 	mov	r5,r21
   10ca4:	00119580 	call	11958 <_sbrk_r>
   10ca8:	00ffffc4 	movi	r3,-1
   10cac:	10c0d026 	beq	r2,r3,10ff0 <_malloc_r+0x724>
   10cb0:	1507c83a 	sub	r3,r2,r20
   10cb4:	a8c7883a 	add	r3,r21,r3
   10cb8:	18c00054 	ori	r3,r3,1
   10cbc:	e0800017 	ldw	r2,0(fp)
   10cc0:	9d000215 	stw	r20,8(r19)
   10cc4:	a0c00115 	stw	r3,4(r20)
   10cc8:	a887883a 	add	r3,r21,r2
   10ccc:	e0c00015 	stw	r3,0(fp)
   10cd0:	84c00e26 	beq	r16,r19,10d0c <_malloc_r+0x440>
   10cd4:	018003c4 	movi	r6,15
   10cd8:	3580a02e 	bgeu	r6,r22,10f5c <_malloc_r+0x690>
   10cdc:	81400117 	ldw	r5,4(r16)
   10ce0:	013ffe04 	movi	r4,-8
   10ce4:	b0bffd04 	addi	r2,r22,-12
   10ce8:	1104703a 	and	r2,r2,r4
   10cec:	2900004c 	andi	r4,r5,1
   10cf0:	1108b03a 	or	r4,r2,r4
   10cf4:	81000115 	stw	r4,4(r16)
   10cf8:	01400144 	movi	r5,5
   10cfc:	8089883a 	add	r4,r16,r2
   10d00:	21400115 	stw	r5,4(r4)
   10d04:	21400215 	stw	r5,8(r4)
   10d08:	3080c036 	bltu	r6,r2,1100c <_malloc_r+0x740>
   10d0c:	008000b4 	movhi	r2,2
   10d10:	10a36804 	addi	r2,r2,-29280
   10d14:	11000017 	ldw	r4,0(r2)
   10d18:	20c0012e 	bgeu	r4,r3,10d20 <_malloc_r+0x454>
   10d1c:	10c00015 	stw	r3,0(r2)
   10d20:	008000b4 	movhi	r2,2
   10d24:	10a36704 	addi	r2,r2,-29284
   10d28:	11000017 	ldw	r4,0(r2)
   10d2c:	9c000217 	ldw	r16,8(r19)
   10d30:	20c0012e 	bgeu	r4,r3,10d38 <_malloc_r+0x46c>
   10d34:	10c00015 	stw	r3,0(r2)
   10d38:	80c00117 	ldw	r3,4(r16)
   10d3c:	00bfff04 	movi	r2,-4
   10d40:	1886703a 	and	r3,r3,r2
   10d44:	1c45c83a 	sub	r2,r3,r17
   10d48:	1c400236 	bltu	r3,r17,10d54 <_malloc_r+0x488>
   10d4c:	00c003c4 	movi	r3,15
   10d50:	18800416 	blt	r3,r2,10d64 <_malloc_r+0x498>
   10d54:	9009883a 	mov	r4,r18
   10d58:	001350c0 	call	1350c <__malloc_unlock>
   10d5c:	0005883a 	mov	r2,zero
   10d60:	003f0706 	br	10980 <_malloc_r+0xb4>
   10d64:	88c00054 	ori	r3,r17,1
   10d68:	80c00115 	stw	r3,4(r16)
   10d6c:	8463883a 	add	r17,r16,r17
   10d70:	10800054 	ori	r2,r2,1
   10d74:	9c400215 	stw	r17,8(r19)
   10d78:	88800115 	stw	r2,4(r17)
   10d7c:	9009883a 	mov	r4,r18
   10d80:	001350c0 	call	1350c <__malloc_unlock>
   10d84:	80800204 	addi	r2,r16,8
   10d88:	003efd06 	br	10980 <_malloc_r+0xb4>
   10d8c:	00800504 	movi	r2,20
   10d90:	10c0482e 	bgeu	r2,r3,10eb4 <_malloc_r+0x5e8>
   10d94:	00801504 	movi	r2,84
   10d98:	10c06836 	bltu	r2,r3,10f3c <_malloc_r+0x670>
   10d9c:	8806d33a 	srli	r3,r17,12
   10da0:	19c01b84 	addi	r7,r3,110
   10da4:	39cb883a 	add	r5,r7,r7
   10da8:	003f0c06 	br	109dc <_malloc_r+0x110>
   10dac:	3804d27a 	srli	r2,r7,9
   10db0:	01000104 	movi	r4,4
   10db4:	2080422e 	bgeu	r4,r2,10ec0 <_malloc_r+0x5f4>
   10db8:	01000504 	movi	r4,20
   10dbc:	20807c36 	bltu	r4,r2,10fb0 <_malloc_r+0x6e4>
   10dc0:	110016c4 	addi	r4,r2,91
   10dc4:	210b883a 	add	r5,r4,r4
   10dc8:	294b883a 	add	r5,r5,r5
   10dcc:	294b883a 	add	r5,r5,r5
   10dd0:	994b883a 	add	r5,r19,r5
   10dd4:	28800217 	ldw	r2,8(r5)
   10dd8:	02000074 	movhi	r8,1
   10ddc:	42173a04 	addi	r8,r8,23784
   10de0:	11406326 	beq	r2,r5,10f70 <_malloc_r+0x6a4>
   10de4:	01bfff04 	movi	r6,-4
   10de8:	11000117 	ldw	r4,4(r2)
   10dec:	2188703a 	and	r4,r4,r6
   10df0:	3900022e 	bgeu	r7,r4,10dfc <_malloc_r+0x530>
   10df4:	10800217 	ldw	r2,8(r2)
   10df8:	28bffb1e 	bne	r5,r2,10de8 <_malloc_r+0x51c>
   10dfc:	11800317 	ldw	r6,12(r2)
   10e00:	99000117 	ldw	r4,4(r19)
   10e04:	81800315 	stw	r6,12(r16)
   10e08:	80800215 	stw	r2,8(r16)
   10e0c:	34000215 	stw	r16,8(r6)
   10e10:	14000315 	stw	r16,12(r2)
   10e14:	003f2706 	br	10ab4 <_malloc_r+0x1e8>
   10e18:	88c00054 	ori	r3,r17,1
   10e1c:	80c00115 	stw	r3,4(r16)
   10e20:	8463883a 	add	r17,r16,r17
   10e24:	34400515 	stw	r17,20(r6)
   10e28:	34400415 	stw	r17,16(r6)
   10e2c:	10c00054 	ori	r3,r2,1
   10e30:	8a400315 	stw	r9,12(r17)
   10e34:	8a400215 	stw	r9,8(r17)
   10e38:	88c00115 	stw	r3,4(r17)
   10e3c:	88a3883a 	add	r17,r17,r2
   10e40:	88800015 	stw	r2,0(r17)
   10e44:	9009883a 	mov	r4,r18
   10e48:	001350c0 	call	1350c <__malloc_unlock>
   10e4c:	80800204 	addi	r2,r16,8
   10e50:	003ecb06 	br	10980 <_malloc_r+0xb4>
   10e54:	31000117 	ldw	r4,4(r6)
   10e58:	003f1606 	br	10ab4 <_malloc_r+0x1e8>
   10e5c:	63000044 	addi	r12,r12,1
   10e60:	608000cc 	andi	r2,r12,3
   10e64:	5ac00204 	addi	r11,r11,8
   10e68:	103f2a1e 	bne	r2,zero,10b14 <_malloc_r+0x248>
   10e6c:	00002106 	br	10ef4 <_malloc_r+0x628>
   10e70:	80800204 	addi	r2,r16,8
   10e74:	84000517 	ldw	r16,20(r16)
   10e78:	143eb31e 	bne	r2,r16,10948 <_malloc_r+0x7c>
   10e7c:	18c00084 	addi	r3,r3,2
   10e80:	003eec06 	br	10a34 <_malloc_r+0x168>
   10e84:	8085883a 	add	r2,r16,r2
   10e88:	10c00117 	ldw	r3,4(r2)
   10e8c:	81000317 	ldw	r4,12(r16)
   10e90:	81400217 	ldw	r5,8(r16)
   10e94:	18c00054 	ori	r3,r3,1
   10e98:	10c00115 	stw	r3,4(r2)
   10e9c:	29000315 	stw	r4,12(r5)
   10ea0:	21400215 	stw	r5,8(r4)
   10ea4:	9009883a 	mov	r4,r18
   10ea8:	001350c0 	call	1350c <__malloc_unlock>
   10eac:	80800204 	addi	r2,r16,8
   10eb0:	003eb306 	br	10980 <_malloc_r+0xb4>
   10eb4:	19c016c4 	addi	r7,r3,91
   10eb8:	39cb883a 	add	r5,r7,r7
   10ebc:	003ec706 	br	109dc <_malloc_r+0x110>
   10ec0:	3804d1ba 	srli	r2,r7,6
   10ec4:	11000e04 	addi	r4,r2,56
   10ec8:	210b883a 	add	r5,r4,r4
   10ecc:	003fbe06 	br	10dc8 <_malloc_r+0x4fc>
   10ed0:	84ff5d26 	beq	r16,r19,10c48 <_malloc_r+0x37c>
   10ed4:	9c000217 	ldw	r16,8(r19)
   10ed8:	00bfff04 	movi	r2,-4
   10edc:	80c00117 	ldw	r3,4(r16)
   10ee0:	1886703a 	and	r3,r3,r2
   10ee4:	003f9706 	br	10d44 <_malloc_r+0x478>
   10ee8:	52800017 	ldw	r10,0(r10)
   10eec:	18ffffc4 	addi	r3,r3,-1
   10ef0:	50805c1e 	bne	r10,r2,11064 <_malloc_r+0x798>
   10ef4:	190000cc 	andi	r4,r3,3
   10ef8:	50bffe04 	addi	r2,r10,-8
   10efc:	203ffa1e 	bne	r4,zero,10ee8 <_malloc_r+0x61c>
   10f00:	98800117 	ldw	r2,4(r19)
   10f04:	0146303a 	nor	r3,zero,r5
   10f08:	1884703a 	and	r2,r3,r2
   10f0c:	98800115 	stw	r2,4(r19)
   10f10:	294b883a 	add	r5,r5,r5
   10f14:	117f2e36 	bltu	r2,r5,10bd0 <_malloc_r+0x304>
   10f18:	283f2d26 	beq	r5,zero,10bd0 <_malloc_r+0x304>
   10f1c:	1146703a 	and	r3,r2,r5
   10f20:	1800521e 	bne	r3,zero,1106c <_malloc_r+0x7a0>
   10f24:	6007883a 	mov	r3,r12
   10f28:	294b883a 	add	r5,r5,r5
   10f2c:	1148703a 	and	r4,r2,r5
   10f30:	18c00104 	addi	r3,r3,4
   10f34:	203ffc26 	beq	r4,zero,10f28 <_malloc_r+0x65c>
   10f38:	003ef006 	br	10afc <_malloc_r+0x230>
   10f3c:	00805504 	movi	r2,340
   10f40:	10c01336 	bltu	r2,r3,10f90 <_malloc_r+0x6c4>
   10f44:	8806d3fa 	srli	r3,r17,15
   10f48:	19c01dc4 	addi	r7,r3,119
   10f4c:	39cb883a 	add	r5,r7,r7
   10f50:	003ea206 	br	109dc <_malloc_r+0x110>
   10f54:	00c40004 	movi	r3,4096
   10f58:	003f4d06 	br	10c90 <_malloc_r+0x3c4>
   10f5c:	00800044 	movi	r2,1
   10f60:	a0800115 	stw	r2,4(r20)
   10f64:	a021883a 	mov	r16,r20
   10f68:	0007883a 	mov	r3,zero
   10f6c:	003f7506 	br	10d44 <_malloc_r+0x478>
   10f70:	200bd0ba 	srai	r5,r4,2
   10f74:	01800044 	movi	r6,1
   10f78:	41000117 	ldw	r4,4(r8)
   10f7c:	314a983a 	sll	r5,r6,r5
   10f80:	100d883a 	mov	r6,r2
   10f84:	2908b03a 	or	r4,r5,r4
   10f88:	41000115 	stw	r4,4(r8)
   10f8c:	003f9d06 	br	10e04 <_malloc_r+0x538>
   10f90:	00815504 	movi	r2,1364
   10f94:	10c01336 	bltu	r2,r3,10fe4 <_malloc_r+0x718>
   10f98:	8806d4ba 	srli	r3,r17,18
   10f9c:	19c01f04 	addi	r7,r3,124
   10fa0:	39cb883a 	add	r5,r7,r7
   10fa4:	003e8d06 	br	109dc <_malloc_r+0x110>
   10fa8:	ad400404 	addi	r21,r21,16
   10fac:	003f1d06 	br	10c24 <_malloc_r+0x358>
   10fb0:	01001504 	movi	r4,84
   10fb4:	20801c36 	bltu	r4,r2,11028 <_malloc_r+0x75c>
   10fb8:	3804d33a 	srli	r2,r7,12
   10fbc:	11001b84 	addi	r4,r2,110
   10fc0:	210b883a 	add	r5,r4,r4
   10fc4:	003f8006 	br	10dc8 <_malloc_r+0x4fc>
   10fc8:	3083ffcc 	andi	r2,r6,4095
   10fcc:	103f241e 	bne	r2,zero,10c60 <_malloc_r+0x394>
   10fd0:	99000217 	ldw	r4,8(r19)
   10fd4:	ad85883a 	add	r2,r21,r22
   10fd8:	10800054 	ori	r2,r2,1
   10fdc:	20800115 	stw	r2,4(r4)
   10fe0:	003f4a06 	br	10d0c <_malloc_r+0x440>
   10fe4:	01403f04 	movi	r5,252
   10fe8:	01c01f84 	movi	r7,126
   10fec:	003e7b06 	br	109dc <_malloc_r+0x110>
   10ff0:	00c00044 	movi	r3,1
   10ff4:	002b883a 	mov	r21,zero
   10ff8:	003f3006 	br	10cbc <_malloc_r+0x3f0>
   10ffc:	00800074 	movhi	r2,1
   11000:	109cc004 	addi	r2,r2,29440
   11004:	15000015 	stw	r20,0(r2)
   11008:	003f1b06 	br	10c78 <_malloc_r+0x3ac>
   1100c:	9009883a 	mov	r4,r18
   11010:	81400204 	addi	r5,r16,8
   11014:	00122580 	call	12258 <_free_r>
   11018:	008000b4 	movhi	r2,2
   1101c:	10a37204 	addi	r2,r2,-29240
   11020:	10c00017 	ldw	r3,0(r2)
   11024:	003f3906 	br	10d0c <_malloc_r+0x440>
   11028:	01005504 	movi	r4,340
   1102c:	20800436 	bltu	r4,r2,11040 <_malloc_r+0x774>
   11030:	3804d3fa 	srli	r2,r7,15
   11034:	11001dc4 	addi	r4,r2,119
   11038:	210b883a 	add	r5,r4,r4
   1103c:	003f6206 	br	10dc8 <_malloc_r+0x4fc>
   11040:	01015504 	movi	r4,1364
   11044:	20800436 	bltu	r4,r2,11058 <_malloc_r+0x78c>
   11048:	3804d4ba 	srli	r2,r7,18
   1104c:	11001f04 	addi	r4,r2,124
   11050:	210b883a 	add	r5,r4,r4
   11054:	003f5c06 	br	10dc8 <_malloc_r+0x4fc>
   11058:	01403f04 	movi	r5,252
   1105c:	01001f84 	movi	r4,126
   11060:	003f5906 	br	10dc8 <_malloc_r+0x4fc>
   11064:	98800117 	ldw	r2,4(r19)
   11068:	003fa906 	br	10f10 <_malloc_r+0x644>
   1106c:	6007883a 	mov	r3,r12
   11070:	003ea206 	br	10afc <_malloc_r+0x230>

00011074 <memchr>:
   11074:	208000cc 	andi	r2,r4,3
   11078:	280f883a 	mov	r7,r5
   1107c:	10003526 	beq	r2,zero,11154 <memchr+0xe0>
   11080:	30bfffc4 	addi	r2,r6,-1
   11084:	30001b26 	beq	r6,zero,110f4 <memchr+0x80>
   11088:	21800003 	ldbu	r6,0(r4)
   1108c:	28c03fcc 	andi	r3,r5,255
   11090:	30c01a26 	beq	r6,r3,110fc <memchr+0x88>
   11094:	180d883a 	mov	r6,r3
   11098:	00000406 	br	110ac <memchr+0x38>
   1109c:	10001526 	beq	r2,zero,110f4 <memchr+0x80>
   110a0:	20c00003 	ldbu	r3,0(r4)
   110a4:	10bfffc4 	addi	r2,r2,-1
   110a8:	19801426 	beq	r3,r6,110fc <memchr+0x88>
   110ac:	21000044 	addi	r4,r4,1
   110b0:	20c000cc 	andi	r3,r4,3
   110b4:	183ff91e 	bne	r3,zero,1109c <memchr+0x28>
   110b8:	024000c4 	movi	r9,3
   110bc:	48801136 	bltu	r9,r2,11104 <memchr+0x90>
   110c0:	10000c26 	beq	r2,zero,110f4 <memchr+0x80>
   110c4:	20c00003 	ldbu	r3,0(r4)
   110c8:	29403fcc 	andi	r5,r5,255
   110cc:	19400b26 	beq	r3,r5,110fc <memchr+0x88>
   110d0:	20c00044 	addi	r3,r4,1
   110d4:	2085883a 	add	r2,r4,r2
   110d8:	39803fcc 	andi	r6,r7,255
   110dc:	00000306 	br	110ec <memchr+0x78>
   110e0:	18c00044 	addi	r3,r3,1
   110e4:	197fffc3 	ldbu	r5,-1(r3)
   110e8:	29800426 	beq	r5,r6,110fc <memchr+0x88>
   110ec:	1809883a 	mov	r4,r3
   110f0:	18bffb1e 	bne	r3,r2,110e0 <memchr+0x6c>
   110f4:	0005883a 	mov	r2,zero
   110f8:	f800283a 	ret
   110fc:	2005883a 	mov	r2,r4
   11100:	f800283a 	ret
   11104:	28c03fcc 	andi	r3,r5,255
   11108:	1810923a 	slli	r8,r3,8
   1110c:	02ffbff4 	movhi	r11,65279
   11110:	02a02074 	movhi	r10,32897
   11114:	40c6b03a 	or	r3,r8,r3
   11118:	1810943a 	slli	r8,r3,16
   1111c:	5affbfc4 	addi	r11,r11,-257
   11120:	52a02004 	addi	r10,r10,-32640
   11124:	40d0b03a 	or	r8,r8,r3
   11128:	20c00017 	ldw	r3,0(r4)
   1112c:	40c6f03a 	xor	r3,r8,r3
   11130:	1acd883a 	add	r6,r3,r11
   11134:	00c6303a 	nor	r3,zero,r3
   11138:	30c6703a 	and	r3,r6,r3
   1113c:	1a86703a 	and	r3,r3,r10
   11140:	183fdf1e 	bne	r3,zero,110c0 <memchr+0x4c>
   11144:	10bfff04 	addi	r2,r2,-4
   11148:	21000104 	addi	r4,r4,4
   1114c:	48bff636 	bltu	r9,r2,11128 <memchr+0xb4>
   11150:	003fdb06 	br	110c0 <memchr+0x4c>
   11154:	3005883a 	mov	r2,r6
   11158:	003fd706 	br	110b8 <memchr+0x44>

0001115c <memcpy>:
   1115c:	deffff04 	addi	sp,sp,-4
   11160:	dc000015 	stw	r16,0(sp)
   11164:	00c003c4 	movi	r3,15
   11168:	2005883a 	mov	r2,r4
   1116c:	1980432e 	bgeu	r3,r6,1127c <memcpy+0x120>
   11170:	2146b03a 	or	r3,r4,r5
   11174:	18c000cc 	andi	r3,r3,3
   11178:	1800421e 	bne	r3,zero,11284 <memcpy+0x128>
   1117c:	343ffc04 	addi	r16,r6,-16
   11180:	8020d13a 	srli	r16,r16,4
   11184:	28c00104 	addi	r3,r5,4
   11188:	23400104 	addi	r13,r4,4
   1118c:	801e913a 	slli	r15,r16,4
   11190:	2b000204 	addi	r12,r5,8
   11194:	22c00204 	addi	r11,r4,8
   11198:	7bc00504 	addi	r15,r15,20
   1119c:	2a800304 	addi	r10,r5,12
   111a0:	22400304 	addi	r9,r4,12
   111a4:	2bdf883a 	add	r15,r5,r15
   111a8:	2811883a 	mov	r8,r5
   111ac:	200f883a 	mov	r7,r4
   111b0:	41000017 	ldw	r4,0(r8)
   111b4:	39c00404 	addi	r7,r7,16
   111b8:	18c00404 	addi	r3,r3,16
   111bc:	393ffc15 	stw	r4,-16(r7)
   111c0:	1bbffc17 	ldw	r14,-16(r3)
   111c4:	6b400404 	addi	r13,r13,16
   111c8:	5ac00404 	addi	r11,r11,16
   111cc:	6bbffc15 	stw	r14,-16(r13)
   111d0:	63800017 	ldw	r14,0(r12)
   111d4:	4a400404 	addi	r9,r9,16
   111d8:	42000404 	addi	r8,r8,16
   111dc:	5bbffc15 	stw	r14,-16(r11)
   111e0:	53800017 	ldw	r14,0(r10)
   111e4:	63000404 	addi	r12,r12,16
   111e8:	52800404 	addi	r10,r10,16
   111ec:	4bbffc15 	stw	r14,-16(r9)
   111f0:	1bffef1e 	bne	r3,r15,111b0 <memcpy+0x54>
   111f4:	81c00044 	addi	r7,r16,1
   111f8:	380e913a 	slli	r7,r7,4
   111fc:	310003cc 	andi	r4,r6,15
   11200:	02c000c4 	movi	r11,3
   11204:	11c7883a 	add	r3,r2,r7
   11208:	29cb883a 	add	r5,r5,r7
   1120c:	59001f2e 	bgeu	r11,r4,1128c <memcpy+0x130>
   11210:	1813883a 	mov	r9,r3
   11214:	2811883a 	mov	r8,r5
   11218:	200f883a 	mov	r7,r4
   1121c:	42800017 	ldw	r10,0(r8)
   11220:	4a400104 	addi	r9,r9,4
   11224:	39ffff04 	addi	r7,r7,-4
   11228:	4abfff15 	stw	r10,-4(r9)
   1122c:	42000104 	addi	r8,r8,4
   11230:	59fffa36 	bltu	r11,r7,1121c <memcpy+0xc0>
   11234:	213fff04 	addi	r4,r4,-4
   11238:	2008d0ba 	srli	r4,r4,2
   1123c:	318000cc 	andi	r6,r6,3
   11240:	21000044 	addi	r4,r4,1
   11244:	2109883a 	add	r4,r4,r4
   11248:	2109883a 	add	r4,r4,r4
   1124c:	1907883a 	add	r3,r3,r4
   11250:	290b883a 	add	r5,r5,r4
   11254:	30000626 	beq	r6,zero,11270 <memcpy+0x114>
   11258:	198d883a 	add	r6,r3,r6
   1125c:	29c00003 	ldbu	r7,0(r5)
   11260:	18c00044 	addi	r3,r3,1
   11264:	29400044 	addi	r5,r5,1
   11268:	19ffffc5 	stb	r7,-1(r3)
   1126c:	19bffb1e 	bne	r3,r6,1125c <memcpy+0x100>
   11270:	dc000017 	ldw	r16,0(sp)
   11274:	dec00104 	addi	sp,sp,4
   11278:	f800283a 	ret
   1127c:	2007883a 	mov	r3,r4
   11280:	003ff406 	br	11254 <memcpy+0xf8>
   11284:	2007883a 	mov	r3,r4
   11288:	003ff306 	br	11258 <memcpy+0xfc>
   1128c:	200d883a 	mov	r6,r4
   11290:	003ff006 	br	11254 <memcpy+0xf8>

00011294 <memmove>:
   11294:	2005883a 	mov	r2,r4
   11298:	29000b2e 	bgeu	r5,r4,112c8 <memmove+0x34>
   1129c:	298f883a 	add	r7,r5,r6
   112a0:	21c0092e 	bgeu	r4,r7,112c8 <memmove+0x34>
   112a4:	2187883a 	add	r3,r4,r6
   112a8:	198bc83a 	sub	r5,r3,r6
   112ac:	30004b26 	beq	r6,zero,113dc <memmove+0x148>
   112b0:	39ffffc4 	addi	r7,r7,-1
   112b4:	39000003 	ldbu	r4,0(r7)
   112b8:	18ffffc4 	addi	r3,r3,-1
   112bc:	19000005 	stb	r4,0(r3)
   112c0:	197ffb1e 	bne	r3,r5,112b0 <memmove+0x1c>
   112c4:	f800283a 	ret
   112c8:	00c003c4 	movi	r3,15
   112cc:	1980412e 	bgeu	r3,r6,113d4 <memmove+0x140>
   112d0:	1146b03a 	or	r3,r2,r5
   112d4:	18c000cc 	andi	r3,r3,3
   112d8:	1800411e 	bne	r3,zero,113e0 <memmove+0x14c>
   112dc:	33fffc04 	addi	r15,r6,-16
   112e0:	781ed13a 	srli	r15,r15,4
   112e4:	28c00104 	addi	r3,r5,4
   112e8:	13400104 	addi	r13,r2,4
   112ec:	781c913a 	slli	r14,r15,4
   112f0:	2b000204 	addi	r12,r5,8
   112f4:	12c00204 	addi	r11,r2,8
   112f8:	73800504 	addi	r14,r14,20
   112fc:	2a800304 	addi	r10,r5,12
   11300:	12400304 	addi	r9,r2,12
   11304:	2b9d883a 	add	r14,r5,r14
   11308:	2811883a 	mov	r8,r5
   1130c:	100f883a 	mov	r7,r2
   11310:	41000017 	ldw	r4,0(r8)
   11314:	39c00404 	addi	r7,r7,16
   11318:	18c00404 	addi	r3,r3,16
   1131c:	393ffc15 	stw	r4,-16(r7)
   11320:	193ffc17 	ldw	r4,-16(r3)
   11324:	6b400404 	addi	r13,r13,16
   11328:	5ac00404 	addi	r11,r11,16
   1132c:	693ffc15 	stw	r4,-16(r13)
   11330:	61000017 	ldw	r4,0(r12)
   11334:	4a400404 	addi	r9,r9,16
   11338:	42000404 	addi	r8,r8,16
   1133c:	593ffc15 	stw	r4,-16(r11)
   11340:	51000017 	ldw	r4,0(r10)
   11344:	63000404 	addi	r12,r12,16
   11348:	52800404 	addi	r10,r10,16
   1134c:	493ffc15 	stw	r4,-16(r9)
   11350:	1bbfef1e 	bne	r3,r14,11310 <memmove+0x7c>
   11354:	79000044 	addi	r4,r15,1
   11358:	2008913a 	slli	r4,r4,4
   1135c:	328003cc 	andi	r10,r6,15
   11360:	02c000c4 	movi	r11,3
   11364:	1107883a 	add	r3,r2,r4
   11368:	290b883a 	add	r5,r5,r4
   1136c:	5a801e2e 	bgeu	r11,r10,113e8 <memmove+0x154>
   11370:	1813883a 	mov	r9,r3
   11374:	2811883a 	mov	r8,r5
   11378:	500f883a 	mov	r7,r10
   1137c:	41000017 	ldw	r4,0(r8)
   11380:	4a400104 	addi	r9,r9,4
   11384:	39ffff04 	addi	r7,r7,-4
   11388:	493fff15 	stw	r4,-4(r9)
   1138c:	42000104 	addi	r8,r8,4
   11390:	59fffa36 	bltu	r11,r7,1137c <memmove+0xe8>
   11394:	513fff04 	addi	r4,r10,-4
   11398:	2008d0ba 	srli	r4,r4,2
   1139c:	318000cc 	andi	r6,r6,3
   113a0:	21000044 	addi	r4,r4,1
   113a4:	2109883a 	add	r4,r4,r4
   113a8:	2109883a 	add	r4,r4,r4
   113ac:	1907883a 	add	r3,r3,r4
   113b0:	290b883a 	add	r5,r5,r4
   113b4:	30000926 	beq	r6,zero,113dc <memmove+0x148>
   113b8:	198d883a 	add	r6,r3,r6
   113bc:	29c00003 	ldbu	r7,0(r5)
   113c0:	18c00044 	addi	r3,r3,1
   113c4:	29400044 	addi	r5,r5,1
   113c8:	19ffffc5 	stb	r7,-1(r3)
   113cc:	19bffb1e 	bne	r3,r6,113bc <memmove+0x128>
   113d0:	f800283a 	ret
   113d4:	1007883a 	mov	r3,r2
   113d8:	003ff606 	br	113b4 <memmove+0x120>
   113dc:	f800283a 	ret
   113e0:	1007883a 	mov	r3,r2
   113e4:	003ff406 	br	113b8 <memmove+0x124>
   113e8:	500d883a 	mov	r6,r10
   113ec:	003ff106 	br	113b4 <memmove+0x120>

000113f0 <_realloc_r>:
   113f0:	defff604 	addi	sp,sp,-40
   113f4:	dd000415 	stw	r20,16(sp)
   113f8:	dc400115 	stw	r17,4(sp)
   113fc:	dfc00915 	stw	ra,36(sp)
   11400:	df000815 	stw	fp,32(sp)
   11404:	ddc00715 	stw	r23,28(sp)
   11408:	dd800615 	stw	r22,24(sp)
   1140c:	dd400515 	stw	r21,20(sp)
   11410:	dcc00315 	stw	r19,12(sp)
   11414:	dc800215 	stw	r18,8(sp)
   11418:	dc000015 	stw	r16,0(sp)
   1141c:	2829883a 	mov	r20,r5
   11420:	3023883a 	mov	r17,r6
   11424:	2800ad26 	beq	r5,zero,116dc <_realloc_r+0x2ec>
   11428:	2025883a 	mov	r18,r4
   1142c:	00134ec0 	call	134ec <__malloc_lock>
   11430:	a0ffff17 	ldw	r3,-4(r20)
   11434:	043fff04 	movi	r16,-4
   11438:	890002c4 	addi	r4,r17,11
   1143c:	01c00584 	movi	r7,22
   11440:	a57ffe04 	addi	r21,r20,-8
   11444:	1c20703a 	and	r16,r3,r16
   11448:	39001d2e 	bgeu	r7,r4,114c0 <_realloc_r+0xd0>
   1144c:	05bffe04 	movi	r22,-8
   11450:	25ac703a 	and	r22,r4,r22
   11454:	b00f883a 	mov	r7,r22
   11458:	b0006516 	blt	r22,zero,115f0 <_realloc_r+0x200>
   1145c:	b4406436 	bltu	r22,r17,115f0 <_realloc_r+0x200>
   11460:	81c01a0e 	bge	r16,r7,114cc <_realloc_r+0xdc>
   11464:	07000074 	movhi	fp,1
   11468:	e7173a04 	addi	fp,fp,23784
   1146c:	e1400217 	ldw	r5,8(fp)
   11470:	ac11883a 	add	r8,r21,r16
   11474:	2a006226 	beq	r5,r8,11600 <_realloc_r+0x210>
   11478:	41800117 	ldw	r6,4(r8)
   1147c:	027fff84 	movi	r9,-2
   11480:	3252703a 	and	r9,r6,r9
   11484:	4253883a 	add	r9,r8,r9
   11488:	49000117 	ldw	r4,4(r9)
   1148c:	2100004c 	andi	r4,r4,1
   11490:	2000281e 	bne	r4,zero,11534 <_realloc_r+0x144>
   11494:	00bfff04 	movi	r2,-4
   11498:	3084703a 	and	r2,r6,r2
   1149c:	1409883a 	add	r4,r2,r16
   114a0:	21c05e16 	blt	r4,r7,1161c <_realloc_r+0x22c>
   114a4:	40800317 	ldw	r2,12(r8)
   114a8:	41400217 	ldw	r5,8(r8)
   114ac:	a023883a 	mov	r17,r20
   114b0:	2021883a 	mov	r16,r4
   114b4:	28800315 	stw	r2,12(r5)
   114b8:	11400215 	stw	r5,8(r2)
   114bc:	00000406 	br	114d0 <_realloc_r+0xe0>
   114c0:	01c00404 	movi	r7,16
   114c4:	382d883a 	mov	r22,r7
   114c8:	003fe406 	br	1145c <_realloc_r+0x6c>
   114cc:	a023883a 	mov	r17,r20
   114d0:	858fc83a 	sub	r7,r16,r22
   114d4:	008003c4 	movi	r2,15
   114d8:	18c0004c 	andi	r3,r3,1
   114dc:	11c07236 	bltu	r2,r7,116a8 <_realloc_r+0x2b8>
   114e0:	1c06b03a 	or	r3,r3,r16
   114e4:	a8c00115 	stw	r3,4(r21)
   114e8:	ac21883a 	add	r16,r21,r16
   114ec:	80800117 	ldw	r2,4(r16)
   114f0:	10800054 	ori	r2,r2,1
   114f4:	80800115 	stw	r2,4(r16)
   114f8:	9009883a 	mov	r4,r18
   114fc:	001350c0 	call	1350c <__malloc_unlock>
   11500:	8805883a 	mov	r2,r17
   11504:	dfc00917 	ldw	ra,36(sp)
   11508:	df000817 	ldw	fp,32(sp)
   1150c:	ddc00717 	ldw	r23,28(sp)
   11510:	dd800617 	ldw	r22,24(sp)
   11514:	dd400517 	ldw	r21,20(sp)
   11518:	dd000417 	ldw	r20,16(sp)
   1151c:	dcc00317 	ldw	r19,12(sp)
   11520:	dc800217 	ldw	r18,8(sp)
   11524:	dc400117 	ldw	r17,4(sp)
   11528:	dc000017 	ldw	r16,0(sp)
   1152c:	dec00a04 	addi	sp,sp,40
   11530:	f800283a 	ret
   11534:	18c0004c 	andi	r3,r3,1
   11538:	1800081e 	bne	r3,zero,1155c <_realloc_r+0x16c>
   1153c:	a4fffe17 	ldw	r19,-8(r20)
   11540:	00bfff04 	movi	r2,-4
   11544:	ace7c83a 	sub	r19,r21,r19
   11548:	98c00117 	ldw	r3,4(r19)
   1154c:	1886703a 	and	r3,r3,r2
   11550:	98000226 	beq	r19,zero,1155c <_realloc_r+0x16c>
   11554:	1c2f883a 	add	r23,r3,r16
   11558:	b9c06d0e 	bge	r23,r7,11710 <_realloc_r+0x320>
   1155c:	880b883a 	mov	r5,r17
   11560:	9009883a 	mov	r4,r18
   11564:	00108cc0 	call	108cc <_malloc_r>
   11568:	1023883a 	mov	r17,r2
   1156c:	1000ef26 	beq	r2,zero,1192c <_realloc_r+0x53c>
   11570:	a0ffff17 	ldw	r3,-4(r20)
   11574:	113ffe04 	addi	r4,r2,-8
   11578:	00bfff84 	movi	r2,-2
   1157c:	1884703a 	and	r2,r3,r2
   11580:	a885883a 	add	r2,r21,r2
   11584:	2080bf26 	beq	r4,r2,11884 <_realloc_r+0x494>
   11588:	81bfff04 	addi	r6,r16,-4
   1158c:	00800904 	movi	r2,36
   11590:	11808936 	bltu	r2,r6,117b8 <_realloc_r+0x3c8>
   11594:	00c004c4 	movi	r3,19
   11598:	19806c2e 	bgeu	r3,r6,1174c <_realloc_r+0x35c>
   1159c:	a0c00017 	ldw	r3,0(r20)
   115a0:	88c00015 	stw	r3,0(r17)
   115a4:	a0c00117 	ldw	r3,4(r20)
   115a8:	88c00115 	stw	r3,4(r17)
   115ac:	00c006c4 	movi	r3,27
   115b0:	1980ac36 	bltu	r3,r6,11864 <_realloc_r+0x474>
   115b4:	88800204 	addi	r2,r17,8
   115b8:	a0c00204 	addi	r3,r20,8
   115bc:	19000017 	ldw	r4,0(r3)
   115c0:	11000015 	stw	r4,0(r2)
   115c4:	19000117 	ldw	r4,4(r3)
   115c8:	11000115 	stw	r4,4(r2)
   115cc:	18c00217 	ldw	r3,8(r3)
   115d0:	10c00215 	stw	r3,8(r2)
   115d4:	a00b883a 	mov	r5,r20
   115d8:	9009883a 	mov	r4,r18
   115dc:	00122580 	call	12258 <_free_r>
   115e0:	9009883a 	mov	r4,r18
   115e4:	001350c0 	call	1350c <__malloc_unlock>
   115e8:	8805883a 	mov	r2,r17
   115ec:	003fc506 	br	11504 <_realloc_r+0x114>
   115f0:	00800304 	movi	r2,12
   115f4:	90800015 	stw	r2,0(r18)
   115f8:	0005883a 	mov	r2,zero
   115fc:	003fc106 	br	11504 <_realloc_r+0x114>
   11600:	29800117 	ldw	r6,4(r5)
   11604:	00bfff04 	movi	r2,-4
   11608:	b1000404 	addi	r4,r22,16
   1160c:	3084703a 	and	r2,r6,r2
   11610:	140d883a 	add	r6,r2,r16
   11614:	31005b0e 	bge	r6,r4,11784 <_realloc_r+0x394>
   11618:	2811883a 	mov	r8,r5
   1161c:	18c0004c 	andi	r3,r3,1
   11620:	183fce1e 	bne	r3,zero,1155c <_realloc_r+0x16c>
   11624:	a4fffe17 	ldw	r19,-8(r20)
   11628:	00ffff04 	movi	r3,-4
   1162c:	ace7c83a 	sub	r19,r21,r19
   11630:	99000117 	ldw	r4,4(r19)
   11634:	20c6703a 	and	r3,r4,r3
   11638:	403fc526 	beq	r8,zero,11550 <_realloc_r+0x160>
   1163c:	1c2f883a 	add	r23,r3,r16
   11640:	b8af883a 	add	r23,r23,r2
   11644:	41406026 	beq	r8,r5,117c8 <_realloc_r+0x3d8>
   11648:	b9ffc116 	blt	r23,r7,11550 <_realloc_r+0x160>
   1164c:	40c00217 	ldw	r3,8(r8)
   11650:	40800317 	ldw	r2,12(r8)
   11654:	81bfff04 	addi	r6,r16,-4
   11658:	01000904 	movi	r4,36
   1165c:	18800315 	stw	r2,12(r3)
   11660:	10c00215 	stw	r3,8(r2)
   11664:	99400217 	ldw	r5,8(r19)
   11668:	98c00317 	ldw	r3,12(r19)
   1166c:	9c400204 	addi	r17,r19,8
   11670:	28c00315 	stw	r3,12(r5)
   11674:	19400215 	stw	r5,8(r3)
   11678:	21802d36 	bltu	r4,r6,11730 <_realloc_r+0x340>
   1167c:	008004c4 	movi	r2,19
   11680:	1180352e 	bgeu	r2,r6,11758 <_realloc_r+0x368>
   11684:	a0800017 	ldw	r2,0(r20)
   11688:	98800215 	stw	r2,8(r19)
   1168c:	a0800117 	ldw	r2,4(r20)
   11690:	98800315 	stw	r2,12(r19)
   11694:	008006c4 	movi	r2,27
   11698:	11808036 	bltu	r2,r6,1189c <_realloc_r+0x4ac>
   1169c:	98c00404 	addi	r3,r19,16
   116a0:	a5000204 	addi	r20,r20,8
   116a4:	00002d06 	br	1175c <_realloc_r+0x36c>
   116a8:	1d86b03a 	or	r3,r3,r22
   116ac:	ad8b883a 	add	r5,r21,r22
   116b0:	a8c00115 	stw	r3,4(r21)
   116b4:	38800054 	ori	r2,r7,1
   116b8:	28800115 	stw	r2,4(r5)
   116bc:	29cf883a 	add	r7,r5,r7
   116c0:	38800117 	ldw	r2,4(r7)
   116c4:	9009883a 	mov	r4,r18
   116c8:	29400204 	addi	r5,r5,8
   116cc:	10800054 	ori	r2,r2,1
   116d0:	38800115 	stw	r2,4(r7)
   116d4:	00122580 	call	12258 <_free_r>
   116d8:	003f8706 	br	114f8 <_realloc_r+0x108>
   116dc:	300b883a 	mov	r5,r6
   116e0:	dfc00917 	ldw	ra,36(sp)
   116e4:	df000817 	ldw	fp,32(sp)
   116e8:	ddc00717 	ldw	r23,28(sp)
   116ec:	dd800617 	ldw	r22,24(sp)
   116f0:	dd400517 	ldw	r21,20(sp)
   116f4:	dd000417 	ldw	r20,16(sp)
   116f8:	dcc00317 	ldw	r19,12(sp)
   116fc:	dc800217 	ldw	r18,8(sp)
   11700:	dc400117 	ldw	r17,4(sp)
   11704:	dc000017 	ldw	r16,0(sp)
   11708:	dec00a04 	addi	sp,sp,40
   1170c:	00108cc1 	jmpi	108cc <_malloc_r>
   11710:	98800317 	ldw	r2,12(r19)
   11714:	98c00217 	ldw	r3,8(r19)
   11718:	81bfff04 	addi	r6,r16,-4
   1171c:	01000904 	movi	r4,36
   11720:	18800315 	stw	r2,12(r3)
   11724:	10c00215 	stw	r3,8(r2)
   11728:	9c400204 	addi	r17,r19,8
   1172c:	21bfd32e 	bgeu	r4,r6,1167c <_realloc_r+0x28c>
   11730:	8809883a 	mov	r4,r17
   11734:	a00b883a 	mov	r5,r20
   11738:	00112940 	call	11294 <memmove>
   1173c:	98c00117 	ldw	r3,4(r19)
   11740:	b821883a 	mov	r16,r23
   11744:	982b883a 	mov	r21,r19
   11748:	003f6106 	br	114d0 <_realloc_r+0xe0>
   1174c:	8805883a 	mov	r2,r17
   11750:	a007883a 	mov	r3,r20
   11754:	003f9906 	br	115bc <_realloc_r+0x1cc>
   11758:	8807883a 	mov	r3,r17
   1175c:	a0800017 	ldw	r2,0(r20)
   11760:	b821883a 	mov	r16,r23
   11764:	982b883a 	mov	r21,r19
   11768:	18800015 	stw	r2,0(r3)
   1176c:	a0800117 	ldw	r2,4(r20)
   11770:	18800115 	stw	r2,4(r3)
   11774:	a0800217 	ldw	r2,8(r20)
   11778:	18800215 	stw	r2,8(r3)
   1177c:	98c00117 	ldw	r3,4(r19)
   11780:	003f5306 	br	114d0 <_realloc_r+0xe0>
   11784:	adab883a 	add	r21,r21,r22
   11788:	3585c83a 	sub	r2,r6,r22
   1178c:	e5400215 	stw	r21,8(fp)
   11790:	10800054 	ori	r2,r2,1
   11794:	a8800115 	stw	r2,4(r21)
   11798:	a0bfff17 	ldw	r2,-4(r20)
   1179c:	9009883a 	mov	r4,r18
   117a0:	1080004c 	andi	r2,r2,1
   117a4:	b0acb03a 	or	r22,r22,r2
   117a8:	a5bfff15 	stw	r22,-4(r20)
   117ac:	001350c0 	call	1350c <__malloc_unlock>
   117b0:	a005883a 	mov	r2,r20
   117b4:	003f5306 	br	11504 <_realloc_r+0x114>
   117b8:	8809883a 	mov	r4,r17
   117bc:	a00b883a 	mov	r5,r20
   117c0:	00112940 	call	11294 <memmove>
   117c4:	003f8306 	br	115d4 <_realloc_r+0x1e4>
   117c8:	b0800404 	addi	r2,r22,16
   117cc:	b8bf6016 	blt	r23,r2,11550 <_realloc_r+0x160>
   117d0:	98800317 	ldw	r2,12(r19)
   117d4:	98c00217 	ldw	r3,8(r19)
   117d8:	81bfff04 	addi	r6,r16,-4
   117dc:	01000904 	movi	r4,36
   117e0:	18800315 	stw	r2,12(r3)
   117e4:	10c00215 	stw	r3,8(r2)
   117e8:	9c400204 	addi	r17,r19,8
   117ec:	21804336 	bltu	r4,r6,118fc <_realloc_r+0x50c>
   117f0:	008004c4 	movi	r2,19
   117f4:	11803f2e 	bgeu	r2,r6,118f4 <_realloc_r+0x504>
   117f8:	a0800017 	ldw	r2,0(r20)
   117fc:	98800215 	stw	r2,8(r19)
   11800:	a0800117 	ldw	r2,4(r20)
   11804:	98800315 	stw	r2,12(r19)
   11808:	008006c4 	movi	r2,27
   1180c:	11803f36 	bltu	r2,r6,1190c <_realloc_r+0x51c>
   11810:	98800404 	addi	r2,r19,16
   11814:	a5000204 	addi	r20,r20,8
   11818:	a0c00017 	ldw	r3,0(r20)
   1181c:	10c00015 	stw	r3,0(r2)
   11820:	a0c00117 	ldw	r3,4(r20)
   11824:	10c00115 	stw	r3,4(r2)
   11828:	a0c00217 	ldw	r3,8(r20)
   1182c:	10c00215 	stw	r3,8(r2)
   11830:	9d87883a 	add	r3,r19,r22
   11834:	bd85c83a 	sub	r2,r23,r22
   11838:	e0c00215 	stw	r3,8(fp)
   1183c:	10800054 	ori	r2,r2,1
   11840:	18800115 	stw	r2,4(r3)
   11844:	98800117 	ldw	r2,4(r19)
   11848:	9009883a 	mov	r4,r18
   1184c:	1080004c 	andi	r2,r2,1
   11850:	b0acb03a 	or	r22,r22,r2
   11854:	9d800115 	stw	r22,4(r19)
   11858:	001350c0 	call	1350c <__malloc_unlock>
   1185c:	8805883a 	mov	r2,r17
   11860:	003f2806 	br	11504 <_realloc_r+0x114>
   11864:	a0c00217 	ldw	r3,8(r20)
   11868:	88c00215 	stw	r3,8(r17)
   1186c:	a0c00317 	ldw	r3,12(r20)
   11870:	88c00315 	stw	r3,12(r17)
   11874:	30801126 	beq	r6,r2,118bc <_realloc_r+0x4cc>
   11878:	88800404 	addi	r2,r17,16
   1187c:	a0c00404 	addi	r3,r20,16
   11880:	003f4e06 	br	115bc <_realloc_r+0x1cc>
   11884:	893fff17 	ldw	r4,-4(r17)
   11888:	00bfff04 	movi	r2,-4
   1188c:	a023883a 	mov	r17,r20
   11890:	2084703a 	and	r2,r4,r2
   11894:	80a1883a 	add	r16,r16,r2
   11898:	003f0d06 	br	114d0 <_realloc_r+0xe0>
   1189c:	a0800217 	ldw	r2,8(r20)
   118a0:	98800415 	stw	r2,16(r19)
   118a4:	a0800317 	ldw	r2,12(r20)
   118a8:	98800515 	stw	r2,20(r19)
   118ac:	31000a26 	beq	r6,r4,118d8 <_realloc_r+0x4e8>
   118b0:	98c00604 	addi	r3,r19,24
   118b4:	a5000404 	addi	r20,r20,16
   118b8:	003fa806 	br	1175c <_realloc_r+0x36c>
   118bc:	a1000417 	ldw	r4,16(r20)
   118c0:	88800604 	addi	r2,r17,24
   118c4:	a0c00604 	addi	r3,r20,24
   118c8:	89000415 	stw	r4,16(r17)
   118cc:	a1000517 	ldw	r4,20(r20)
   118d0:	89000515 	stw	r4,20(r17)
   118d4:	003f3906 	br	115bc <_realloc_r+0x1cc>
   118d8:	a0800417 	ldw	r2,16(r20)
   118dc:	a5000604 	addi	r20,r20,24
   118e0:	98c00804 	addi	r3,r19,32
   118e4:	98800615 	stw	r2,24(r19)
   118e8:	a0bfff17 	ldw	r2,-4(r20)
   118ec:	98800715 	stw	r2,28(r19)
   118f0:	003f9a06 	br	1175c <_realloc_r+0x36c>
   118f4:	8805883a 	mov	r2,r17
   118f8:	003fc706 	br	11818 <_realloc_r+0x428>
   118fc:	8809883a 	mov	r4,r17
   11900:	a00b883a 	mov	r5,r20
   11904:	00112940 	call	11294 <memmove>
   11908:	003fc906 	br	11830 <_realloc_r+0x440>
   1190c:	a0800217 	ldw	r2,8(r20)
   11910:	98800415 	stw	r2,16(r19)
   11914:	a0800317 	ldw	r2,12(r20)
   11918:	98800515 	stw	r2,20(r19)
   1191c:	31000726 	beq	r6,r4,1193c <_realloc_r+0x54c>
   11920:	98800604 	addi	r2,r19,24
   11924:	a5000404 	addi	r20,r20,16
   11928:	003fbb06 	br	11818 <_realloc_r+0x428>
   1192c:	9009883a 	mov	r4,r18
   11930:	001350c0 	call	1350c <__malloc_unlock>
   11934:	0005883a 	mov	r2,zero
   11938:	003ef206 	br	11504 <_realloc_r+0x114>
   1193c:	a0c00417 	ldw	r3,16(r20)
   11940:	a5000604 	addi	r20,r20,24
   11944:	98800804 	addi	r2,r19,32
   11948:	98c00615 	stw	r3,24(r19)
   1194c:	a0ffff17 	ldw	r3,-4(r20)
   11950:	98c00715 	stw	r3,28(r19)
   11954:	003fb006 	br	11818 <_realloc_r+0x428>

00011958 <_sbrk_r>:
   11958:	defffd04 	addi	sp,sp,-12
   1195c:	dc000015 	stw	r16,0(sp)
   11960:	040000b4 	movhi	r16,2
   11964:	dc400115 	stw	r17,4(sp)
   11968:	84236a04 	addi	r16,r16,-29272
   1196c:	2023883a 	mov	r17,r4
   11970:	2809883a 	mov	r4,r5
   11974:	dfc00215 	stw	ra,8(sp)
   11978:	80000015 	stw	zero,0(r16)
   1197c:	00136d80 	call	136d8 <sbrk>
   11980:	00ffffc4 	movi	r3,-1
   11984:	10c00526 	beq	r2,r3,1199c <_sbrk_r+0x44>
   11988:	dfc00217 	ldw	ra,8(sp)
   1198c:	dc400117 	ldw	r17,4(sp)
   11990:	dc000017 	ldw	r16,0(sp)
   11994:	dec00304 	addi	sp,sp,12
   11998:	f800283a 	ret
   1199c:	80c00017 	ldw	r3,0(r16)
   119a0:	183ff926 	beq	r3,zero,11988 <_sbrk_r+0x30>
   119a4:	88c00015 	stw	r3,0(r17)
   119a8:	003ff706 	br	11988 <_sbrk_r+0x30>

000119ac <__swsetup_r>:
   119ac:	00800074 	movhi	r2,1
   119b0:	defffd04 	addi	sp,sp,-12
   119b4:	109cbf04 	addi	r2,r2,29436
   119b8:	dc400115 	stw	r17,4(sp)
   119bc:	2023883a 	mov	r17,r4
   119c0:	11000017 	ldw	r4,0(r2)
   119c4:	dc000015 	stw	r16,0(sp)
   119c8:	dfc00215 	stw	ra,8(sp)
   119cc:	2821883a 	mov	r16,r5
   119d0:	20000226 	beq	r4,zero,119dc <__swsetup_r+0x30>
   119d4:	20c00e17 	ldw	r3,56(r4)
   119d8:	18003126 	beq	r3,zero,11aa0 <__swsetup_r+0xf4>
   119dc:	8080030b 	ldhu	r2,12(r16)
   119e0:	10c0020c 	andi	r3,r2,8
   119e4:	100d883a 	mov	r6,r2
   119e8:	18000f26 	beq	r3,zero,11a28 <__swsetup_r+0x7c>
   119ec:	80c00417 	ldw	r3,16(r16)
   119f0:	18001526 	beq	r3,zero,11a48 <__swsetup_r+0x9c>
   119f4:	1100004c 	andi	r4,r2,1
   119f8:	20001c1e 	bne	r4,zero,11a6c <__swsetup_r+0xc0>
   119fc:	1080008c 	andi	r2,r2,2
   11a00:	1000291e 	bne	r2,zero,11aa8 <__swsetup_r+0xfc>
   11a04:	80800517 	ldw	r2,20(r16)
   11a08:	80800215 	stw	r2,8(r16)
   11a0c:	18001c26 	beq	r3,zero,11a80 <__swsetup_r+0xd4>
   11a10:	0005883a 	mov	r2,zero
   11a14:	dfc00217 	ldw	ra,8(sp)
   11a18:	dc400117 	ldw	r17,4(sp)
   11a1c:	dc000017 	ldw	r16,0(sp)
   11a20:	dec00304 	addi	sp,sp,12
   11a24:	f800283a 	ret
   11a28:	3080040c 	andi	r2,r6,16
   11a2c:	10002e26 	beq	r2,zero,11ae8 <__swsetup_r+0x13c>
   11a30:	3080010c 	andi	r2,r6,4
   11a34:	10001e1e 	bne	r2,zero,11ab0 <__swsetup_r+0x104>
   11a38:	80c00417 	ldw	r3,16(r16)
   11a3c:	30800214 	ori	r2,r6,8
   11a40:	8080030d 	sth	r2,12(r16)
   11a44:	183feb1e 	bne	r3,zero,119f4 <__swsetup_r+0x48>
   11a48:	1140a00c 	andi	r5,r2,640
   11a4c:	01008004 	movi	r4,512
   11a50:	293fe826 	beq	r5,r4,119f4 <__swsetup_r+0x48>
   11a54:	8809883a 	mov	r4,r17
   11a58:	800b883a 	mov	r5,r16
   11a5c:	00126d00 	call	126d0 <__smakebuf_r>
   11a60:	8080030b 	ldhu	r2,12(r16)
   11a64:	80c00417 	ldw	r3,16(r16)
   11a68:	003fe206 	br	119f4 <__swsetup_r+0x48>
   11a6c:	80800517 	ldw	r2,20(r16)
   11a70:	80000215 	stw	zero,8(r16)
   11a74:	0085c83a 	sub	r2,zero,r2
   11a78:	80800615 	stw	r2,24(r16)
   11a7c:	183fe41e 	bne	r3,zero,11a10 <__swsetup_r+0x64>
   11a80:	80c0030b 	ldhu	r3,12(r16)
   11a84:	0005883a 	mov	r2,zero
   11a88:	1900200c 	andi	r4,r3,128
   11a8c:	203fe126 	beq	r4,zero,11a14 <__swsetup_r+0x68>
   11a90:	18c01014 	ori	r3,r3,64
   11a94:	80c0030d 	sth	r3,12(r16)
   11a98:	00bfffc4 	movi	r2,-1
   11a9c:	003fdd06 	br	11a14 <__swsetup_r+0x68>
   11aa0:	00120e40 	call	120e4 <__sinit>
   11aa4:	003fcd06 	br	119dc <__swsetup_r+0x30>
   11aa8:	0005883a 	mov	r2,zero
   11aac:	003fd606 	br	11a08 <__swsetup_r+0x5c>
   11ab0:	81400c17 	ldw	r5,48(r16)
   11ab4:	28000626 	beq	r5,zero,11ad0 <__swsetup_r+0x124>
   11ab8:	80801004 	addi	r2,r16,64
   11abc:	28800326 	beq	r5,r2,11acc <__swsetup_r+0x120>
   11ac0:	8809883a 	mov	r4,r17
   11ac4:	00122580 	call	12258 <_free_r>
   11ac8:	8180030b 	ldhu	r6,12(r16)
   11acc:	80000c15 	stw	zero,48(r16)
   11ad0:	80c00417 	ldw	r3,16(r16)
   11ad4:	00bff6c4 	movi	r2,-37
   11ad8:	118c703a 	and	r6,r2,r6
   11adc:	80000115 	stw	zero,4(r16)
   11ae0:	80c00015 	stw	r3,0(r16)
   11ae4:	003fd506 	br	11a3c <__swsetup_r+0x90>
   11ae8:	00800244 	movi	r2,9
   11aec:	88800015 	stw	r2,0(r17)
   11af0:	30801014 	ori	r2,r6,64
   11af4:	8080030d 	sth	r2,12(r16)
   11af8:	00bfffc4 	movi	r2,-1
   11afc:	003fc506 	br	11a14 <__swsetup_r+0x68>

00011b00 <__sflush_r>:
   11b00:	2880030b 	ldhu	r2,12(r5)
   11b04:	defffb04 	addi	sp,sp,-20
   11b08:	dcc00315 	stw	r19,12(sp)
   11b0c:	dc400115 	stw	r17,4(sp)
   11b10:	dfc00415 	stw	ra,16(sp)
   11b14:	dc800215 	stw	r18,8(sp)
   11b18:	dc000015 	stw	r16,0(sp)
   11b1c:	10c0020c 	andi	r3,r2,8
   11b20:	2823883a 	mov	r17,r5
   11b24:	2027883a 	mov	r19,r4
   11b28:	1800311e 	bne	r3,zero,11bf0 <__sflush_r+0xf0>
   11b2c:	28c00117 	ldw	r3,4(r5)
   11b30:	10820014 	ori	r2,r2,2048
   11b34:	2880030d 	sth	r2,12(r5)
   11b38:	00c04b0e 	bge	zero,r3,11c68 <__sflush_r+0x168>
   11b3c:	8a000a17 	ldw	r8,40(r17)
   11b40:	40002326 	beq	r8,zero,11bd0 <__sflush_r+0xd0>
   11b44:	9c000017 	ldw	r16,0(r19)
   11b48:	10c4000c 	andi	r3,r2,4096
   11b4c:	98000015 	stw	zero,0(r19)
   11b50:	18004826 	beq	r3,zero,11c74 <__sflush_r+0x174>
   11b54:	89801417 	ldw	r6,80(r17)
   11b58:	10c0010c 	andi	r3,r2,4
   11b5c:	18000626 	beq	r3,zero,11b78 <__sflush_r+0x78>
   11b60:	88c00117 	ldw	r3,4(r17)
   11b64:	88800c17 	ldw	r2,48(r17)
   11b68:	30cdc83a 	sub	r6,r6,r3
   11b6c:	10000226 	beq	r2,zero,11b78 <__sflush_r+0x78>
   11b70:	88800f17 	ldw	r2,60(r17)
   11b74:	308dc83a 	sub	r6,r6,r2
   11b78:	89400717 	ldw	r5,28(r17)
   11b7c:	9809883a 	mov	r4,r19
   11b80:	000f883a 	mov	r7,zero
   11b84:	403ee83a 	callr	r8
   11b88:	00ffffc4 	movi	r3,-1
   11b8c:	10c04426 	beq	r2,r3,11ca0 <__sflush_r+0x1a0>
   11b90:	88c0030b 	ldhu	r3,12(r17)
   11b94:	89000417 	ldw	r4,16(r17)
   11b98:	88000115 	stw	zero,4(r17)
   11b9c:	197dffcc 	andi	r5,r3,63487
   11ba0:	8940030d 	sth	r5,12(r17)
   11ba4:	89000015 	stw	r4,0(r17)
   11ba8:	18c4000c 	andi	r3,r3,4096
   11bac:	18002c1e 	bne	r3,zero,11c60 <__sflush_r+0x160>
   11bb0:	89400c17 	ldw	r5,48(r17)
   11bb4:	9c000015 	stw	r16,0(r19)
   11bb8:	28000526 	beq	r5,zero,11bd0 <__sflush_r+0xd0>
   11bbc:	88801004 	addi	r2,r17,64
   11bc0:	28800226 	beq	r5,r2,11bcc <__sflush_r+0xcc>
   11bc4:	9809883a 	mov	r4,r19
   11bc8:	00122580 	call	12258 <_free_r>
   11bcc:	88000c15 	stw	zero,48(r17)
   11bd0:	0005883a 	mov	r2,zero
   11bd4:	dfc00417 	ldw	ra,16(sp)
   11bd8:	dcc00317 	ldw	r19,12(sp)
   11bdc:	dc800217 	ldw	r18,8(sp)
   11be0:	dc400117 	ldw	r17,4(sp)
   11be4:	dc000017 	ldw	r16,0(sp)
   11be8:	dec00504 	addi	sp,sp,20
   11bec:	f800283a 	ret
   11bf0:	2c800417 	ldw	r18,16(r5)
   11bf4:	903ff626 	beq	r18,zero,11bd0 <__sflush_r+0xd0>
   11bf8:	2c000017 	ldw	r16,0(r5)
   11bfc:	108000cc 	andi	r2,r2,3
   11c00:	2c800015 	stw	r18,0(r5)
   11c04:	84a1c83a 	sub	r16,r16,r18
   11c08:	1000131e 	bne	r2,zero,11c58 <__sflush_r+0x158>
   11c0c:	28800517 	ldw	r2,20(r5)
   11c10:	88800215 	stw	r2,8(r17)
   11c14:	04000316 	blt	zero,r16,11c24 <__sflush_r+0x124>
   11c18:	003fed06 	br	11bd0 <__sflush_r+0xd0>
   11c1c:	90a5883a 	add	r18,r18,r2
   11c20:	043feb0e 	bge	zero,r16,11bd0 <__sflush_r+0xd0>
   11c24:	88800917 	ldw	r2,36(r17)
   11c28:	89400717 	ldw	r5,28(r17)
   11c2c:	800f883a 	mov	r7,r16
   11c30:	900d883a 	mov	r6,r18
   11c34:	9809883a 	mov	r4,r19
   11c38:	103ee83a 	callr	r2
   11c3c:	80a1c83a 	sub	r16,r16,r2
   11c40:	00bff616 	blt	zero,r2,11c1c <__sflush_r+0x11c>
   11c44:	88c0030b 	ldhu	r3,12(r17)
   11c48:	00bfffc4 	movi	r2,-1
   11c4c:	18c01014 	ori	r3,r3,64
   11c50:	88c0030d 	sth	r3,12(r17)
   11c54:	003fdf06 	br	11bd4 <__sflush_r+0xd4>
   11c58:	0005883a 	mov	r2,zero
   11c5c:	003fec06 	br	11c10 <__sflush_r+0x110>
   11c60:	88801415 	stw	r2,80(r17)
   11c64:	003fd206 	br	11bb0 <__sflush_r+0xb0>
   11c68:	28c00f17 	ldw	r3,60(r5)
   11c6c:	00ffb316 	blt	zero,r3,11b3c <__sflush_r+0x3c>
   11c70:	003fd706 	br	11bd0 <__sflush_r+0xd0>
   11c74:	89400717 	ldw	r5,28(r17)
   11c78:	000d883a 	mov	r6,zero
   11c7c:	9809883a 	mov	r4,r19
   11c80:	01c00044 	movi	r7,1
   11c84:	403ee83a 	callr	r8
   11c88:	100d883a 	mov	r6,r2
   11c8c:	00bfffc4 	movi	r2,-1
   11c90:	30801426 	beq	r6,r2,11ce4 <__sflush_r+0x1e4>
   11c94:	8880030b 	ldhu	r2,12(r17)
   11c98:	8a000a17 	ldw	r8,40(r17)
   11c9c:	003fae06 	br	11b58 <__sflush_r+0x58>
   11ca0:	98c00017 	ldw	r3,0(r19)
   11ca4:	183fba26 	beq	r3,zero,11b90 <__sflush_r+0x90>
   11ca8:	01000744 	movi	r4,29
   11cac:	19000626 	beq	r3,r4,11cc8 <__sflush_r+0x1c8>
   11cb0:	01000584 	movi	r4,22
   11cb4:	19000426 	beq	r3,r4,11cc8 <__sflush_r+0x1c8>
   11cb8:	88c0030b 	ldhu	r3,12(r17)
   11cbc:	18c01014 	ori	r3,r3,64
   11cc0:	88c0030d 	sth	r3,12(r17)
   11cc4:	003fc306 	br	11bd4 <__sflush_r+0xd4>
   11cc8:	8880030b 	ldhu	r2,12(r17)
   11ccc:	88c00417 	ldw	r3,16(r17)
   11cd0:	88000115 	stw	zero,4(r17)
   11cd4:	10bdffcc 	andi	r2,r2,63487
   11cd8:	8880030d 	sth	r2,12(r17)
   11cdc:	88c00015 	stw	r3,0(r17)
   11ce0:	003fb306 	br	11bb0 <__sflush_r+0xb0>
   11ce4:	98800017 	ldw	r2,0(r19)
   11ce8:	103fea26 	beq	r2,zero,11c94 <__sflush_r+0x194>
   11cec:	00c00744 	movi	r3,29
   11cf0:	10c00226 	beq	r2,r3,11cfc <__sflush_r+0x1fc>
   11cf4:	00c00584 	movi	r3,22
   11cf8:	10ffd21e 	bne	r2,r3,11c44 <__sflush_r+0x144>
   11cfc:	9c000015 	stw	r16,0(r19)
   11d00:	0005883a 	mov	r2,zero
   11d04:	003fb306 	br	11bd4 <__sflush_r+0xd4>

00011d08 <_fflush_r>:
   11d08:	defffd04 	addi	sp,sp,-12
   11d0c:	dc000115 	stw	r16,4(sp)
   11d10:	dfc00215 	stw	ra,8(sp)
   11d14:	2021883a 	mov	r16,r4
   11d18:	20000226 	beq	r4,zero,11d24 <_fflush_r+0x1c>
   11d1c:	20800e17 	ldw	r2,56(r4)
   11d20:	10000c26 	beq	r2,zero,11d54 <_fflush_r+0x4c>
   11d24:	2880030f 	ldh	r2,12(r5)
   11d28:	1000051e 	bne	r2,zero,11d40 <_fflush_r+0x38>
   11d2c:	0005883a 	mov	r2,zero
   11d30:	dfc00217 	ldw	ra,8(sp)
   11d34:	dc000117 	ldw	r16,4(sp)
   11d38:	dec00304 	addi	sp,sp,12
   11d3c:	f800283a 	ret
   11d40:	8009883a 	mov	r4,r16
   11d44:	dfc00217 	ldw	ra,8(sp)
   11d48:	dc000117 	ldw	r16,4(sp)
   11d4c:	dec00304 	addi	sp,sp,12
   11d50:	0011b001 	jmpi	11b00 <__sflush_r>
   11d54:	d9400015 	stw	r5,0(sp)
   11d58:	00120e40 	call	120e4 <__sinit>
   11d5c:	d9400017 	ldw	r5,0(sp)
   11d60:	003ff006 	br	11d24 <_fflush_r+0x1c>

00011d64 <fflush>:
   11d64:	20000526 	beq	r4,zero,11d7c <fflush+0x18>
   11d68:	00800074 	movhi	r2,1
   11d6c:	109cbf04 	addi	r2,r2,29436
   11d70:	200b883a 	mov	r5,r4
   11d74:	11000017 	ldw	r4,0(r2)
   11d78:	0011d081 	jmpi	11d08 <_fflush_r>
   11d7c:	00800074 	movhi	r2,1
   11d80:	109cbe04 	addi	r2,r2,29432
   11d84:	11000017 	ldw	r4,0(r2)
   11d88:	01400074 	movhi	r5,1
   11d8c:	29474204 	addi	r5,r5,7432
   11d90:	001260c1 	jmpi	1260c <_fwalk_reent>

00011d94 <__fp_lock>:
   11d94:	0005883a 	mov	r2,zero
   11d98:	f800283a 	ret

00011d9c <__fp_unlock>:
   11d9c:	0005883a 	mov	r2,zero
   11da0:	f800283a 	ret

00011da4 <_cleanup_r>:
   11da4:	01400074 	movhi	r5,1
   11da8:	294ae604 	addi	r5,r5,11160
   11dac:	001260c1 	jmpi	1260c <_fwalk_reent>

00011db0 <__sinit.part.1>:
   11db0:	defff704 	addi	sp,sp,-36
   11db4:	00c00074 	movhi	r3,1
   11db8:	dfc00815 	stw	ra,32(sp)
   11dbc:	ddc00715 	stw	r23,28(sp)
   11dc0:	dd800615 	stw	r22,24(sp)
   11dc4:	dd400515 	stw	r21,20(sp)
   11dc8:	dd000415 	stw	r20,16(sp)
   11dcc:	dcc00315 	stw	r19,12(sp)
   11dd0:	dc800215 	stw	r18,8(sp)
   11dd4:	dc400115 	stw	r17,4(sp)
   11dd8:	dc000015 	stw	r16,0(sp)
   11ddc:	18c76904 	addi	r3,r3,7588
   11de0:	24000117 	ldw	r16,4(r4)
   11de4:	20c00f15 	stw	r3,60(r4)
   11de8:	2080bb04 	addi	r2,r4,748
   11dec:	00c000c4 	movi	r3,3
   11df0:	20c0b915 	stw	r3,740(r4)
   11df4:	2080ba15 	stw	r2,744(r4)
   11df8:	2000b815 	stw	zero,736(r4)
   11dfc:	05c00204 	movi	r23,8
   11e00:	00800104 	movi	r2,4
   11e04:	2025883a 	mov	r18,r4
   11e08:	b80d883a 	mov	r6,r23
   11e0c:	81001704 	addi	r4,r16,92
   11e10:	000b883a 	mov	r5,zero
   11e14:	80000015 	stw	zero,0(r16)
   11e18:	80000115 	stw	zero,4(r16)
   11e1c:	80000215 	stw	zero,8(r16)
   11e20:	8080030d 	sth	r2,12(r16)
   11e24:	80001915 	stw	zero,100(r16)
   11e28:	8000038d 	sth	zero,14(r16)
   11e2c:	80000415 	stw	zero,16(r16)
   11e30:	80000515 	stw	zero,20(r16)
   11e34:	80000615 	stw	zero,24(r16)
   11e38:	00128880 	call	12888 <memset>
   11e3c:	05800074 	movhi	r22,1
   11e40:	94400217 	ldw	r17,8(r18)
   11e44:	05400074 	movhi	r21,1
   11e48:	05000074 	movhi	r20,1
   11e4c:	04c00074 	movhi	r19,1
   11e50:	b58a6b04 	addi	r22,r22,10668
   11e54:	ad4a8204 	addi	r21,r21,10760
   11e58:	a50aa104 	addi	r20,r20,10884
   11e5c:	9ccab804 	addi	r19,r19,10976
   11e60:	85800815 	stw	r22,32(r16)
   11e64:	85400915 	stw	r21,36(r16)
   11e68:	85000a15 	stw	r20,40(r16)
   11e6c:	84c00b15 	stw	r19,44(r16)
   11e70:	84000715 	stw	r16,28(r16)
   11e74:	00800284 	movi	r2,10
   11e78:	8880030d 	sth	r2,12(r17)
   11e7c:	00800044 	movi	r2,1
   11e80:	89001704 	addi	r4,r17,92
   11e84:	b80d883a 	mov	r6,r23
   11e88:	000b883a 	mov	r5,zero
   11e8c:	88000015 	stw	zero,0(r17)
   11e90:	88000115 	stw	zero,4(r17)
   11e94:	88000215 	stw	zero,8(r17)
   11e98:	88001915 	stw	zero,100(r17)
   11e9c:	8880038d 	sth	r2,14(r17)
   11ea0:	88000415 	stw	zero,16(r17)
   11ea4:	88000515 	stw	zero,20(r17)
   11ea8:	88000615 	stw	zero,24(r17)
   11eac:	00128880 	call	12888 <memset>
   11eb0:	94000317 	ldw	r16,12(r18)
   11eb4:	00800484 	movi	r2,18
   11eb8:	8c400715 	stw	r17,28(r17)
   11ebc:	8d800815 	stw	r22,32(r17)
   11ec0:	8d400915 	stw	r21,36(r17)
   11ec4:	8d000a15 	stw	r20,40(r17)
   11ec8:	8cc00b15 	stw	r19,44(r17)
   11ecc:	8080030d 	sth	r2,12(r16)
   11ed0:	00800084 	movi	r2,2
   11ed4:	80000015 	stw	zero,0(r16)
   11ed8:	80000115 	stw	zero,4(r16)
   11edc:	80000215 	stw	zero,8(r16)
   11ee0:	80001915 	stw	zero,100(r16)
   11ee4:	8080038d 	sth	r2,14(r16)
   11ee8:	80000415 	stw	zero,16(r16)
   11eec:	80000515 	stw	zero,20(r16)
   11ef0:	80000615 	stw	zero,24(r16)
   11ef4:	81001704 	addi	r4,r16,92
   11ef8:	000b883a 	mov	r5,zero
   11efc:	b80d883a 	mov	r6,r23
   11f00:	00128880 	call	12888 <memset>
   11f04:	00800044 	movi	r2,1
   11f08:	84000715 	stw	r16,28(r16)
   11f0c:	85800815 	stw	r22,32(r16)
   11f10:	85400915 	stw	r21,36(r16)
   11f14:	85000a15 	stw	r20,40(r16)
   11f18:	84c00b15 	stw	r19,44(r16)
   11f1c:	90800e15 	stw	r2,56(r18)
   11f20:	dfc00817 	ldw	ra,32(sp)
   11f24:	ddc00717 	ldw	r23,28(sp)
   11f28:	dd800617 	ldw	r22,24(sp)
   11f2c:	dd400517 	ldw	r21,20(sp)
   11f30:	dd000417 	ldw	r20,16(sp)
   11f34:	dcc00317 	ldw	r19,12(sp)
   11f38:	dc800217 	ldw	r18,8(sp)
   11f3c:	dc400117 	ldw	r17,4(sp)
   11f40:	dc000017 	ldw	r16,0(sp)
   11f44:	dec00904 	addi	sp,sp,36
   11f48:	f800283a 	ret

00011f4c <__sfmoreglue>:
   11f4c:	defffc04 	addi	sp,sp,-16
   11f50:	dc400115 	stw	r17,4(sp)
   11f54:	2c7fffc4 	addi	r17,r5,-1
   11f58:	8c401a24 	muli	r17,r17,104
   11f5c:	dc800215 	stw	r18,8(sp)
   11f60:	2825883a 	mov	r18,r5
   11f64:	89401d04 	addi	r5,r17,116
   11f68:	dc000015 	stw	r16,0(sp)
   11f6c:	dfc00315 	stw	ra,12(sp)
   11f70:	00108cc0 	call	108cc <_malloc_r>
   11f74:	1021883a 	mov	r16,r2
   11f78:	10000726 	beq	r2,zero,11f98 <__sfmoreglue+0x4c>
   11f7c:	11000304 	addi	r4,r2,12
   11f80:	10000015 	stw	zero,0(r2)
   11f84:	14800115 	stw	r18,4(r2)
   11f88:	11000215 	stw	r4,8(r2)
   11f8c:	000b883a 	mov	r5,zero
   11f90:	89801a04 	addi	r6,r17,104
   11f94:	00128880 	call	12888 <memset>
   11f98:	8005883a 	mov	r2,r16
   11f9c:	dfc00317 	ldw	ra,12(sp)
   11fa0:	dc800217 	ldw	r18,8(sp)
   11fa4:	dc400117 	ldw	r17,4(sp)
   11fa8:	dc000017 	ldw	r16,0(sp)
   11fac:	dec00404 	addi	sp,sp,16
   11fb0:	f800283a 	ret

00011fb4 <__sfp>:
   11fb4:	00800074 	movhi	r2,1
   11fb8:	defffb04 	addi	sp,sp,-20
   11fbc:	109cbe04 	addi	r2,r2,29432
   11fc0:	dc800215 	stw	r18,8(sp)
   11fc4:	14800017 	ldw	r18,0(r2)
   11fc8:	dcc00315 	stw	r19,12(sp)
   11fcc:	dfc00415 	stw	ra,16(sp)
   11fd0:	90800e17 	ldw	r2,56(r18)
   11fd4:	dc400115 	stw	r17,4(sp)
   11fd8:	dc000015 	stw	r16,0(sp)
   11fdc:	2027883a 	mov	r19,r4
   11fe0:	1000021e 	bne	r2,zero,11fec <__sfp+0x38>
   11fe4:	9009883a 	mov	r4,r18
   11fe8:	0011db00 	call	11db0 <__sinit.part.1>
   11fec:	9480b804 	addi	r18,r18,736
   11ff0:	047fffc4 	movi	r17,-1
   11ff4:	91400117 	ldw	r5,4(r18)
   11ff8:	94000217 	ldw	r16,8(r18)
   11ffc:	297fffc4 	addi	r5,r5,-1
   12000:	28000a16 	blt	r5,zero,1202c <__sfp+0x78>
   12004:	8080030f 	ldh	r2,12(r16)
   12008:	10000c26 	beq	r2,zero,1203c <__sfp+0x88>
   1200c:	80c01d04 	addi	r3,r16,116
   12010:	00000206 	br	1201c <__sfp+0x68>
   12014:	18bfe60f 	ldh	r2,-104(r3)
   12018:	10000826 	beq	r2,zero,1203c <__sfp+0x88>
   1201c:	297fffc4 	addi	r5,r5,-1
   12020:	1c3ffd04 	addi	r16,r3,-12
   12024:	18c01a04 	addi	r3,r3,104
   12028:	2c7ffa1e 	bne	r5,r17,12014 <__sfp+0x60>
   1202c:	90800017 	ldw	r2,0(r18)
   12030:	10001d26 	beq	r2,zero,120a8 <__sfp+0xf4>
   12034:	1025883a 	mov	r18,r2
   12038:	003fee06 	br	11ff4 <__sfp+0x40>
   1203c:	00bfffc4 	movi	r2,-1
   12040:	8080038d 	sth	r2,14(r16)
   12044:	00800044 	movi	r2,1
   12048:	8080030d 	sth	r2,12(r16)
   1204c:	80001915 	stw	zero,100(r16)
   12050:	80000015 	stw	zero,0(r16)
   12054:	80000215 	stw	zero,8(r16)
   12058:	80000115 	stw	zero,4(r16)
   1205c:	80000415 	stw	zero,16(r16)
   12060:	80000515 	stw	zero,20(r16)
   12064:	80000615 	stw	zero,24(r16)
   12068:	81001704 	addi	r4,r16,92
   1206c:	000b883a 	mov	r5,zero
   12070:	01800204 	movi	r6,8
   12074:	00128880 	call	12888 <memset>
   12078:	8005883a 	mov	r2,r16
   1207c:	80000c15 	stw	zero,48(r16)
   12080:	80000d15 	stw	zero,52(r16)
   12084:	80001115 	stw	zero,68(r16)
   12088:	80001215 	stw	zero,72(r16)
   1208c:	dfc00417 	ldw	ra,16(sp)
   12090:	dcc00317 	ldw	r19,12(sp)
   12094:	dc800217 	ldw	r18,8(sp)
   12098:	dc400117 	ldw	r17,4(sp)
   1209c:	dc000017 	ldw	r16,0(sp)
   120a0:	dec00504 	addi	sp,sp,20
   120a4:	f800283a 	ret
   120a8:	9809883a 	mov	r4,r19
   120ac:	01400104 	movi	r5,4
   120b0:	0011f4c0 	call	11f4c <__sfmoreglue>
   120b4:	90800015 	stw	r2,0(r18)
   120b8:	103fde1e 	bne	r2,zero,12034 <__sfp+0x80>
   120bc:	00800304 	movi	r2,12
   120c0:	98800015 	stw	r2,0(r19)
   120c4:	0005883a 	mov	r2,zero
   120c8:	003ff006 	br	1208c <__sfp+0xd8>

000120cc <_cleanup>:
   120cc:	00800074 	movhi	r2,1
   120d0:	109cbe04 	addi	r2,r2,29432
   120d4:	11000017 	ldw	r4,0(r2)
   120d8:	01400074 	movhi	r5,1
   120dc:	294ae604 	addi	r5,r5,11160
   120e0:	001260c1 	jmpi	1260c <_fwalk_reent>

000120e4 <__sinit>:
   120e4:	20800e17 	ldw	r2,56(r4)
   120e8:	10000126 	beq	r2,zero,120f0 <__sinit+0xc>
   120ec:	f800283a 	ret
   120f0:	0011db01 	jmpi	11db0 <__sinit.part.1>

000120f4 <__sfp_lock_acquire>:
   120f4:	f800283a 	ret

000120f8 <__sfp_lock_release>:
   120f8:	f800283a 	ret

000120fc <__sinit_lock_acquire>:
   120fc:	f800283a 	ret

00012100 <__sinit_lock_release>:
   12100:	f800283a 	ret

00012104 <__fp_lock_all>:
   12104:	00800074 	movhi	r2,1
   12108:	109cbf04 	addi	r2,r2,29436
   1210c:	11000017 	ldw	r4,0(r2)
   12110:	01400074 	movhi	r5,1
   12114:	29476504 	addi	r5,r5,7572
   12118:	00125481 	jmpi	12548 <_fwalk>

0001211c <__fp_unlock_all>:
   1211c:	00800074 	movhi	r2,1
   12120:	109cbf04 	addi	r2,r2,29436
   12124:	11000017 	ldw	r4,0(r2)
   12128:	01400074 	movhi	r5,1
   1212c:	29476704 	addi	r5,r5,7580
   12130:	00125481 	jmpi	12548 <_fwalk>

00012134 <_malloc_trim_r>:
   12134:	defffb04 	addi	sp,sp,-20
   12138:	dcc00315 	stw	r19,12(sp)
   1213c:	04c00074 	movhi	r19,1
   12140:	dc800215 	stw	r18,8(sp)
   12144:	dc400115 	stw	r17,4(sp)
   12148:	dc000015 	stw	r16,0(sp)
   1214c:	dfc00415 	stw	ra,16(sp)
   12150:	2821883a 	mov	r16,r5
   12154:	9cd73a04 	addi	r19,r19,23784
   12158:	2025883a 	mov	r18,r4
   1215c:	00134ec0 	call	134ec <__malloc_lock>
   12160:	98800217 	ldw	r2,8(r19)
   12164:	14400117 	ldw	r17,4(r2)
   12168:	00bfff04 	movi	r2,-4
   1216c:	88a2703a 	and	r17,r17,r2
   12170:	8c21c83a 	sub	r16,r17,r16
   12174:	8403fbc4 	addi	r16,r16,4079
   12178:	8020d33a 	srli	r16,r16,12
   1217c:	0083ffc4 	movi	r2,4095
   12180:	843fffc4 	addi	r16,r16,-1
   12184:	8020933a 	slli	r16,r16,12
   12188:	1400060e 	bge	r2,r16,121a4 <_malloc_trim_r+0x70>
   1218c:	9009883a 	mov	r4,r18
   12190:	000b883a 	mov	r5,zero
   12194:	00119580 	call	11958 <_sbrk_r>
   12198:	98c00217 	ldw	r3,8(r19)
   1219c:	1c47883a 	add	r3,r3,r17
   121a0:	10c00a26 	beq	r2,r3,121cc <_malloc_trim_r+0x98>
   121a4:	9009883a 	mov	r4,r18
   121a8:	001350c0 	call	1350c <__malloc_unlock>
   121ac:	0005883a 	mov	r2,zero
   121b0:	dfc00417 	ldw	ra,16(sp)
   121b4:	dcc00317 	ldw	r19,12(sp)
   121b8:	dc800217 	ldw	r18,8(sp)
   121bc:	dc400117 	ldw	r17,4(sp)
   121c0:	dc000017 	ldw	r16,0(sp)
   121c4:	dec00504 	addi	sp,sp,20
   121c8:	f800283a 	ret
   121cc:	9009883a 	mov	r4,r18
   121d0:	040bc83a 	sub	r5,zero,r16
   121d4:	00119580 	call	11958 <_sbrk_r>
   121d8:	00ffffc4 	movi	r3,-1
   121dc:	10c00d26 	beq	r2,r3,12214 <_malloc_trim_r+0xe0>
   121e0:	00c000b4 	movhi	r3,2
   121e4:	18e37204 	addi	r3,r3,-29240
   121e8:	18800017 	ldw	r2,0(r3)
   121ec:	99000217 	ldw	r4,8(r19)
   121f0:	8c23c83a 	sub	r17,r17,r16
   121f4:	8c400054 	ori	r17,r17,1
   121f8:	1421c83a 	sub	r16,r2,r16
   121fc:	24400115 	stw	r17,4(r4)
   12200:	9009883a 	mov	r4,r18
   12204:	1c000015 	stw	r16,0(r3)
   12208:	001350c0 	call	1350c <__malloc_unlock>
   1220c:	00800044 	movi	r2,1
   12210:	003fe706 	br	121b0 <_malloc_trim_r+0x7c>
   12214:	9009883a 	mov	r4,r18
   12218:	000b883a 	mov	r5,zero
   1221c:	00119580 	call	11958 <_sbrk_r>
   12220:	99000217 	ldw	r4,8(r19)
   12224:	014003c4 	movi	r5,15
   12228:	1107c83a 	sub	r3,r2,r4
   1222c:	28ffdd0e 	bge	r5,r3,121a4 <_malloc_trim_r+0x70>
   12230:	01400074 	movhi	r5,1
   12234:	295cc004 	addi	r5,r5,29440
   12238:	29400017 	ldw	r5,0(r5)
   1223c:	18c00054 	ori	r3,r3,1
   12240:	20c00115 	stw	r3,4(r4)
   12244:	00c000b4 	movhi	r3,2
   12248:	1145c83a 	sub	r2,r2,r5
   1224c:	18e37204 	addi	r3,r3,-29240
   12250:	18800015 	stw	r2,0(r3)
   12254:	003fd306 	br	121a4 <_malloc_trim_r+0x70>

00012258 <_free_r>:
   12258:	28004c26 	beq	r5,zero,1238c <_free_r+0x134>
   1225c:	defffd04 	addi	sp,sp,-12
   12260:	dc400115 	stw	r17,4(sp)
   12264:	dc000015 	stw	r16,0(sp)
   12268:	2023883a 	mov	r17,r4
   1226c:	2821883a 	mov	r16,r5
   12270:	dfc00215 	stw	ra,8(sp)
   12274:	00134ec0 	call	134ec <__malloc_lock>
   12278:	813fff17 	ldw	r4,-4(r16)
   1227c:	00bfff84 	movi	r2,-2
   12280:	02400074 	movhi	r9,1
   12284:	81bffe04 	addi	r6,r16,-8
   12288:	2084703a 	and	r2,r4,r2
   1228c:	4a573a04 	addi	r9,r9,23784
   12290:	308b883a 	add	r5,r6,r2
   12294:	2a000117 	ldw	r8,4(r5)
   12298:	49c00217 	ldw	r7,8(r9)
   1229c:	00ffff04 	movi	r3,-4
   122a0:	40c6703a 	and	r3,r8,r3
   122a4:	39405326 	beq	r7,r5,123f4 <_free_r+0x19c>
   122a8:	28c00115 	stw	r3,4(r5)
   122ac:	2100004c 	andi	r4,r4,1
   122b0:	2000091e 	bne	r4,zero,122d8 <_free_r+0x80>
   122b4:	81fffe17 	ldw	r7,-8(r16)
   122b8:	4a000204 	addi	r8,r9,8
   122bc:	31cdc83a 	sub	r6,r6,r7
   122c0:	31000217 	ldw	r4,8(r6)
   122c4:	11c5883a 	add	r2,r2,r7
   122c8:	22006126 	beq	r4,r8,12450 <_free_r+0x1f8>
   122cc:	31c00317 	ldw	r7,12(r6)
   122d0:	21c00315 	stw	r7,12(r4)
   122d4:	39000215 	stw	r4,8(r7)
   122d8:	28c9883a 	add	r4,r5,r3
   122dc:	21c00117 	ldw	r7,4(r4)
   122e0:	39c0004c 	andi	r7,r7,1
   122e4:	38000d1e 	bne	r7,zero,1231c <_free_r+0xc4>
   122e8:	29000217 	ldw	r4,8(r5)
   122ec:	10c5883a 	add	r2,r2,r3
   122f0:	00c00074 	movhi	r3,1
   122f4:	18d73c04 	addi	r3,r3,23792
   122f8:	20c07526 	beq	r4,r3,124d0 <_free_r+0x278>
   122fc:	29c00317 	ldw	r7,12(r5)
   12300:	11400054 	ori	r5,r2,1
   12304:	3087883a 	add	r3,r6,r2
   12308:	21c00315 	stw	r7,12(r4)
   1230c:	39000215 	stw	r4,8(r7)
   12310:	31400115 	stw	r5,4(r6)
   12314:	18800015 	stw	r2,0(r3)
   12318:	00000406 	br	1232c <_free_r+0xd4>
   1231c:	10c00054 	ori	r3,r2,1
   12320:	30c00115 	stw	r3,4(r6)
   12324:	3087883a 	add	r3,r6,r2
   12328:	18800015 	stw	r2,0(r3)
   1232c:	00c07fc4 	movi	r3,511
   12330:	18801736 	bltu	r3,r2,12390 <_free_r+0x138>
   12334:	1004d0fa 	srli	r2,r2,3
   12338:	01400044 	movi	r5,1
   1233c:	49000117 	ldw	r4,4(r9)
   12340:	1087883a 	add	r3,r2,r2
   12344:	18c7883a 	add	r3,r3,r3
   12348:	1005d0ba 	srai	r2,r2,2
   1234c:	18c7883a 	add	r3,r3,r3
   12350:	1a47883a 	add	r3,r3,r9
   12354:	19c00217 	ldw	r7,8(r3)
   12358:	2884983a 	sll	r2,r5,r2
   1235c:	30c00315 	stw	r3,12(r6)
   12360:	31c00215 	stw	r7,8(r6)
   12364:	1104b03a 	or	r2,r2,r4
   12368:	19800215 	stw	r6,8(r3)
   1236c:	48800115 	stw	r2,4(r9)
   12370:	39800315 	stw	r6,12(r7)
   12374:	8809883a 	mov	r4,r17
   12378:	dfc00217 	ldw	ra,8(sp)
   1237c:	dc400117 	ldw	r17,4(sp)
   12380:	dc000017 	ldw	r16,0(sp)
   12384:	dec00304 	addi	sp,sp,12
   12388:	001350c1 	jmpi	1350c <__malloc_unlock>
   1238c:	f800283a 	ret
   12390:	1006d27a 	srli	r3,r2,9
   12394:	01000104 	movi	r4,4
   12398:	20c04036 	bltu	r4,r3,1249c <_free_r+0x244>
   1239c:	1006d1ba 	srli	r3,r2,6
   123a0:	19400e04 	addi	r5,r3,56
   123a4:	2947883a 	add	r3,r5,r5
   123a8:	18c7883a 	add	r3,r3,r3
   123ac:	18c7883a 	add	r3,r3,r3
   123b0:	1a49883a 	add	r4,r3,r9
   123b4:	20c00217 	ldw	r3,8(r4)
   123b8:	01c00074 	movhi	r7,1
   123bc:	39d73a04 	addi	r7,r7,23784
   123c0:	19003b26 	beq	r3,r4,124b0 <_free_r+0x258>
   123c4:	01ffff04 	movi	r7,-4
   123c8:	19400117 	ldw	r5,4(r3)
   123cc:	29ca703a 	and	r5,r5,r7
   123d0:	1140022e 	bgeu	r2,r5,123dc <_free_r+0x184>
   123d4:	18c00217 	ldw	r3,8(r3)
   123d8:	20fffb1e 	bne	r4,r3,123c8 <_free_r+0x170>
   123dc:	18800317 	ldw	r2,12(r3)
   123e0:	30800315 	stw	r2,12(r6)
   123e4:	30c00215 	stw	r3,8(r6)
   123e8:	11800215 	stw	r6,8(r2)
   123ec:	19800315 	stw	r6,12(r3)
   123f0:	003fe006 	br	12374 <_free_r+0x11c>
   123f4:	2100004c 	andi	r4,r4,1
   123f8:	1885883a 	add	r2,r3,r2
   123fc:	2000071e 	bne	r4,zero,1241c <_free_r+0x1c4>
   12400:	817ffe17 	ldw	r5,-8(r16)
   12404:	314dc83a 	sub	r6,r6,r5
   12408:	30c00317 	ldw	r3,12(r6)
   1240c:	31000217 	ldw	r4,8(r6)
   12410:	1145883a 	add	r2,r2,r5
   12414:	20c00315 	stw	r3,12(r4)
   12418:	19000215 	stw	r4,8(r3)
   1241c:	10c00054 	ori	r3,r2,1
   12420:	30c00115 	stw	r3,4(r6)
   12424:	00c00074 	movhi	r3,1
   12428:	18dcc104 	addi	r3,r3,29444
   1242c:	18c00017 	ldw	r3,0(r3)
   12430:	49800215 	stw	r6,8(r9)
   12434:	10ffcf36 	bltu	r2,r3,12374 <_free_r+0x11c>
   12438:	008000b4 	movhi	r2,2
   1243c:	10a36904 	addi	r2,r2,-29276
   12440:	11400017 	ldw	r5,0(r2)
   12444:	8809883a 	mov	r4,r17
   12448:	00121340 	call	12134 <_malloc_trim_r>
   1244c:	003fc906 	br	12374 <_free_r+0x11c>
   12450:	28c9883a 	add	r4,r5,r3
   12454:	21000117 	ldw	r4,4(r4)
   12458:	2100004c 	andi	r4,r4,1
   1245c:	20000a1e 	bne	r4,zero,12488 <_free_r+0x230>
   12460:	29000317 	ldw	r4,12(r5)
   12464:	29400217 	ldw	r5,8(r5)
   12468:	10c5883a 	add	r2,r2,r3
   1246c:	10c00054 	ori	r3,r2,1
   12470:	29000315 	stw	r4,12(r5)
   12474:	21400215 	stw	r5,8(r4)
   12478:	30c00115 	stw	r3,4(r6)
   1247c:	308d883a 	add	r6,r6,r2
   12480:	30800015 	stw	r2,0(r6)
   12484:	003fbb06 	br	12374 <_free_r+0x11c>
   12488:	10c00054 	ori	r3,r2,1
   1248c:	30c00115 	stw	r3,4(r6)
   12490:	308d883a 	add	r6,r6,r2
   12494:	30800015 	stw	r2,0(r6)
   12498:	003fb606 	br	12374 <_free_r+0x11c>
   1249c:	01000504 	movi	r4,20
   124a0:	20c01436 	bltu	r4,r3,124f4 <_free_r+0x29c>
   124a4:	194016c4 	addi	r5,r3,91
   124a8:	2947883a 	add	r3,r5,r5
   124ac:	003fbe06 	br	123a8 <_free_r+0x150>
   124b0:	280bd0ba 	srai	r5,r5,2
   124b4:	00800044 	movi	r2,1
   124b8:	39000117 	ldw	r4,4(r7)
   124bc:	114a983a 	sll	r5,r2,r5
   124c0:	1805883a 	mov	r2,r3
   124c4:	2908b03a 	or	r4,r5,r4
   124c8:	39000115 	stw	r4,4(r7)
   124cc:	003fc406 	br	123e0 <_free_r+0x188>
   124d0:	49800515 	stw	r6,20(r9)
   124d4:	49800415 	stw	r6,16(r9)
   124d8:	10c00054 	ori	r3,r2,1
   124dc:	31000315 	stw	r4,12(r6)
   124e0:	31000215 	stw	r4,8(r6)
   124e4:	30c00115 	stw	r3,4(r6)
   124e8:	308d883a 	add	r6,r6,r2
   124ec:	30800015 	stw	r2,0(r6)
   124f0:	003fa006 	br	12374 <_free_r+0x11c>
   124f4:	01001504 	movi	r4,84
   124f8:	20c00436 	bltu	r4,r3,1250c <_free_r+0x2b4>
   124fc:	1006d33a 	srli	r3,r2,12
   12500:	19401b84 	addi	r5,r3,110
   12504:	2947883a 	add	r3,r5,r5
   12508:	003fa706 	br	123a8 <_free_r+0x150>
   1250c:	01005504 	movi	r4,340
   12510:	20c00436 	bltu	r4,r3,12524 <_free_r+0x2cc>
   12514:	1006d3fa 	srli	r3,r2,15
   12518:	19401dc4 	addi	r5,r3,119
   1251c:	2947883a 	add	r3,r5,r5
   12520:	003fa106 	br	123a8 <_free_r+0x150>
   12524:	01015504 	movi	r4,1364
   12528:	20c00436 	bltu	r4,r3,1253c <_free_r+0x2e4>
   1252c:	1006d4ba 	srli	r3,r2,18
   12530:	19401f04 	addi	r5,r3,124
   12534:	2947883a 	add	r3,r5,r5
   12538:	003f9b06 	br	123a8 <_free_r+0x150>
   1253c:	00c03f04 	movi	r3,252
   12540:	01401f84 	movi	r5,126
   12544:	003f9806 	br	123a8 <_free_r+0x150>

00012548 <_fwalk>:
   12548:	defff704 	addi	sp,sp,-36
   1254c:	dd000415 	stw	r20,16(sp)
   12550:	dfc00815 	stw	ra,32(sp)
   12554:	ddc00715 	stw	r23,28(sp)
   12558:	dd800615 	stw	r22,24(sp)
   1255c:	dd400515 	stw	r21,20(sp)
   12560:	dcc00315 	stw	r19,12(sp)
   12564:	dc800215 	stw	r18,8(sp)
   12568:	dc400115 	stw	r17,4(sp)
   1256c:	dc000015 	stw	r16,0(sp)
   12570:	2500b804 	addi	r20,r4,736
   12574:	a0002326 	beq	r20,zero,12604 <_fwalk+0xbc>
   12578:	282b883a 	mov	r21,r5
   1257c:	002f883a 	mov	r23,zero
   12580:	05800044 	movi	r22,1
   12584:	04ffffc4 	movi	r19,-1
   12588:	a4400117 	ldw	r17,4(r20)
   1258c:	a4800217 	ldw	r18,8(r20)
   12590:	8c7fffc4 	addi	r17,r17,-1
   12594:	88000d16 	blt	r17,zero,125cc <_fwalk+0x84>
   12598:	94000304 	addi	r16,r18,12
   1259c:	94800384 	addi	r18,r18,14
   125a0:	80c0000b 	ldhu	r3,0(r16)
   125a4:	8c7fffc4 	addi	r17,r17,-1
   125a8:	813ffd04 	addi	r4,r16,-12
   125ac:	b0c0042e 	bgeu	r22,r3,125c0 <_fwalk+0x78>
   125b0:	90c0000f 	ldh	r3,0(r18)
   125b4:	1cc00226 	beq	r3,r19,125c0 <_fwalk+0x78>
   125b8:	a83ee83a 	callr	r21
   125bc:	b8aeb03a 	or	r23,r23,r2
   125c0:	84001a04 	addi	r16,r16,104
   125c4:	94801a04 	addi	r18,r18,104
   125c8:	8cfff51e 	bne	r17,r19,125a0 <_fwalk+0x58>
   125cc:	a5000017 	ldw	r20,0(r20)
   125d0:	a03fed1e 	bne	r20,zero,12588 <_fwalk+0x40>
   125d4:	b805883a 	mov	r2,r23
   125d8:	dfc00817 	ldw	ra,32(sp)
   125dc:	ddc00717 	ldw	r23,28(sp)
   125e0:	dd800617 	ldw	r22,24(sp)
   125e4:	dd400517 	ldw	r21,20(sp)
   125e8:	dd000417 	ldw	r20,16(sp)
   125ec:	dcc00317 	ldw	r19,12(sp)
   125f0:	dc800217 	ldw	r18,8(sp)
   125f4:	dc400117 	ldw	r17,4(sp)
   125f8:	dc000017 	ldw	r16,0(sp)
   125fc:	dec00904 	addi	sp,sp,36
   12600:	f800283a 	ret
   12604:	002f883a 	mov	r23,zero
   12608:	003ff206 	br	125d4 <_fwalk+0x8c>

0001260c <_fwalk_reent>:
   1260c:	defff704 	addi	sp,sp,-36
   12610:	dd400515 	stw	r21,20(sp)
   12614:	dfc00815 	stw	ra,32(sp)
   12618:	ddc00715 	stw	r23,28(sp)
   1261c:	dd800615 	stw	r22,24(sp)
   12620:	dd000415 	stw	r20,16(sp)
   12624:	dcc00315 	stw	r19,12(sp)
   12628:	dc800215 	stw	r18,8(sp)
   1262c:	dc400115 	stw	r17,4(sp)
   12630:	dc000015 	stw	r16,0(sp)
   12634:	2540b804 	addi	r21,r4,736
   12638:	a8002326 	beq	r21,zero,126c8 <_fwalk_reent+0xbc>
   1263c:	2829883a 	mov	r20,r5
   12640:	202d883a 	mov	r22,r4
   12644:	002f883a 	mov	r23,zero
   12648:	04c00044 	movi	r19,1
   1264c:	04bfffc4 	movi	r18,-1
   12650:	ac400117 	ldw	r17,4(r21)
   12654:	ac000217 	ldw	r16,8(r21)
   12658:	8c7fffc4 	addi	r17,r17,-1
   1265c:	88000c16 	blt	r17,zero,12690 <_fwalk_reent+0x84>
   12660:	84000304 	addi	r16,r16,12
   12664:	80c0000b 	ldhu	r3,0(r16)
   12668:	8c7fffc4 	addi	r17,r17,-1
   1266c:	817ffd04 	addi	r5,r16,-12
   12670:	98c0052e 	bgeu	r19,r3,12688 <_fwalk_reent+0x7c>
   12674:	80c0008f 	ldh	r3,2(r16)
   12678:	b009883a 	mov	r4,r22
   1267c:	1c800226 	beq	r3,r18,12688 <_fwalk_reent+0x7c>
   12680:	a03ee83a 	callr	r20
   12684:	b8aeb03a 	or	r23,r23,r2
   12688:	84001a04 	addi	r16,r16,104
   1268c:	8cbff51e 	bne	r17,r18,12664 <_fwalk_reent+0x58>
   12690:	ad400017 	ldw	r21,0(r21)
   12694:	a83fee1e 	bne	r21,zero,12650 <_fwalk_reent+0x44>
   12698:	b805883a 	mov	r2,r23
   1269c:	dfc00817 	ldw	ra,32(sp)
   126a0:	ddc00717 	ldw	r23,28(sp)
   126a4:	dd800617 	ldw	r22,24(sp)
   126a8:	dd400517 	ldw	r21,20(sp)
   126ac:	dd000417 	ldw	r20,16(sp)
   126b0:	dcc00317 	ldw	r19,12(sp)
   126b4:	dc800217 	ldw	r18,8(sp)
   126b8:	dc400117 	ldw	r17,4(sp)
   126bc:	dc000017 	ldw	r16,0(sp)
   126c0:	dec00904 	addi	sp,sp,36
   126c4:	f800283a 	ret
   126c8:	002f883a 	mov	r23,zero
   126cc:	003ff206 	br	12698 <_fwalk_reent+0x8c>

000126d0 <__smakebuf_r>:
   126d0:	2880030b 	ldhu	r2,12(r5)
   126d4:	10c0008c 	andi	r3,r2,2
   126d8:	1800401e 	bne	r3,zero,127dc <__smakebuf_r+0x10c>
   126dc:	deffec04 	addi	sp,sp,-80
   126e0:	dc000f15 	stw	r16,60(sp)
   126e4:	2821883a 	mov	r16,r5
   126e8:	2940038f 	ldh	r5,14(r5)
   126ec:	dc401015 	stw	r17,64(sp)
   126f0:	dfc01315 	stw	ra,76(sp)
   126f4:	dcc01215 	stw	r19,72(sp)
   126f8:	dc801115 	stw	r18,68(sp)
   126fc:	2023883a 	mov	r17,r4
   12700:	28001b16 	blt	r5,zero,12770 <__smakebuf_r+0xa0>
   12704:	d80d883a 	mov	r6,sp
   12708:	0012c9c0 	call	12c9c <_fstat_r>
   1270c:	10001716 	blt	r2,zero,1276c <__smakebuf_r+0x9c>
   12710:	d8800117 	ldw	r2,4(sp)
   12714:	00e00014 	movui	r3,32768
   12718:	10bc000c 	andi	r2,r2,61440
   1271c:	10c03726 	beq	r2,r3,127fc <__smakebuf_r+0x12c>
   12720:	80c0030b 	ldhu	r3,12(r16)
   12724:	18c20014 	ori	r3,r3,2048
   12728:	80c0030d 	sth	r3,12(r16)
   1272c:	00c80004 	movi	r3,8192
   12730:	10c03c1e 	bne	r2,r3,12824 <__smakebuf_r+0x154>
   12734:	8140038f 	ldh	r5,14(r16)
   12738:	8809883a 	mov	r4,r17
   1273c:	0012cf40 	call	12cf4 <_isatty_r>
   12740:	10004e26 	beq	r2,zero,1287c <__smakebuf_r+0x1ac>
   12744:	8080030b 	ldhu	r2,12(r16)
   12748:	04c00044 	movi	r19,1
   1274c:	80c010c4 	addi	r3,r16,67
   12750:	14c4b03a 	or	r2,r2,r19
   12754:	8080030d 	sth	r2,12(r16)
   12758:	80c00015 	stw	r3,0(r16)
   1275c:	80c00415 	stw	r3,16(r16)
   12760:	84c00515 	stw	r19,20(r16)
   12764:	04810004 	movi	r18,1024
   12768:	00000706 	br	12788 <__smakebuf_r+0xb8>
   1276c:	8080030b 	ldhu	r2,12(r16)
   12770:	10c0200c 	andi	r3,r2,128
   12774:	18001f1e 	bne	r3,zero,127f4 <__smakebuf_r+0x124>
   12778:	04810004 	movi	r18,1024
   1277c:	10820014 	ori	r2,r2,2048
   12780:	8080030d 	sth	r2,12(r16)
   12784:	0027883a 	mov	r19,zero
   12788:	8809883a 	mov	r4,r17
   1278c:	900b883a 	mov	r5,r18
   12790:	00108cc0 	call	108cc <_malloc_r>
   12794:	10002e26 	beq	r2,zero,12850 <__smakebuf_r+0x180>
   12798:	80c0030b 	ldhu	r3,12(r16)
   1279c:	01000074 	movhi	r4,1
   127a0:	21076904 	addi	r4,r4,7588
   127a4:	89000f15 	stw	r4,60(r17)
   127a8:	18c02014 	ori	r3,r3,128
   127ac:	80c0030d 	sth	r3,12(r16)
   127b0:	80800015 	stw	r2,0(r16)
   127b4:	80800415 	stw	r2,16(r16)
   127b8:	84800515 	stw	r18,20(r16)
   127bc:	98001c1e 	bne	r19,zero,12830 <__smakebuf_r+0x160>
   127c0:	dfc01317 	ldw	ra,76(sp)
   127c4:	dcc01217 	ldw	r19,72(sp)
   127c8:	dc801117 	ldw	r18,68(sp)
   127cc:	dc401017 	ldw	r17,64(sp)
   127d0:	dc000f17 	ldw	r16,60(sp)
   127d4:	dec01404 	addi	sp,sp,80
   127d8:	f800283a 	ret
   127dc:	288010c4 	addi	r2,r5,67
   127e0:	28800015 	stw	r2,0(r5)
   127e4:	28800415 	stw	r2,16(r5)
   127e8:	00800044 	movi	r2,1
   127ec:	28800515 	stw	r2,20(r5)
   127f0:	f800283a 	ret
   127f4:	04801004 	movi	r18,64
   127f8:	003fe006 	br	1277c <__smakebuf_r+0xac>
   127fc:	81000a17 	ldw	r4,40(r16)
   12800:	00c00074 	movhi	r3,1
   12804:	18caa104 	addi	r3,r3,10884
   12808:	20ffc51e 	bne	r4,r3,12720 <__smakebuf_r+0x50>
   1280c:	80c0030b 	ldhu	r3,12(r16)
   12810:	01010004 	movi	r4,1024
   12814:	81001315 	stw	r4,76(r16)
   12818:	1906b03a 	or	r3,r3,r4
   1281c:	80c0030d 	sth	r3,12(r16)
   12820:	003fc206 	br	1272c <__smakebuf_r+0x5c>
   12824:	0027883a 	mov	r19,zero
   12828:	04810004 	movi	r18,1024
   1282c:	003fd606 	br	12788 <__smakebuf_r+0xb8>
   12830:	8140038f 	ldh	r5,14(r16)
   12834:	8809883a 	mov	r4,r17
   12838:	0012cf40 	call	12cf4 <_isatty_r>
   1283c:	103fe026 	beq	r2,zero,127c0 <__smakebuf_r+0xf0>
   12840:	8080030b 	ldhu	r2,12(r16)
   12844:	10800054 	ori	r2,r2,1
   12848:	8080030d 	sth	r2,12(r16)
   1284c:	003fdc06 	br	127c0 <__smakebuf_r+0xf0>
   12850:	8080030b 	ldhu	r2,12(r16)
   12854:	10c0800c 	andi	r3,r2,512
   12858:	183fd91e 	bne	r3,zero,127c0 <__smakebuf_r+0xf0>
   1285c:	10800094 	ori	r2,r2,2
   12860:	80c010c4 	addi	r3,r16,67
   12864:	8080030d 	sth	r2,12(r16)
   12868:	00800044 	movi	r2,1
   1286c:	80c00015 	stw	r3,0(r16)
   12870:	80c00415 	stw	r3,16(r16)
   12874:	80800515 	stw	r2,20(r16)
   12878:	003fd106 	br	127c0 <__smakebuf_r+0xf0>
   1287c:	04c00044 	movi	r19,1
   12880:	04810004 	movi	r18,1024
   12884:	003fc006 	br	12788 <__smakebuf_r+0xb8>

00012888 <memset>:
   12888:	20c000cc 	andi	r3,r4,3
   1288c:	2005883a 	mov	r2,r4
   12890:	18004326 	beq	r3,zero,129a0 <memset+0x118>
   12894:	31ffffc4 	addi	r7,r6,-1
   12898:	30004026 	beq	r6,zero,1299c <memset+0x114>
   1289c:	2813883a 	mov	r9,r5
   128a0:	200d883a 	mov	r6,r4
   128a4:	2007883a 	mov	r3,r4
   128a8:	00000406 	br	128bc <memset+0x34>
   128ac:	3a3fffc4 	addi	r8,r7,-1
   128b0:	31800044 	addi	r6,r6,1
   128b4:	38003926 	beq	r7,zero,1299c <memset+0x114>
   128b8:	400f883a 	mov	r7,r8
   128bc:	18c00044 	addi	r3,r3,1
   128c0:	32400005 	stb	r9,0(r6)
   128c4:	1a0000cc 	andi	r8,r3,3
   128c8:	403ff81e 	bne	r8,zero,128ac <memset+0x24>
   128cc:	010000c4 	movi	r4,3
   128d0:	21c02d2e 	bgeu	r4,r7,12988 <memset+0x100>
   128d4:	29803fcc 	andi	r6,r5,255
   128d8:	3008923a 	slli	r4,r6,8
   128dc:	218cb03a 	or	r6,r4,r6
   128e0:	3008943a 	slli	r4,r6,16
   128e4:	218cb03a 	or	r6,r4,r6
   128e8:	010003c4 	movi	r4,15
   128ec:	21c0182e 	bgeu	r4,r7,12950 <memset+0xc8>
   128f0:	3b3ffc04 	addi	r12,r7,-16
   128f4:	6018d13a 	srli	r12,r12,4
   128f8:	1a000104 	addi	r8,r3,4
   128fc:	1ac00204 	addi	r11,r3,8
   12900:	6008913a 	slli	r4,r12,4
   12904:	1a800304 	addi	r10,r3,12
   12908:	1813883a 	mov	r9,r3
   1290c:	21000504 	addi	r4,r4,20
   12910:	1909883a 	add	r4,r3,r4
   12914:	49800015 	stw	r6,0(r9)
   12918:	41800015 	stw	r6,0(r8)
   1291c:	59800015 	stw	r6,0(r11)
   12920:	51800015 	stw	r6,0(r10)
   12924:	42000404 	addi	r8,r8,16
   12928:	4a400404 	addi	r9,r9,16
   1292c:	5ac00404 	addi	r11,r11,16
   12930:	52800404 	addi	r10,r10,16
   12934:	413ff71e 	bne	r8,r4,12914 <memset+0x8c>
   12938:	63000044 	addi	r12,r12,1
   1293c:	6018913a 	slli	r12,r12,4
   12940:	39c003cc 	andi	r7,r7,15
   12944:	010000c4 	movi	r4,3
   12948:	1b07883a 	add	r3,r3,r12
   1294c:	21c00e2e 	bgeu	r4,r7,12988 <memset+0x100>
   12950:	1813883a 	mov	r9,r3
   12954:	3811883a 	mov	r8,r7
   12958:	010000c4 	movi	r4,3
   1295c:	49800015 	stw	r6,0(r9)
   12960:	423fff04 	addi	r8,r8,-4
   12964:	4a400104 	addi	r9,r9,4
   12968:	223ffc36 	bltu	r4,r8,1295c <memset+0xd4>
   1296c:	393fff04 	addi	r4,r7,-4
   12970:	2008d0ba 	srli	r4,r4,2
   12974:	39c000cc 	andi	r7,r7,3
   12978:	21000044 	addi	r4,r4,1
   1297c:	2109883a 	add	r4,r4,r4
   12980:	2109883a 	add	r4,r4,r4
   12984:	1907883a 	add	r3,r3,r4
   12988:	38000426 	beq	r7,zero,1299c <memset+0x114>
   1298c:	19cf883a 	add	r7,r3,r7
   12990:	19400005 	stb	r5,0(r3)
   12994:	18c00044 	addi	r3,r3,1
   12998:	19fffd1e 	bne	r3,r7,12990 <memset+0x108>
   1299c:	f800283a 	ret
   129a0:	2007883a 	mov	r3,r4
   129a4:	300f883a 	mov	r7,r6
   129a8:	003fc806 	br	128cc <memset+0x44>

000129ac <__sread>:
   129ac:	defffe04 	addi	sp,sp,-8
   129b0:	dc000015 	stw	r16,0(sp)
   129b4:	2821883a 	mov	r16,r5
   129b8:	2940038f 	ldh	r5,14(r5)
   129bc:	dfc00115 	stw	ra,4(sp)
   129c0:	0012da40 	call	12da4 <_read_r>
   129c4:	10000716 	blt	r2,zero,129e4 <__sread+0x38>
   129c8:	80c01417 	ldw	r3,80(r16)
   129cc:	1887883a 	add	r3,r3,r2
   129d0:	80c01415 	stw	r3,80(r16)
   129d4:	dfc00117 	ldw	ra,4(sp)
   129d8:	dc000017 	ldw	r16,0(sp)
   129dc:	dec00204 	addi	sp,sp,8
   129e0:	f800283a 	ret
   129e4:	80c0030b 	ldhu	r3,12(r16)
   129e8:	18fbffcc 	andi	r3,r3,61439
   129ec:	80c0030d 	sth	r3,12(r16)
   129f0:	dfc00117 	ldw	ra,4(sp)
   129f4:	dc000017 	ldw	r16,0(sp)
   129f8:	dec00204 	addi	sp,sp,8
   129fc:	f800283a 	ret

00012a00 <__seofread>:
   12a00:	0005883a 	mov	r2,zero
   12a04:	f800283a 	ret

00012a08 <__swrite>:
   12a08:	2880030b 	ldhu	r2,12(r5)
   12a0c:	defffb04 	addi	sp,sp,-20
   12a10:	dcc00315 	stw	r19,12(sp)
   12a14:	dc800215 	stw	r18,8(sp)
   12a18:	dc400115 	stw	r17,4(sp)
   12a1c:	dc000015 	stw	r16,0(sp)
   12a20:	dfc00415 	stw	ra,16(sp)
   12a24:	10c0400c 	andi	r3,r2,256
   12a28:	2821883a 	mov	r16,r5
   12a2c:	2027883a 	mov	r19,r4
   12a30:	3025883a 	mov	r18,r6
   12a34:	3823883a 	mov	r17,r7
   12a38:	18000526 	beq	r3,zero,12a50 <__swrite+0x48>
   12a3c:	2940038f 	ldh	r5,14(r5)
   12a40:	000d883a 	mov	r6,zero
   12a44:	01c00084 	movi	r7,2
   12a48:	0012d480 	call	12d48 <_lseek_r>
   12a4c:	8080030b 	ldhu	r2,12(r16)
   12a50:	8140038f 	ldh	r5,14(r16)
   12a54:	10bbffcc 	andi	r2,r2,61439
   12a58:	9809883a 	mov	r4,r19
   12a5c:	900d883a 	mov	r6,r18
   12a60:	880f883a 	mov	r7,r17
   12a64:	8080030d 	sth	r2,12(r16)
   12a68:	dfc00417 	ldw	ra,16(sp)
   12a6c:	dcc00317 	ldw	r19,12(sp)
   12a70:	dc800217 	ldw	r18,8(sp)
   12a74:	dc400117 	ldw	r17,4(sp)
   12a78:	dc000017 	ldw	r16,0(sp)
   12a7c:	dec00504 	addi	sp,sp,20
   12a80:	0012ae81 	jmpi	12ae8 <_write_r>

00012a84 <__sseek>:
   12a84:	defffe04 	addi	sp,sp,-8
   12a88:	dc000015 	stw	r16,0(sp)
   12a8c:	2821883a 	mov	r16,r5
   12a90:	2940038f 	ldh	r5,14(r5)
   12a94:	dfc00115 	stw	ra,4(sp)
   12a98:	0012d480 	call	12d48 <_lseek_r>
   12a9c:	00ffffc4 	movi	r3,-1
   12aa0:	10c00826 	beq	r2,r3,12ac4 <__sseek+0x40>
   12aa4:	80c0030b 	ldhu	r3,12(r16)
   12aa8:	80801415 	stw	r2,80(r16)
   12aac:	18c40014 	ori	r3,r3,4096
   12ab0:	80c0030d 	sth	r3,12(r16)
   12ab4:	dfc00117 	ldw	ra,4(sp)
   12ab8:	dc000017 	ldw	r16,0(sp)
   12abc:	dec00204 	addi	sp,sp,8
   12ac0:	f800283a 	ret
   12ac4:	80c0030b 	ldhu	r3,12(r16)
   12ac8:	18fbffcc 	andi	r3,r3,61439
   12acc:	80c0030d 	sth	r3,12(r16)
   12ad0:	dfc00117 	ldw	ra,4(sp)
   12ad4:	dc000017 	ldw	r16,0(sp)
   12ad8:	dec00204 	addi	sp,sp,8
   12adc:	f800283a 	ret

00012ae0 <__sclose>:
   12ae0:	2940038f 	ldh	r5,14(r5)
   12ae4:	0012b441 	jmpi	12b44 <_close_r>

00012ae8 <_write_r>:
   12ae8:	defffd04 	addi	sp,sp,-12
   12aec:	dc000015 	stw	r16,0(sp)
   12af0:	040000b4 	movhi	r16,2
   12af4:	dc400115 	stw	r17,4(sp)
   12af8:	84236a04 	addi	r16,r16,-29272
   12afc:	2023883a 	mov	r17,r4
   12b00:	2809883a 	mov	r4,r5
   12b04:	300b883a 	mov	r5,r6
   12b08:	380d883a 	mov	r6,r7
   12b0c:	dfc00215 	stw	ra,8(sp)
   12b10:	80000015 	stw	zero,0(r16)
   12b14:	00138080 	call	13808 <write>
   12b18:	00ffffc4 	movi	r3,-1
   12b1c:	10c00526 	beq	r2,r3,12b34 <_write_r+0x4c>
   12b20:	dfc00217 	ldw	ra,8(sp)
   12b24:	dc400117 	ldw	r17,4(sp)
   12b28:	dc000017 	ldw	r16,0(sp)
   12b2c:	dec00304 	addi	sp,sp,12
   12b30:	f800283a 	ret
   12b34:	80c00017 	ldw	r3,0(r16)
   12b38:	183ff926 	beq	r3,zero,12b20 <_write_r+0x38>
   12b3c:	88c00015 	stw	r3,0(r17)
   12b40:	003ff706 	br	12b20 <_write_r+0x38>

00012b44 <_close_r>:
   12b44:	defffd04 	addi	sp,sp,-12
   12b48:	dc000015 	stw	r16,0(sp)
   12b4c:	040000b4 	movhi	r16,2
   12b50:	dc400115 	stw	r17,4(sp)
   12b54:	84236a04 	addi	r16,r16,-29272
   12b58:	2023883a 	mov	r17,r4
   12b5c:	2809883a 	mov	r4,r5
   12b60:	dfc00215 	stw	ra,8(sp)
   12b64:	80000015 	stw	zero,0(r16)
   12b68:	0012f7c0 	call	12f7c <close>
   12b6c:	00ffffc4 	movi	r3,-1
   12b70:	10c00526 	beq	r2,r3,12b88 <_close_r+0x44>
   12b74:	dfc00217 	ldw	ra,8(sp)
   12b78:	dc400117 	ldw	r17,4(sp)
   12b7c:	dc000017 	ldw	r16,0(sp)
   12b80:	dec00304 	addi	sp,sp,12
   12b84:	f800283a 	ret
   12b88:	80c00017 	ldw	r3,0(r16)
   12b8c:	183ff926 	beq	r3,zero,12b74 <_close_r+0x30>
   12b90:	88c00015 	stw	r3,0(r17)
   12b94:	003ff706 	br	12b74 <_close_r+0x30>

00012b98 <_fclose_r>:
   12b98:	28003926 	beq	r5,zero,12c80 <_fclose_r+0xe8>
   12b9c:	defffc04 	addi	sp,sp,-16
   12ba0:	dc400115 	stw	r17,4(sp)
   12ba4:	dc000015 	stw	r16,0(sp)
   12ba8:	dfc00315 	stw	ra,12(sp)
   12bac:	dc800215 	stw	r18,8(sp)
   12bb0:	2023883a 	mov	r17,r4
   12bb4:	2821883a 	mov	r16,r5
   12bb8:	20000226 	beq	r4,zero,12bc4 <_fclose_r+0x2c>
   12bbc:	20800e17 	ldw	r2,56(r4)
   12bc0:	10002726 	beq	r2,zero,12c60 <_fclose_r+0xc8>
   12bc4:	8080030f 	ldh	r2,12(r16)
   12bc8:	1000071e 	bne	r2,zero,12be8 <_fclose_r+0x50>
   12bcc:	0005883a 	mov	r2,zero
   12bd0:	dfc00317 	ldw	ra,12(sp)
   12bd4:	dc800217 	ldw	r18,8(sp)
   12bd8:	dc400117 	ldw	r17,4(sp)
   12bdc:	dc000017 	ldw	r16,0(sp)
   12be0:	dec00404 	addi	sp,sp,16
   12be4:	f800283a 	ret
   12be8:	8809883a 	mov	r4,r17
   12bec:	800b883a 	mov	r5,r16
   12bf0:	0011b000 	call	11b00 <__sflush_r>
   12bf4:	1025883a 	mov	r18,r2
   12bf8:	80800b17 	ldw	r2,44(r16)
   12bfc:	10000426 	beq	r2,zero,12c10 <_fclose_r+0x78>
   12c00:	81400717 	ldw	r5,28(r16)
   12c04:	8809883a 	mov	r4,r17
   12c08:	103ee83a 	callr	r2
   12c0c:	10001616 	blt	r2,zero,12c68 <_fclose_r+0xd0>
   12c10:	8080030b 	ldhu	r2,12(r16)
   12c14:	1080200c 	andi	r2,r2,128
   12c18:	1000151e 	bne	r2,zero,12c70 <_fclose_r+0xd8>
   12c1c:	81400c17 	ldw	r5,48(r16)
   12c20:	28000526 	beq	r5,zero,12c38 <_fclose_r+0xa0>
   12c24:	80801004 	addi	r2,r16,64
   12c28:	28800226 	beq	r5,r2,12c34 <_fclose_r+0x9c>
   12c2c:	8809883a 	mov	r4,r17
   12c30:	00122580 	call	12258 <_free_r>
   12c34:	80000c15 	stw	zero,48(r16)
   12c38:	81401117 	ldw	r5,68(r16)
   12c3c:	28000326 	beq	r5,zero,12c4c <_fclose_r+0xb4>
   12c40:	8809883a 	mov	r4,r17
   12c44:	00122580 	call	12258 <_free_r>
   12c48:	80001115 	stw	zero,68(r16)
   12c4c:	00120f40 	call	120f4 <__sfp_lock_acquire>
   12c50:	8000030d 	sth	zero,12(r16)
   12c54:	00120f80 	call	120f8 <__sfp_lock_release>
   12c58:	9005883a 	mov	r2,r18
   12c5c:	003fdc06 	br	12bd0 <_fclose_r+0x38>
   12c60:	00120e40 	call	120e4 <__sinit>
   12c64:	003fd706 	br	12bc4 <_fclose_r+0x2c>
   12c68:	04bfffc4 	movi	r18,-1
   12c6c:	003fe806 	br	12c10 <_fclose_r+0x78>
   12c70:	81400417 	ldw	r5,16(r16)
   12c74:	8809883a 	mov	r4,r17
   12c78:	00122580 	call	12258 <_free_r>
   12c7c:	003fe706 	br	12c1c <_fclose_r+0x84>
   12c80:	0005883a 	mov	r2,zero
   12c84:	f800283a 	ret

00012c88 <fclose>:
   12c88:	00800074 	movhi	r2,1
   12c8c:	109cbf04 	addi	r2,r2,29436
   12c90:	200b883a 	mov	r5,r4
   12c94:	11000017 	ldw	r4,0(r2)
   12c98:	0012b981 	jmpi	12b98 <_fclose_r>

00012c9c <_fstat_r>:
   12c9c:	defffd04 	addi	sp,sp,-12
   12ca0:	dc000015 	stw	r16,0(sp)
   12ca4:	040000b4 	movhi	r16,2
   12ca8:	dc400115 	stw	r17,4(sp)
   12cac:	84236a04 	addi	r16,r16,-29272
   12cb0:	2023883a 	mov	r17,r4
   12cb4:	2809883a 	mov	r4,r5
   12cb8:	300b883a 	mov	r5,r6
   12cbc:	dfc00215 	stw	ra,8(sp)
   12cc0:	80000015 	stw	zero,0(r16)
   12cc4:	00130c80 	call	130c8 <fstat>
   12cc8:	00ffffc4 	movi	r3,-1
   12ccc:	10c00526 	beq	r2,r3,12ce4 <_fstat_r+0x48>
   12cd0:	dfc00217 	ldw	ra,8(sp)
   12cd4:	dc400117 	ldw	r17,4(sp)
   12cd8:	dc000017 	ldw	r16,0(sp)
   12cdc:	dec00304 	addi	sp,sp,12
   12ce0:	f800283a 	ret
   12ce4:	80c00017 	ldw	r3,0(r16)
   12ce8:	183ff926 	beq	r3,zero,12cd0 <_fstat_r+0x34>
   12cec:	88c00015 	stw	r3,0(r17)
   12cf0:	003ff706 	br	12cd0 <_fstat_r+0x34>

00012cf4 <_isatty_r>:
   12cf4:	defffd04 	addi	sp,sp,-12
   12cf8:	dc000015 	stw	r16,0(sp)
   12cfc:	040000b4 	movhi	r16,2
   12d00:	dc400115 	stw	r17,4(sp)
   12d04:	84236a04 	addi	r16,r16,-29272
   12d08:	2023883a 	mov	r17,r4
   12d0c:	2809883a 	mov	r4,r5
   12d10:	dfc00215 	stw	ra,8(sp)
   12d14:	80000015 	stw	zero,0(r16)
   12d18:	00131c80 	call	131c8 <isatty>
   12d1c:	00ffffc4 	movi	r3,-1
   12d20:	10c00526 	beq	r2,r3,12d38 <_isatty_r+0x44>
   12d24:	dfc00217 	ldw	ra,8(sp)
   12d28:	dc400117 	ldw	r17,4(sp)
   12d2c:	dc000017 	ldw	r16,0(sp)
   12d30:	dec00304 	addi	sp,sp,12
   12d34:	f800283a 	ret
   12d38:	80c00017 	ldw	r3,0(r16)
   12d3c:	183ff926 	beq	r3,zero,12d24 <_isatty_r+0x30>
   12d40:	88c00015 	stw	r3,0(r17)
   12d44:	003ff706 	br	12d24 <_isatty_r+0x30>

00012d48 <_lseek_r>:
   12d48:	defffd04 	addi	sp,sp,-12
   12d4c:	dc000015 	stw	r16,0(sp)
   12d50:	040000b4 	movhi	r16,2
   12d54:	dc400115 	stw	r17,4(sp)
   12d58:	84236a04 	addi	r16,r16,-29272
   12d5c:	2023883a 	mov	r17,r4
   12d60:	2809883a 	mov	r4,r5
   12d64:	300b883a 	mov	r5,r6
   12d68:	380d883a 	mov	r6,r7
   12d6c:	dfc00215 	stw	ra,8(sp)
   12d70:	80000015 	stw	zero,0(r16)
   12d74:	00133a00 	call	133a0 <lseek>
   12d78:	00ffffc4 	movi	r3,-1
   12d7c:	10c00526 	beq	r2,r3,12d94 <_lseek_r+0x4c>
   12d80:	dfc00217 	ldw	ra,8(sp)
   12d84:	dc400117 	ldw	r17,4(sp)
   12d88:	dc000017 	ldw	r16,0(sp)
   12d8c:	dec00304 	addi	sp,sp,12
   12d90:	f800283a 	ret
   12d94:	80c00017 	ldw	r3,0(r16)
   12d98:	183ff926 	beq	r3,zero,12d80 <_lseek_r+0x38>
   12d9c:	88c00015 	stw	r3,0(r17)
   12da0:	003ff706 	br	12d80 <_lseek_r+0x38>

00012da4 <_read_r>:
   12da4:	defffd04 	addi	sp,sp,-12
   12da8:	dc000015 	stw	r16,0(sp)
   12dac:	040000b4 	movhi	r16,2
   12db0:	dc400115 	stw	r17,4(sp)
   12db4:	84236a04 	addi	r16,r16,-29272
   12db8:	2023883a 	mov	r17,r4
   12dbc:	2809883a 	mov	r4,r5
   12dc0:	300b883a 	mov	r5,r6
   12dc4:	380d883a 	mov	r6,r7
   12dc8:	dfc00215 	stw	ra,8(sp)
   12dcc:	80000015 	stw	zero,0(r16)
   12dd0:	001357c0 	call	1357c <read>
   12dd4:	00ffffc4 	movi	r3,-1
   12dd8:	10c00526 	beq	r2,r3,12df0 <_read_r+0x4c>
   12ddc:	dfc00217 	ldw	ra,8(sp)
   12de0:	dc400117 	ldw	r17,4(sp)
   12de4:	dc000017 	ldw	r16,0(sp)
   12de8:	dec00304 	addi	sp,sp,12
   12dec:	f800283a 	ret
   12df0:	80c00017 	ldw	r3,0(r16)
   12df4:	183ff926 	beq	r3,zero,12ddc <_read_r+0x38>
   12df8:	88c00015 	stw	r3,0(r17)
   12dfc:	003ff706 	br	12ddc <_read_r+0x38>

00012e00 <udivmodsi4>:
   12e00:	2900182e 	bgeu	r5,r4,12e64 <udivmodsi4+0x64>
   12e04:	28001716 	blt	r5,zero,12e64 <udivmodsi4+0x64>
   12e08:	00800804 	movi	r2,32
   12e0c:	00c00044 	movi	r3,1
   12e10:	00000206 	br	12e1c <udivmodsi4+0x1c>
   12e14:	10001126 	beq	r2,zero,12e5c <udivmodsi4+0x5c>
   12e18:	28000516 	blt	r5,zero,12e30 <udivmodsi4+0x30>
   12e1c:	294b883a 	add	r5,r5,r5
   12e20:	10bfffc4 	addi	r2,r2,-1
   12e24:	18c7883a 	add	r3,r3,r3
   12e28:	293ffa36 	bltu	r5,r4,12e14 <udivmodsi4+0x14>
   12e2c:	18000b26 	beq	r3,zero,12e5c <udivmodsi4+0x5c>
   12e30:	0005883a 	mov	r2,zero
   12e34:	21400236 	bltu	r4,r5,12e40 <udivmodsi4+0x40>
   12e38:	2149c83a 	sub	r4,r4,r5
   12e3c:	10c4b03a 	or	r2,r2,r3
   12e40:	1806d07a 	srli	r3,r3,1
   12e44:	280ad07a 	srli	r5,r5,1
   12e48:	183ffa1e 	bne	r3,zero,12e34 <udivmodsi4+0x34>
   12e4c:	3000011e 	bne	r6,zero,12e54 <udivmodsi4+0x54>
   12e50:	f800283a 	ret
   12e54:	2005883a 	mov	r2,r4
   12e58:	f800283a 	ret
   12e5c:	0005883a 	mov	r2,zero
   12e60:	003ffa06 	br	12e4c <udivmodsi4+0x4c>
   12e64:	00c00044 	movi	r3,1
   12e68:	003ff106 	br	12e30 <udivmodsi4+0x30>

00012e6c <__divsi3>:
   12e6c:	defffe04 	addi	sp,sp,-8
   12e70:	dfc00115 	stw	ra,4(sp)
   12e74:	dc000015 	stw	r16,0(sp)
   12e78:	20000b16 	blt	r4,zero,12ea8 <__divsi3+0x3c>
   12e7c:	0021883a 	mov	r16,zero
   12e80:	28000c16 	blt	r5,zero,12eb4 <__divsi3+0x48>
   12e84:	000d883a 	mov	r6,zero
   12e88:	0012e000 	call	12e00 <udivmodsi4>
   12e8c:	0407c83a 	sub	r3,zero,r16
   12e90:	1884f03a 	xor	r2,r3,r2
   12e94:	1405883a 	add	r2,r2,r16
   12e98:	dfc00117 	ldw	ra,4(sp)
   12e9c:	dc000017 	ldw	r16,0(sp)
   12ea0:	dec00204 	addi	sp,sp,8
   12ea4:	f800283a 	ret
   12ea8:	0109c83a 	sub	r4,zero,r4
   12eac:	04000044 	movi	r16,1
   12eb0:	283ff40e 	bge	r5,zero,12e84 <__divsi3+0x18>
   12eb4:	014bc83a 	sub	r5,zero,r5
   12eb8:	8400005c 	xori	r16,r16,1
   12ebc:	003ff106 	br	12e84 <__divsi3+0x18>

00012ec0 <__modsi3>:
   12ec0:	defffd04 	addi	sp,sp,-12
   12ec4:	dfc00215 	stw	ra,8(sp)
   12ec8:	dc400115 	stw	r17,4(sp)
   12ecc:	dc000015 	stw	r16,0(sp)
   12ed0:	20000c16 	blt	r4,zero,12f04 <__modsi3+0x44>
   12ed4:	0023883a 	mov	r17,zero
   12ed8:	0021883a 	mov	r16,zero
   12edc:	28000d16 	blt	r5,zero,12f14 <__modsi3+0x54>
   12ee0:	01800044 	movi	r6,1
   12ee4:	0012e000 	call	12e00 <udivmodsi4>
   12ee8:	1404f03a 	xor	r2,r2,r16
   12eec:	8885883a 	add	r2,r17,r2
   12ef0:	dfc00217 	ldw	ra,8(sp)
   12ef4:	dc400117 	ldw	r17,4(sp)
   12ef8:	dc000017 	ldw	r16,0(sp)
   12efc:	dec00304 	addi	sp,sp,12
   12f00:	f800283a 	ret
   12f04:	0109c83a 	sub	r4,zero,r4
   12f08:	04400044 	movi	r17,1
   12f0c:	043fffc4 	movi	r16,-1
   12f10:	283ff30e 	bge	r5,zero,12ee0 <__modsi3+0x20>
   12f14:	014bc83a 	sub	r5,zero,r5
   12f18:	003ff106 	br	12ee0 <__modsi3+0x20>

00012f1c <__udivsi3>:
   12f1c:	000d883a 	mov	r6,zero
   12f20:	0012e001 	jmpi	12e00 <udivmodsi4>

00012f24 <__umodsi3>:
   12f24:	01800044 	movi	r6,1
   12f28:	0012e001 	jmpi	12e00 <udivmodsi4>

00012f2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f2c:	defffe04 	addi	sp,sp,-8
   12f30:	dfc00115 	stw	ra,4(sp)
   12f34:	df000015 	stw	fp,0(sp)
   12f38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f3c:	00800074 	movhi	r2,1
   12f40:	109cc704 	addi	r2,r2,29468
   12f44:	10800017 	ldw	r2,0(r2)
   12f48:	10000526 	beq	r2,zero,12f60 <alt_get_errno+0x34>
   12f4c:	00800074 	movhi	r2,1
   12f50:	109cc704 	addi	r2,r2,29468
   12f54:	10800017 	ldw	r2,0(r2)
   12f58:	103ee83a 	callr	r2
   12f5c:	00000206 	br	12f68 <alt_get_errno+0x3c>
   12f60:	008000b4 	movhi	r2,2
   12f64:	10a36a04 	addi	r2,r2,-29272
}
   12f68:	e037883a 	mov	sp,fp
   12f6c:	dfc00117 	ldw	ra,4(sp)
   12f70:	df000017 	ldw	fp,0(sp)
   12f74:	dec00204 	addi	sp,sp,8
   12f78:	f800283a 	ret

00012f7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12f7c:	defffb04 	addi	sp,sp,-20
   12f80:	dfc00415 	stw	ra,16(sp)
   12f84:	df000315 	stw	fp,12(sp)
   12f88:	df000304 	addi	fp,sp,12
   12f8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12f90:	e0bfff17 	ldw	r2,-4(fp)
   12f94:	10000616 	blt	r2,zero,12fb0 <close+0x34>
   12f98:	e0bfff17 	ldw	r2,-4(fp)
   12f9c:	10c00324 	muli	r3,r2,12
   12fa0:	00800074 	movhi	r2,1
   12fa4:	10984604 	addi	r2,r2,24856
   12fa8:	1885883a 	add	r2,r3,r2
   12fac:	00000106 	br	12fb4 <close+0x38>
   12fb0:	0005883a 	mov	r2,zero
   12fb4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12fb8:	e0bffd17 	ldw	r2,-12(fp)
   12fbc:	10001926 	beq	r2,zero,13024 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12fc0:	e0bffd17 	ldw	r2,-12(fp)
   12fc4:	10800017 	ldw	r2,0(r2)
   12fc8:	10800417 	ldw	r2,16(r2)
   12fcc:	10000626 	beq	r2,zero,12fe8 <close+0x6c>
   12fd0:	e0bffd17 	ldw	r2,-12(fp)
   12fd4:	10800017 	ldw	r2,0(r2)
   12fd8:	10800417 	ldw	r2,16(r2)
   12fdc:	e13ffd17 	ldw	r4,-12(fp)
   12fe0:	103ee83a 	callr	r2
   12fe4:	00000106 	br	12fec <close+0x70>
   12fe8:	0005883a 	mov	r2,zero
   12fec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12ff0:	e13fff17 	ldw	r4,-4(fp)
   12ff4:	00136780 	call	13678 <alt_release_fd>
    if (rval < 0)
   12ff8:	e0bffe17 	ldw	r2,-8(fp)
   12ffc:	1000070e 	bge	r2,zero,1301c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   13000:	0012f2c0 	call	12f2c <alt_get_errno>
   13004:	1007883a 	mov	r3,r2
   13008:	e0bffe17 	ldw	r2,-8(fp)
   1300c:	0085c83a 	sub	r2,zero,r2
   13010:	18800015 	stw	r2,0(r3)
      return -1;
   13014:	00bfffc4 	movi	r2,-1
   13018:	00000706 	br	13038 <close+0xbc>
    }
    return 0;
   1301c:	0005883a 	mov	r2,zero
   13020:	00000506 	br	13038 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13024:	0012f2c0 	call	12f2c <alt_get_errno>
   13028:	1007883a 	mov	r3,r2
   1302c:	00801444 	movi	r2,81
   13030:	18800015 	stw	r2,0(r3)
    return -1;
   13034:	00bfffc4 	movi	r2,-1
  }
}
   13038:	e037883a 	mov	sp,fp
   1303c:	dfc00117 	ldw	ra,4(sp)
   13040:	df000017 	ldw	fp,0(sp)
   13044:	dec00204 	addi	sp,sp,8
   13048:	f800283a 	ret

0001304c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1304c:	defffc04 	addi	sp,sp,-16
   13050:	df000315 	stw	fp,12(sp)
   13054:	df000304 	addi	fp,sp,12
   13058:	e13ffd15 	stw	r4,-12(fp)
   1305c:	e17ffe15 	stw	r5,-8(fp)
   13060:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13064:	e0bfff17 	ldw	r2,-4(fp)
}
   13068:	e037883a 	mov	sp,fp
   1306c:	df000017 	ldw	fp,0(sp)
   13070:	dec00104 	addi	sp,sp,4
   13074:	f800283a 	ret

00013078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13078:	defffe04 	addi	sp,sp,-8
   1307c:	dfc00115 	stw	ra,4(sp)
   13080:	df000015 	stw	fp,0(sp)
   13084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13088:	00800074 	movhi	r2,1
   1308c:	109cc704 	addi	r2,r2,29468
   13090:	10800017 	ldw	r2,0(r2)
   13094:	10000526 	beq	r2,zero,130ac <alt_get_errno+0x34>
   13098:	00800074 	movhi	r2,1
   1309c:	109cc704 	addi	r2,r2,29468
   130a0:	10800017 	ldw	r2,0(r2)
   130a4:	103ee83a 	callr	r2
   130a8:	00000206 	br	130b4 <alt_get_errno+0x3c>
   130ac:	008000b4 	movhi	r2,2
   130b0:	10a36a04 	addi	r2,r2,-29272
}
   130b4:	e037883a 	mov	sp,fp
   130b8:	dfc00117 	ldw	ra,4(sp)
   130bc:	df000017 	ldw	fp,0(sp)
   130c0:	dec00204 	addi	sp,sp,8
   130c4:	f800283a 	ret

000130c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   130c8:	defffb04 	addi	sp,sp,-20
   130cc:	dfc00415 	stw	ra,16(sp)
   130d0:	df000315 	stw	fp,12(sp)
   130d4:	df000304 	addi	fp,sp,12
   130d8:	e13ffe15 	stw	r4,-8(fp)
   130dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   130e0:	e0bffe17 	ldw	r2,-8(fp)
   130e4:	10000616 	blt	r2,zero,13100 <fstat+0x38>
   130e8:	e0bffe17 	ldw	r2,-8(fp)
   130ec:	10c00324 	muli	r3,r2,12
   130f0:	00800074 	movhi	r2,1
   130f4:	10984604 	addi	r2,r2,24856
   130f8:	1885883a 	add	r2,r3,r2
   130fc:	00000106 	br	13104 <fstat+0x3c>
   13100:	0005883a 	mov	r2,zero
   13104:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13108:	e0bffd17 	ldw	r2,-12(fp)
   1310c:	10001026 	beq	r2,zero,13150 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13110:	e0bffd17 	ldw	r2,-12(fp)
   13114:	10800017 	ldw	r2,0(r2)
   13118:	10800817 	ldw	r2,32(r2)
   1311c:	10000726 	beq	r2,zero,1313c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   13120:	e0bffd17 	ldw	r2,-12(fp)
   13124:	10800017 	ldw	r2,0(r2)
   13128:	10800817 	ldw	r2,32(r2)
   1312c:	e13ffd17 	ldw	r4,-12(fp)
   13130:	e17fff17 	ldw	r5,-4(fp)
   13134:	103ee83a 	callr	r2
   13138:	00000a06 	br	13164 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1313c:	e0bfff17 	ldw	r2,-4(fp)
   13140:	00c80004 	movi	r3,8192
   13144:	10c00115 	stw	r3,4(r2)
      return 0;
   13148:	0005883a 	mov	r2,zero
   1314c:	00000506 	br	13164 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13150:	00130780 	call	13078 <alt_get_errno>
   13154:	1007883a 	mov	r3,r2
   13158:	00801444 	movi	r2,81
   1315c:	18800015 	stw	r2,0(r3)
    return -1;
   13160:	00bfffc4 	movi	r2,-1
  }
}
   13164:	e037883a 	mov	sp,fp
   13168:	dfc00117 	ldw	ra,4(sp)
   1316c:	df000017 	ldw	fp,0(sp)
   13170:	dec00204 	addi	sp,sp,8
   13174:	f800283a 	ret

00013178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13178:	defffe04 	addi	sp,sp,-8
   1317c:	dfc00115 	stw	ra,4(sp)
   13180:	df000015 	stw	fp,0(sp)
   13184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13188:	00800074 	movhi	r2,1
   1318c:	109cc704 	addi	r2,r2,29468
   13190:	10800017 	ldw	r2,0(r2)
   13194:	10000526 	beq	r2,zero,131ac <alt_get_errno+0x34>
   13198:	00800074 	movhi	r2,1
   1319c:	109cc704 	addi	r2,r2,29468
   131a0:	10800017 	ldw	r2,0(r2)
   131a4:	103ee83a 	callr	r2
   131a8:	00000206 	br	131b4 <alt_get_errno+0x3c>
   131ac:	008000b4 	movhi	r2,2
   131b0:	10a36a04 	addi	r2,r2,-29272
}
   131b4:	e037883a 	mov	sp,fp
   131b8:	dfc00117 	ldw	ra,4(sp)
   131bc:	df000017 	ldw	fp,0(sp)
   131c0:	dec00204 	addi	sp,sp,8
   131c4:	f800283a 	ret

000131c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   131c8:	deffed04 	addi	sp,sp,-76
   131cc:	dfc01215 	stw	ra,72(sp)
   131d0:	df001115 	stw	fp,68(sp)
   131d4:	df001104 	addi	fp,sp,68
   131d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   131dc:	e0bfff17 	ldw	r2,-4(fp)
   131e0:	10000616 	blt	r2,zero,131fc <isatty+0x34>
   131e4:	e0bfff17 	ldw	r2,-4(fp)
   131e8:	10c00324 	muli	r3,r2,12
   131ec:	00800074 	movhi	r2,1
   131f0:	10984604 	addi	r2,r2,24856
   131f4:	1885883a 	add	r2,r3,r2
   131f8:	00000106 	br	13200 <isatty+0x38>
   131fc:	0005883a 	mov	r2,zero
   13200:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13204:	e0bfef17 	ldw	r2,-68(fp)
   13208:	10000e26 	beq	r2,zero,13244 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1320c:	e0bfef17 	ldw	r2,-68(fp)
   13210:	10800017 	ldw	r2,0(r2)
   13214:	10800817 	ldw	r2,32(r2)
   13218:	1000021e 	bne	r2,zero,13224 <isatty+0x5c>
    {
      return 1;
   1321c:	00800044 	movi	r2,1
   13220:	00000d06 	br	13258 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13224:	e0bff004 	addi	r2,fp,-64
   13228:	e13fff17 	ldw	r4,-4(fp)
   1322c:	100b883a 	mov	r5,r2
   13230:	00130c80 	call	130c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13234:	e0bff117 	ldw	r2,-60(fp)
   13238:	10880020 	cmpeqi	r2,r2,8192
   1323c:	10803fcc 	andi	r2,r2,255
   13240:	00000506 	br	13258 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13244:	00131780 	call	13178 <alt_get_errno>
   13248:	1007883a 	mov	r3,r2
   1324c:	00801444 	movi	r2,81
   13250:	18800015 	stw	r2,0(r3)
    return 0;
   13254:	0005883a 	mov	r2,zero
  }
}
   13258:	e037883a 	mov	sp,fp
   1325c:	dfc00117 	ldw	ra,4(sp)
   13260:	df000017 	ldw	fp,0(sp)
   13264:	dec00204 	addi	sp,sp,8
   13268:	f800283a 	ret

0001326c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1326c:	defffc04 	addi	sp,sp,-16
   13270:	df000315 	stw	fp,12(sp)
   13274:	df000304 	addi	fp,sp,12
   13278:	e13ffd15 	stw	r4,-12(fp)
   1327c:	e17ffe15 	stw	r5,-8(fp)
   13280:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13284:	e0fffe17 	ldw	r3,-8(fp)
   13288:	e0bffd17 	ldw	r2,-12(fp)
   1328c:	18800c26 	beq	r3,r2,132c0 <alt_load_section+0x54>
  {
    while( to != end )
   13290:	00000806 	br	132b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13294:	e0bffe17 	ldw	r2,-8(fp)
   13298:	10c00104 	addi	r3,r2,4
   1329c:	e0fffe15 	stw	r3,-8(fp)
   132a0:	e0fffd17 	ldw	r3,-12(fp)
   132a4:	19000104 	addi	r4,r3,4
   132a8:	e13ffd15 	stw	r4,-12(fp)
   132ac:	18c00017 	ldw	r3,0(r3)
   132b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   132b4:	e0fffe17 	ldw	r3,-8(fp)
   132b8:	e0bfff17 	ldw	r2,-4(fp)
   132bc:	18bff51e 	bne	r3,r2,13294 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   132c0:	e037883a 	mov	sp,fp
   132c4:	df000017 	ldw	fp,0(sp)
   132c8:	dec00104 	addi	sp,sp,4
   132cc:	f800283a 	ret

000132d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   132d0:	defffe04 	addi	sp,sp,-8
   132d4:	dfc00115 	stw	ra,4(sp)
   132d8:	df000015 	stw	fp,0(sp)
   132dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   132e0:	01000074 	movhi	r4,1
   132e4:	211ccc04 	addi	r4,r4,29488
   132e8:	01400074 	movhi	r5,1
   132ec:	29563104 	addi	r5,r5,22724
   132f0:	01800074 	movhi	r6,1
   132f4:	319ccc04 	addi	r6,r6,29488
   132f8:	001326c0 	call	1326c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   132fc:	01000074 	movhi	r4,1
   13300:	21000804 	addi	r4,r4,32
   13304:	01400074 	movhi	r5,1
   13308:	29400804 	addi	r5,r5,32
   1330c:	01800074 	movhi	r6,1
   13310:	31809004 	addi	r6,r6,576
   13314:	001326c0 	call	1326c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13318:	01000074 	movhi	r4,1
   1331c:	21160504 	addi	r4,r4,22548
   13320:	01400074 	movhi	r5,1
   13324:	29560504 	addi	r5,r5,22548
   13328:	01800074 	movhi	r6,1
   1332c:	31963104 	addi	r6,r6,22724
   13330:	001326c0 	call	1326c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13334:	00146980 	call	14698 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13338:	00148880 	call	14888 <alt_icache_flush_all>
}
   1333c:	e037883a 	mov	sp,fp
   13340:	dfc00117 	ldw	ra,4(sp)
   13344:	df000017 	ldw	fp,0(sp)
   13348:	dec00204 	addi	sp,sp,8
   1334c:	f800283a 	ret

00013350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13350:	defffe04 	addi	sp,sp,-8
   13354:	dfc00115 	stw	ra,4(sp)
   13358:	df000015 	stw	fp,0(sp)
   1335c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13360:	00800074 	movhi	r2,1
   13364:	109cc704 	addi	r2,r2,29468
   13368:	10800017 	ldw	r2,0(r2)
   1336c:	10000526 	beq	r2,zero,13384 <alt_get_errno+0x34>
   13370:	00800074 	movhi	r2,1
   13374:	109cc704 	addi	r2,r2,29468
   13378:	10800017 	ldw	r2,0(r2)
   1337c:	103ee83a 	callr	r2
   13380:	00000206 	br	1338c <alt_get_errno+0x3c>
   13384:	008000b4 	movhi	r2,2
   13388:	10a36a04 	addi	r2,r2,-29272
}
   1338c:	e037883a 	mov	sp,fp
   13390:	dfc00117 	ldw	ra,4(sp)
   13394:	df000017 	ldw	fp,0(sp)
   13398:	dec00204 	addi	sp,sp,8
   1339c:	f800283a 	ret

000133a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   133a0:	defff904 	addi	sp,sp,-28
   133a4:	dfc00615 	stw	ra,24(sp)
   133a8:	df000515 	stw	fp,20(sp)
   133ac:	df000504 	addi	fp,sp,20
   133b0:	e13ffd15 	stw	r4,-12(fp)
   133b4:	e17ffe15 	stw	r5,-8(fp)
   133b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   133bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   133c0:	e0bffd17 	ldw	r2,-12(fp)
   133c4:	10000616 	blt	r2,zero,133e0 <lseek+0x40>
   133c8:	e0bffd17 	ldw	r2,-12(fp)
   133cc:	10c00324 	muli	r3,r2,12
   133d0:	00800074 	movhi	r2,1
   133d4:	10984604 	addi	r2,r2,24856
   133d8:	1885883a 	add	r2,r3,r2
   133dc:	00000106 	br	133e4 <lseek+0x44>
   133e0:	0005883a 	mov	r2,zero
   133e4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   133e8:	e0bffc17 	ldw	r2,-16(fp)
   133ec:	10001026 	beq	r2,zero,13430 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   133f0:	e0bffc17 	ldw	r2,-16(fp)
   133f4:	10800017 	ldw	r2,0(r2)
   133f8:	10800717 	ldw	r2,28(r2)
   133fc:	10000926 	beq	r2,zero,13424 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13400:	e0bffc17 	ldw	r2,-16(fp)
   13404:	10800017 	ldw	r2,0(r2)
   13408:	10800717 	ldw	r2,28(r2)
   1340c:	e13ffc17 	ldw	r4,-16(fp)
   13410:	e17ffe17 	ldw	r5,-8(fp)
   13414:	e1bfff17 	ldw	r6,-4(fp)
   13418:	103ee83a 	callr	r2
   1341c:	e0bffb15 	stw	r2,-20(fp)
   13420:	00000506 	br	13438 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13424:	00bfde84 	movi	r2,-134
   13428:	e0bffb15 	stw	r2,-20(fp)
   1342c:	00000206 	br	13438 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   13430:	00bfebc4 	movi	r2,-81
   13434:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13438:	e0bffb17 	ldw	r2,-20(fp)
   1343c:	1000070e 	bge	r2,zero,1345c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13440:	00133500 	call	13350 <alt_get_errno>
   13444:	1007883a 	mov	r3,r2
   13448:	e0bffb17 	ldw	r2,-20(fp)
   1344c:	0085c83a 	sub	r2,zero,r2
   13450:	18800015 	stw	r2,0(r3)
    rc = -1;
   13454:	00bfffc4 	movi	r2,-1
   13458:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1345c:	e0bffb17 	ldw	r2,-20(fp)
}
   13460:	e037883a 	mov	sp,fp
   13464:	dfc00117 	ldw	ra,4(sp)
   13468:	df000017 	ldw	fp,0(sp)
   1346c:	dec00204 	addi	sp,sp,8
   13470:	f800283a 	ret

00013474 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13474:	defffd04 	addi	sp,sp,-12
   13478:	dfc00215 	stw	ra,8(sp)
   1347c:	df000115 	stw	fp,4(sp)
   13480:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13484:	0009883a 	mov	r4,zero
   13488:	00139380 	call	13938 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1348c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13490:	001396c0 	call	1396c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13494:	01000074 	movhi	r4,1
   13498:	21162904 	addi	r4,r4,22692
   1349c:	01400074 	movhi	r5,1
   134a0:	29562904 	addi	r5,r5,22692
   134a4:	01800074 	movhi	r6,1
   134a8:	31962904 	addi	r6,r6,22692
   134ac:	0014c480 	call	14c48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   134b0:	00147d00 	call	147d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   134b4:	01000074 	movhi	r4,1
   134b8:	21120b04 	addi	r4,r4,18476
   134bc:	00154700 	call	15470 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   134c0:	d126ad17 	ldw	r4,-25932(gp)
   134c4:	d0e6ae17 	ldw	r3,-25928(gp)
   134c8:	d0a6af17 	ldw	r2,-25924(gp)
   134cc:	180b883a 	mov	r5,r3
   134d0:	100d883a 	mov	r6,r2
   134d4:	001028c0 	call	1028c <main>
   134d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   134dc:	01000044 	movi	r4,1
   134e0:	0012f7c0 	call	12f7c <close>
  exit (result);
   134e4:	e13fff17 	ldw	r4,-4(fp)
   134e8:	00154840 	call	15484 <exit>

000134ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   134ec:	defffe04 	addi	sp,sp,-8
   134f0:	df000115 	stw	fp,4(sp)
   134f4:	df000104 	addi	fp,sp,4
   134f8:	e13fff15 	stw	r4,-4(fp)
}
   134fc:	e037883a 	mov	sp,fp
   13500:	df000017 	ldw	fp,0(sp)
   13504:	dec00104 	addi	sp,sp,4
   13508:	f800283a 	ret

0001350c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1350c:	defffe04 	addi	sp,sp,-8
   13510:	df000115 	stw	fp,4(sp)
   13514:	df000104 	addi	fp,sp,4
   13518:	e13fff15 	stw	r4,-4(fp)
}
   1351c:	e037883a 	mov	sp,fp
   13520:	df000017 	ldw	fp,0(sp)
   13524:	dec00104 	addi	sp,sp,4
   13528:	f800283a 	ret

0001352c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1352c:	defffe04 	addi	sp,sp,-8
   13530:	dfc00115 	stw	ra,4(sp)
   13534:	df000015 	stw	fp,0(sp)
   13538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1353c:	00800074 	movhi	r2,1
   13540:	109cc704 	addi	r2,r2,29468
   13544:	10800017 	ldw	r2,0(r2)
   13548:	10000526 	beq	r2,zero,13560 <alt_get_errno+0x34>
   1354c:	00800074 	movhi	r2,1
   13550:	109cc704 	addi	r2,r2,29468
   13554:	10800017 	ldw	r2,0(r2)
   13558:	103ee83a 	callr	r2
   1355c:	00000206 	br	13568 <alt_get_errno+0x3c>
   13560:	008000b4 	movhi	r2,2
   13564:	10a36a04 	addi	r2,r2,-29272
}
   13568:	e037883a 	mov	sp,fp
   1356c:	dfc00117 	ldw	ra,4(sp)
   13570:	df000017 	ldw	fp,0(sp)
   13574:	dec00204 	addi	sp,sp,8
   13578:	f800283a 	ret

0001357c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1357c:	defff904 	addi	sp,sp,-28
   13580:	dfc00615 	stw	ra,24(sp)
   13584:	df000515 	stw	fp,20(sp)
   13588:	df000504 	addi	fp,sp,20
   1358c:	e13ffd15 	stw	r4,-12(fp)
   13590:	e17ffe15 	stw	r5,-8(fp)
   13594:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13598:	e0bffd17 	ldw	r2,-12(fp)
   1359c:	10000616 	blt	r2,zero,135b8 <read+0x3c>
   135a0:	e0bffd17 	ldw	r2,-12(fp)
   135a4:	10c00324 	muli	r3,r2,12
   135a8:	00800074 	movhi	r2,1
   135ac:	10984604 	addi	r2,r2,24856
   135b0:	1885883a 	add	r2,r3,r2
   135b4:	00000106 	br	135bc <read+0x40>
   135b8:	0005883a 	mov	r2,zero
   135bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   135c0:	e0bffb17 	ldw	r2,-20(fp)
   135c4:	10002226 	beq	r2,zero,13650 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   135c8:	e0bffb17 	ldw	r2,-20(fp)
   135cc:	10800217 	ldw	r2,8(r2)
   135d0:	108000cc 	andi	r2,r2,3
   135d4:	10800060 	cmpeqi	r2,r2,1
   135d8:	1000181e 	bne	r2,zero,1363c <read+0xc0>
        (fd->dev->read))
   135dc:	e0bffb17 	ldw	r2,-20(fp)
   135e0:	10800017 	ldw	r2,0(r2)
   135e4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   135e8:	10001426 	beq	r2,zero,1363c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   135ec:	e0bffb17 	ldw	r2,-20(fp)
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	10800517 	ldw	r2,20(r2)
   135f8:	e0ffff17 	ldw	r3,-4(fp)
   135fc:	e13ffb17 	ldw	r4,-20(fp)
   13600:	e17ffe17 	ldw	r5,-8(fp)
   13604:	180d883a 	mov	r6,r3
   13608:	103ee83a 	callr	r2
   1360c:	e0bffc15 	stw	r2,-16(fp)
   13610:	e0bffc17 	ldw	r2,-16(fp)
   13614:	1000070e 	bge	r2,zero,13634 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13618:	001352c0 	call	1352c <alt_get_errno>
   1361c:	1007883a 	mov	r3,r2
   13620:	e0bffc17 	ldw	r2,-16(fp)
   13624:	0085c83a 	sub	r2,zero,r2
   13628:	18800015 	stw	r2,0(r3)
          return -1;
   1362c:	00bfffc4 	movi	r2,-1
   13630:	00000c06 	br	13664 <read+0xe8>
        }
        return rval;
   13634:	e0bffc17 	ldw	r2,-16(fp)
   13638:	00000a06 	br	13664 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1363c:	001352c0 	call	1352c <alt_get_errno>
   13640:	1007883a 	mov	r3,r2
   13644:	00800344 	movi	r2,13
   13648:	18800015 	stw	r2,0(r3)
   1364c:	00000406 	br	13660 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13650:	001352c0 	call	1352c <alt_get_errno>
   13654:	1007883a 	mov	r3,r2
   13658:	00801444 	movi	r2,81
   1365c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13660:	00bfffc4 	movi	r2,-1
}
   13664:	e037883a 	mov	sp,fp
   13668:	dfc00117 	ldw	ra,4(sp)
   1366c:	df000017 	ldw	fp,0(sp)
   13670:	dec00204 	addi	sp,sp,8
   13674:	f800283a 	ret

00013678 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13678:	defffe04 	addi	sp,sp,-8
   1367c:	df000115 	stw	fp,4(sp)
   13680:	df000104 	addi	fp,sp,4
   13684:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13688:	e0bfff17 	ldw	r2,-4(fp)
   1368c:	108000d0 	cmplti	r2,r2,3
   13690:	10000d1e 	bne	r2,zero,136c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13694:	00800074 	movhi	r2,1
   13698:	10984604 	addi	r2,r2,24856
   1369c:	e0ffff17 	ldw	r3,-4(fp)
   136a0:	18c00324 	muli	r3,r3,12
   136a4:	18c00204 	addi	r3,r3,8
   136a8:	10c5883a 	add	r2,r2,r3
   136ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   136b0:	00800074 	movhi	r2,1
   136b4:	10984604 	addi	r2,r2,24856
   136b8:	e0ffff17 	ldw	r3,-4(fp)
   136bc:	18c00324 	muli	r3,r3,12
   136c0:	10c5883a 	add	r2,r2,r3
   136c4:	10000015 	stw	zero,0(r2)
  }
}
   136c8:	e037883a 	mov	sp,fp
   136cc:	df000017 	ldw	fp,0(sp)
   136d0:	dec00104 	addi	sp,sp,4
   136d4:	f800283a 	ret

000136d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   136d8:	defff904 	addi	sp,sp,-28
   136dc:	df000615 	stw	fp,24(sp)
   136e0:	df000604 	addi	fp,sp,24
   136e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136e8:	0005303a 	rdctl	r2,status
   136ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136f0:	e0fffc17 	ldw	r3,-16(fp)
   136f4:	00bfff84 	movi	r2,-2
   136f8:	1884703a 	and	r2,r3,r2
   136fc:	1001703a 	wrctl	status,r2
  
  return context;
   13700:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13704:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13708:	d0a00a17 	ldw	r2,-32728(gp)
   1370c:	10c000c4 	addi	r3,r2,3
   13710:	00bfff04 	movi	r2,-4
   13714:	1884703a 	and	r2,r3,r2
   13718:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1371c:	d0e00a17 	ldw	r3,-32728(gp)
   13720:	e0bfff17 	ldw	r2,-4(fp)
   13724:	1887883a 	add	r3,r3,r2
   13728:	008000b4 	movhi	r2,2
   1372c:	10a80004 	addi	r2,r2,-24576
   13730:	10c0062e 	bgeu	r2,r3,1374c <sbrk+0x74>
   13734:	e0bffa17 	ldw	r2,-24(fp)
   13738:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1373c:	e0bffd17 	ldw	r2,-12(fp)
   13740:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13744:	00bfffc4 	movi	r2,-1
   13748:	00000b06 	br	13778 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1374c:	d0a00a17 	ldw	r2,-32728(gp)
   13750:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13754:	d0e00a17 	ldw	r3,-32728(gp)
   13758:	e0bfff17 	ldw	r2,-4(fp)
   1375c:	1885883a 	add	r2,r3,r2
   13760:	d0a00a15 	stw	r2,-32728(gp)
   13764:	e0bffa17 	ldw	r2,-24(fp)
   13768:	e0bffe15 	stw	r2,-8(fp)
   1376c:	e0bffe17 	ldw	r2,-8(fp)
   13770:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13774:	e0bffb17 	ldw	r2,-20(fp)
} 
   13778:	e037883a 	mov	sp,fp
   1377c:	df000017 	ldw	fp,0(sp)
   13780:	dec00104 	addi	sp,sp,4
   13784:	f800283a 	ret

00013788 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   13788:	defffd04 	addi	sp,sp,-12
   1378c:	dfc00215 	stw	ra,8(sp)
   13790:	df000115 	stw	fp,4(sp)
   13794:	df000104 	addi	fp,sp,4
   13798:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1379c:	e13fff17 	ldw	r4,-4(fp)
   137a0:	00145400 	call	14540 <alt_busy_sleep>
}
   137a4:	e037883a 	mov	sp,fp
   137a8:	dfc00117 	ldw	ra,4(sp)
   137ac:	df000017 	ldw	fp,0(sp)
   137b0:	dec00204 	addi	sp,sp,8
   137b4:	f800283a 	ret

000137b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   137b8:	defffe04 	addi	sp,sp,-8
   137bc:	dfc00115 	stw	ra,4(sp)
   137c0:	df000015 	stw	fp,0(sp)
   137c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   137c8:	00800074 	movhi	r2,1
   137cc:	109cc704 	addi	r2,r2,29468
   137d0:	10800017 	ldw	r2,0(r2)
   137d4:	10000526 	beq	r2,zero,137ec <alt_get_errno+0x34>
   137d8:	00800074 	movhi	r2,1
   137dc:	109cc704 	addi	r2,r2,29468
   137e0:	10800017 	ldw	r2,0(r2)
   137e4:	103ee83a 	callr	r2
   137e8:	00000206 	br	137f4 <alt_get_errno+0x3c>
   137ec:	008000b4 	movhi	r2,2
   137f0:	10a36a04 	addi	r2,r2,-29272
}
   137f4:	e037883a 	mov	sp,fp
   137f8:	dfc00117 	ldw	ra,4(sp)
   137fc:	df000017 	ldw	fp,0(sp)
   13800:	dec00204 	addi	sp,sp,8
   13804:	f800283a 	ret

00013808 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13808:	defff904 	addi	sp,sp,-28
   1380c:	dfc00615 	stw	ra,24(sp)
   13810:	df000515 	stw	fp,20(sp)
   13814:	df000504 	addi	fp,sp,20
   13818:	e13ffd15 	stw	r4,-12(fp)
   1381c:	e17ffe15 	stw	r5,-8(fp)
   13820:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13824:	e0bffd17 	ldw	r2,-12(fp)
   13828:	10000616 	blt	r2,zero,13844 <write+0x3c>
   1382c:	e0bffd17 	ldw	r2,-12(fp)
   13830:	10c00324 	muli	r3,r2,12
   13834:	00800074 	movhi	r2,1
   13838:	10984604 	addi	r2,r2,24856
   1383c:	1885883a 	add	r2,r3,r2
   13840:	00000106 	br	13848 <write+0x40>
   13844:	0005883a 	mov	r2,zero
   13848:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1384c:	e0bffb17 	ldw	r2,-20(fp)
   13850:	10002126 	beq	r2,zero,138d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13854:	e0bffb17 	ldw	r2,-20(fp)
   13858:	10800217 	ldw	r2,8(r2)
   1385c:	108000cc 	andi	r2,r2,3
   13860:	10001826 	beq	r2,zero,138c4 <write+0xbc>
   13864:	e0bffb17 	ldw	r2,-20(fp)
   13868:	10800017 	ldw	r2,0(r2)
   1386c:	10800617 	ldw	r2,24(r2)
   13870:	10001426 	beq	r2,zero,138c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13874:	e0bffb17 	ldw	r2,-20(fp)
   13878:	10800017 	ldw	r2,0(r2)
   1387c:	10800617 	ldw	r2,24(r2)
   13880:	e0ffff17 	ldw	r3,-4(fp)
   13884:	e13ffb17 	ldw	r4,-20(fp)
   13888:	e17ffe17 	ldw	r5,-8(fp)
   1388c:	180d883a 	mov	r6,r3
   13890:	103ee83a 	callr	r2
   13894:	e0bffc15 	stw	r2,-16(fp)
   13898:	e0bffc17 	ldw	r2,-16(fp)
   1389c:	1000070e 	bge	r2,zero,138bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   138a0:	00137b80 	call	137b8 <alt_get_errno>
   138a4:	1007883a 	mov	r3,r2
   138a8:	e0bffc17 	ldw	r2,-16(fp)
   138ac:	0085c83a 	sub	r2,zero,r2
   138b0:	18800015 	stw	r2,0(r3)
        return -1;
   138b4:	00bfffc4 	movi	r2,-1
   138b8:	00000c06 	br	138ec <write+0xe4>
      }
      return rval;
   138bc:	e0bffc17 	ldw	r2,-16(fp)
   138c0:	00000a06 	br	138ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   138c4:	00137b80 	call	137b8 <alt_get_errno>
   138c8:	1007883a 	mov	r3,r2
   138cc:	00800344 	movi	r2,13
   138d0:	18800015 	stw	r2,0(r3)
   138d4:	00000406 	br	138e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   138d8:	00137b80 	call	137b8 <alt_get_errno>
   138dc:	1007883a 	mov	r3,r2
   138e0:	00801444 	movi	r2,81
   138e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   138e8:	00bfffc4 	movi	r2,-1
}
   138ec:	e037883a 	mov	sp,fp
   138f0:	dfc00117 	ldw	ra,4(sp)
   138f4:	df000017 	ldw	fp,0(sp)
   138f8:	dec00204 	addi	sp,sp,8
   138fc:	f800283a 	ret

00013900 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13900:	defffd04 	addi	sp,sp,-12
   13904:	dfc00215 	stw	ra,8(sp)
   13908:	df000115 	stw	fp,4(sp)
   1390c:	df000104 	addi	fp,sp,4
   13910:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13914:	e13fff17 	ldw	r4,-4(fp)
   13918:	01400074 	movhi	r5,1
   1391c:	295cc404 	addi	r5,r5,29456
   13920:	001472c0 	call	1472c <alt_dev_llist_insert>
}
   13924:	e037883a 	mov	sp,fp
   13928:	dfc00117 	ldw	ra,4(sp)
   1392c:	df000017 	ldw	fp,0(sp)
   13930:	dec00204 	addi	sp,sp,8
   13934:	f800283a 	ret

00013938 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13938:	defffd04 	addi	sp,sp,-12
   1393c:	dfc00215 	stw	ra,8(sp)
   13940:	df000115 	stw	fp,4(sp)
   13944:	df000104 	addi	fp,sp,4
   13948:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1394c:	00150d00 	call	150d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13950:	00800044 	movi	r2,1
   13954:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13958:	e037883a 	mov	sp,fp
   1395c:	dfc00117 	ldw	ra,4(sp)
   13960:	df000017 	ldw	fp,0(sp)
   13964:	dec00204 	addi	sp,sp,8
   13968:	f800283a 	ret

0001396c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1396c:	defffe04 	addi	sp,sp,-8
   13970:	dfc00115 	stw	ra,4(sp)
   13974:	df000015 	stw	fp,0(sp)
   13978:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1397c:	01000074 	movhi	r4,1
   13980:	2118b004 	addi	r4,r4,25280
   13984:	000b883a 	mov	r5,zero
   13988:	000d883a 	mov	r6,zero
   1398c:	0013b180 	call	13b18 <altera_avalon_jtag_uart_init>
   13990:	01000074 	movhi	r4,1
   13994:	2118a604 	addi	r4,r4,25240
   13998:	00139000 	call	13900 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1399c:	0001883a 	nop
}
   139a0:	e037883a 	mov	sp,fp
   139a4:	dfc00117 	ldw	ra,4(sp)
   139a8:	df000017 	ldw	fp,0(sp)
   139ac:	dec00204 	addi	sp,sp,8
   139b0:	f800283a 	ret

000139b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   139b4:	defffa04 	addi	sp,sp,-24
   139b8:	dfc00515 	stw	ra,20(sp)
   139bc:	df000415 	stw	fp,16(sp)
   139c0:	df000404 	addi	fp,sp,16
   139c4:	e13ffd15 	stw	r4,-12(fp)
   139c8:	e17ffe15 	stw	r5,-8(fp)
   139cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   139d0:	e0bffd17 	ldw	r2,-12(fp)
   139d4:	10800017 	ldw	r2,0(r2)
   139d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   139dc:	e0bffc17 	ldw	r2,-16(fp)
   139e0:	10c00a04 	addi	r3,r2,40
   139e4:	e0bffd17 	ldw	r2,-12(fp)
   139e8:	10800217 	ldw	r2,8(r2)
   139ec:	1809883a 	mov	r4,r3
   139f0:	e17ffe17 	ldw	r5,-8(fp)
   139f4:	e1bfff17 	ldw	r6,-4(fp)
   139f8:	100f883a 	mov	r7,r2
   139fc:	0013fdc0 	call	13fdc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13a00:	e037883a 	mov	sp,fp
   13a04:	dfc00117 	ldw	ra,4(sp)
   13a08:	df000017 	ldw	fp,0(sp)
   13a0c:	dec00204 	addi	sp,sp,8
   13a10:	f800283a 	ret

00013a14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13a14:	defffa04 	addi	sp,sp,-24
   13a18:	dfc00515 	stw	ra,20(sp)
   13a1c:	df000415 	stw	fp,16(sp)
   13a20:	df000404 	addi	fp,sp,16
   13a24:	e13ffd15 	stw	r4,-12(fp)
   13a28:	e17ffe15 	stw	r5,-8(fp)
   13a2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a30:	e0bffd17 	ldw	r2,-12(fp)
   13a34:	10800017 	ldw	r2,0(r2)
   13a38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13a3c:	e0bffc17 	ldw	r2,-16(fp)
   13a40:	10c00a04 	addi	r3,r2,40
   13a44:	e0bffd17 	ldw	r2,-12(fp)
   13a48:	10800217 	ldw	r2,8(r2)
   13a4c:	1809883a 	mov	r4,r3
   13a50:	e17ffe17 	ldw	r5,-8(fp)
   13a54:	e1bfff17 	ldw	r6,-4(fp)
   13a58:	100f883a 	mov	r7,r2
   13a5c:	00141e80 	call	141e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13a60:	e037883a 	mov	sp,fp
   13a64:	dfc00117 	ldw	ra,4(sp)
   13a68:	df000017 	ldw	fp,0(sp)
   13a6c:	dec00204 	addi	sp,sp,8
   13a70:	f800283a 	ret

00013a74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13a74:	defffc04 	addi	sp,sp,-16
   13a78:	dfc00315 	stw	ra,12(sp)
   13a7c:	df000215 	stw	fp,8(sp)
   13a80:	df000204 	addi	fp,sp,8
   13a84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	10800017 	ldw	r2,0(r2)
   13a90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13a94:	e0bffe17 	ldw	r2,-8(fp)
   13a98:	10c00a04 	addi	r3,r2,40
   13a9c:	e0bfff17 	ldw	r2,-4(fp)
   13aa0:	10800217 	ldw	r2,8(r2)
   13aa4:	1809883a 	mov	r4,r3
   13aa8:	100b883a 	mov	r5,r2
   13aac:	0013e880 	call	13e88 <altera_avalon_jtag_uart_close>
}
   13ab0:	e037883a 	mov	sp,fp
   13ab4:	dfc00117 	ldw	ra,4(sp)
   13ab8:	df000017 	ldw	fp,0(sp)
   13abc:	dec00204 	addi	sp,sp,8
   13ac0:	f800283a 	ret

00013ac4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13ac4:	defffa04 	addi	sp,sp,-24
   13ac8:	dfc00515 	stw	ra,20(sp)
   13acc:	df000415 	stw	fp,16(sp)
   13ad0:	df000404 	addi	fp,sp,16
   13ad4:	e13ffd15 	stw	r4,-12(fp)
   13ad8:	e17ffe15 	stw	r5,-8(fp)
   13adc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13ae0:	e0bffd17 	ldw	r2,-12(fp)
   13ae4:	10800017 	ldw	r2,0(r2)
   13ae8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13aec:	e0bffc17 	ldw	r2,-16(fp)
   13af0:	10800a04 	addi	r2,r2,40
   13af4:	1009883a 	mov	r4,r2
   13af8:	e17ffe17 	ldw	r5,-8(fp)
   13afc:	e1bfff17 	ldw	r6,-4(fp)
   13b00:	0013ef00 	call	13ef0 <altera_avalon_jtag_uart_ioctl>
}
   13b04:	e037883a 	mov	sp,fp
   13b08:	dfc00117 	ldw	ra,4(sp)
   13b0c:	df000017 	ldw	fp,0(sp)
   13b10:	dec00204 	addi	sp,sp,8
   13b14:	f800283a 	ret

00013b18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13b18:	defffa04 	addi	sp,sp,-24
   13b1c:	dfc00515 	stw	ra,20(sp)
   13b20:	df000415 	stw	fp,16(sp)
   13b24:	df000404 	addi	fp,sp,16
   13b28:	e13ffd15 	stw	r4,-12(fp)
   13b2c:	e17ffe15 	stw	r5,-8(fp)
   13b30:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13b34:	e0bffd17 	ldw	r2,-12(fp)
   13b38:	00c00044 	movi	r3,1
   13b3c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13b40:	e0bffd17 	ldw	r2,-12(fp)
   13b44:	10800017 	ldw	r2,0(r2)
   13b48:	10800104 	addi	r2,r2,4
   13b4c:	1007883a 	mov	r3,r2
   13b50:	e0bffd17 	ldw	r2,-12(fp)
   13b54:	10800817 	ldw	r2,32(r2)
   13b58:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13b5c:	e0fffe17 	ldw	r3,-8(fp)
   13b60:	e0bfff17 	ldw	r2,-4(fp)
   13b64:	d8000015 	stw	zero,0(sp)
   13b68:	1809883a 	mov	r4,r3
   13b6c:	100b883a 	mov	r5,r2
   13b70:	01800074 	movhi	r6,1
   13b74:	318ef704 	addi	r6,r6,15324
   13b78:	e1fffd17 	ldw	r7,-12(fp)
   13b7c:	00148b80 	call	148b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13b80:	e0bffd17 	ldw	r2,-12(fp)
   13b84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13b90:	008000b4 	movhi	r2,2
   13b94:	10a36f04 	addi	r2,r2,-29252
   13b98:	10800017 	ldw	r2,0(r2)
   13b9c:	1809883a 	mov	r4,r3
   13ba0:	100b883a 	mov	r5,r2
   13ba4:	01800074 	movhi	r6,1
   13ba8:	318f7804 	addi	r6,r6,15840
   13bac:	e1fffd17 	ldw	r7,-12(fp)
   13bb0:	00144000 	call	14400 <alt_alarm_start>
   13bb4:	1000040e 	bge	r2,zero,13bc8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13bb8:	e0fffd17 	ldw	r3,-12(fp)
   13bbc:	00a00034 	movhi	r2,32768
   13bc0:	10bfffc4 	addi	r2,r2,-1
   13bc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13bc8:	e037883a 	mov	sp,fp
   13bcc:	dfc00117 	ldw	ra,4(sp)
   13bd0:	df000017 	ldw	fp,0(sp)
   13bd4:	dec00204 	addi	sp,sp,8
   13bd8:	f800283a 	ret

00013bdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13bdc:	defff804 	addi	sp,sp,-32
   13be0:	df000715 	stw	fp,28(sp)
   13be4:	df000704 	addi	fp,sp,28
   13be8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13bec:	e0bfff17 	ldw	r2,-4(fp)
   13bf0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13bf4:	e0bffb17 	ldw	r2,-20(fp)
   13bf8:	10800017 	ldw	r2,0(r2)
   13bfc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13c00:	e0bffc17 	ldw	r2,-16(fp)
   13c04:	10800104 	addi	r2,r2,4
   13c08:	10800037 	ldwio	r2,0(r2)
   13c0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13c10:	e0bffd17 	ldw	r2,-12(fp)
   13c14:	1080c00c 	andi	r2,r2,768
   13c18:	1000011e 	bne	r2,zero,13c20 <altera_avalon_jtag_uart_irq+0x44>
      break;
   13c1c:	00006c06 	br	13dd0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13c20:	e0bffd17 	ldw	r2,-12(fp)
   13c24:	1080400c 	andi	r2,r2,256
   13c28:	10003426 	beq	r2,zero,13cfc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13c2c:	00800074 	movhi	r2,1
   13c30:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13c34:	e0bffb17 	ldw	r2,-20(fp)
   13c38:	10800a17 	ldw	r2,40(r2)
   13c3c:	10800044 	addi	r2,r2,1
   13c40:	1081ffcc 	andi	r2,r2,2047
   13c44:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13c48:	e0bffb17 	ldw	r2,-20(fp)
   13c4c:	10c00b17 	ldw	r3,44(r2)
   13c50:	e0bffe17 	ldw	r2,-8(fp)
   13c54:	1880011e 	bne	r3,r2,13c5c <altera_avalon_jtag_uart_irq+0x80>
          break;
   13c58:	00001606 	br	13cb4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13c5c:	e0bffc17 	ldw	r2,-16(fp)
   13c60:	10800037 	ldwio	r2,0(r2)
   13c64:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13c68:	e0bff917 	ldw	r2,-28(fp)
   13c6c:	10a0000c 	andi	r2,r2,32768
   13c70:	1000011e 	bne	r2,zero,13c78 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   13c74:	00000f06 	br	13cb4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13c78:	e0bffb17 	ldw	r2,-20(fp)
   13c7c:	10800a17 	ldw	r2,40(r2)
   13c80:	e0fff917 	ldw	r3,-28(fp)
   13c84:	1809883a 	mov	r4,r3
   13c88:	e0fffb17 	ldw	r3,-20(fp)
   13c8c:	1885883a 	add	r2,r3,r2
   13c90:	10800e04 	addi	r2,r2,56
   13c94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13c98:	e0bffb17 	ldw	r2,-20(fp)
   13c9c:	10800a17 	ldw	r2,40(r2)
   13ca0:	10800044 	addi	r2,r2,1
   13ca4:	10c1ffcc 	andi	r3,r2,2047
   13ca8:	e0bffb17 	ldw	r2,-20(fp)
   13cac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13cb0:	003fe006 	br	13c34 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13cb4:	e0bff917 	ldw	r2,-28(fp)
   13cb8:	10bfffec 	andhi	r2,r2,65535
   13cbc:	10000f26 	beq	r2,zero,13cfc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13cc0:	e0bffb17 	ldw	r2,-20(fp)
   13cc4:	10c00817 	ldw	r3,32(r2)
   13cc8:	00bfff84 	movi	r2,-2
   13ccc:	1886703a 	and	r3,r3,r2
   13cd0:	e0bffb17 	ldw	r2,-20(fp)
   13cd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13cd8:	e0bffc17 	ldw	r2,-16(fp)
   13cdc:	10800104 	addi	r2,r2,4
   13ce0:	1007883a 	mov	r3,r2
   13ce4:	e0bffb17 	ldw	r2,-20(fp)
   13ce8:	10800817 	ldw	r2,32(r2)
   13cec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13cf0:	e0bffc17 	ldw	r2,-16(fp)
   13cf4:	10800104 	addi	r2,r2,4
   13cf8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13cfc:	e0bffd17 	ldw	r2,-12(fp)
   13d00:	1080800c 	andi	r2,r2,512
   13d04:	10003126 	beq	r2,zero,13dcc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13d08:	e0bffd17 	ldw	r2,-12(fp)
   13d0c:	1004d43a 	srli	r2,r2,16
   13d10:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13d14:	00001406 	br	13d68 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13d18:	e0bffc17 	ldw	r2,-16(fp)
   13d1c:	e0fffb17 	ldw	r3,-20(fp)
   13d20:	18c00d17 	ldw	r3,52(r3)
   13d24:	e13ffb17 	ldw	r4,-20(fp)
   13d28:	20c7883a 	add	r3,r4,r3
   13d2c:	18c20e04 	addi	r3,r3,2104
   13d30:	18c00003 	ldbu	r3,0(r3)
   13d34:	18c03fcc 	andi	r3,r3,255
   13d38:	18c0201c 	xori	r3,r3,128
   13d3c:	18ffe004 	addi	r3,r3,-128
   13d40:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13d44:	e0bffb17 	ldw	r2,-20(fp)
   13d48:	10800d17 	ldw	r2,52(r2)
   13d4c:	10800044 	addi	r2,r2,1
   13d50:	10c1ffcc 	andi	r3,r2,2047
   13d54:	e0bffb17 	ldw	r2,-20(fp)
   13d58:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13d5c:	e0bffa17 	ldw	r2,-24(fp)
   13d60:	10bfffc4 	addi	r2,r2,-1
   13d64:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13d68:	e0bffa17 	ldw	r2,-24(fp)
   13d6c:	10000526 	beq	r2,zero,13d84 <altera_avalon_jtag_uart_irq+0x1a8>
   13d70:	e0bffb17 	ldw	r2,-20(fp)
   13d74:	10c00d17 	ldw	r3,52(r2)
   13d78:	e0bffb17 	ldw	r2,-20(fp)
   13d7c:	10800c17 	ldw	r2,48(r2)
   13d80:	18bfe51e 	bne	r3,r2,13d18 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13d84:	e0bffa17 	ldw	r2,-24(fp)
   13d88:	10001026 	beq	r2,zero,13dcc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13d8c:	e0bffb17 	ldw	r2,-20(fp)
   13d90:	10c00817 	ldw	r3,32(r2)
   13d94:	00bfff44 	movi	r2,-3
   13d98:	1886703a 	and	r3,r3,r2
   13d9c:	e0bffb17 	ldw	r2,-20(fp)
   13da0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   13da4:	e0bffb17 	ldw	r2,-20(fp)
   13da8:	10800017 	ldw	r2,0(r2)
   13dac:	10800104 	addi	r2,r2,4
   13db0:	1007883a 	mov	r3,r2
   13db4:	e0bffb17 	ldw	r2,-20(fp)
   13db8:	10800817 	ldw	r2,32(r2)
   13dbc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13dc0:	e0bffc17 	ldw	r2,-16(fp)
   13dc4:	10800104 	addi	r2,r2,4
   13dc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   13dcc:	003f8c06 	br	13c00 <altera_avalon_jtag_uart_irq+0x24>
}
   13dd0:	e037883a 	mov	sp,fp
   13dd4:	df000017 	ldw	fp,0(sp)
   13dd8:	dec00104 	addi	sp,sp,4
   13ddc:	f800283a 	ret

00013de0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   13de0:	defff804 	addi	sp,sp,-32
   13de4:	df000715 	stw	fp,28(sp)
   13de8:	df000704 	addi	fp,sp,28
   13dec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   13df0:	e0bffb17 	ldw	r2,-20(fp)
   13df4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   13df8:	e0bff917 	ldw	r2,-28(fp)
   13dfc:	10800017 	ldw	r2,0(r2)
   13e00:	10800104 	addi	r2,r2,4
   13e04:	10800037 	ldwio	r2,0(r2)
   13e08:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   13e0c:	e0bffa17 	ldw	r2,-24(fp)
   13e10:	1081000c 	andi	r2,r2,1024
   13e14:	10000b26 	beq	r2,zero,13e44 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   13e18:	e0bff917 	ldw	r2,-28(fp)
   13e1c:	10800017 	ldw	r2,0(r2)
   13e20:	10800104 	addi	r2,r2,4
   13e24:	1007883a 	mov	r3,r2
   13e28:	e0bff917 	ldw	r2,-28(fp)
   13e2c:	10800817 	ldw	r2,32(r2)
   13e30:	10810014 	ori	r2,r2,1024
   13e34:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   13e38:	e0bff917 	ldw	r2,-28(fp)
   13e3c:	10000915 	stw	zero,36(r2)
   13e40:	00000a06 	br	13e6c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   13e44:	e0bff917 	ldw	r2,-28(fp)
   13e48:	10c00917 	ldw	r3,36(r2)
   13e4c:	00a00034 	movhi	r2,32768
   13e50:	10bfff04 	addi	r2,r2,-4
   13e54:	10c00536 	bltu	r2,r3,13e6c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   13e58:	e0bff917 	ldw	r2,-28(fp)
   13e5c:	10800917 	ldw	r2,36(r2)
   13e60:	10c00044 	addi	r3,r2,1
   13e64:	e0bff917 	ldw	r2,-28(fp)
   13e68:	10c00915 	stw	r3,36(r2)
   13e6c:	008000b4 	movhi	r2,2
   13e70:	10a36f04 	addi	r2,r2,-29252
   13e74:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   13e78:	e037883a 	mov	sp,fp
   13e7c:	df000017 	ldw	fp,0(sp)
   13e80:	dec00104 	addi	sp,sp,4
   13e84:	f800283a 	ret

00013e88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   13e88:	defffd04 	addi	sp,sp,-12
   13e8c:	df000215 	stw	fp,8(sp)
   13e90:	df000204 	addi	fp,sp,8
   13e94:	e13ffe15 	stw	r4,-8(fp)
   13e98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13e9c:	00000506 	br	13eb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   13ea0:	e0bfff17 	ldw	r2,-4(fp)
   13ea4:	1090000c 	andi	r2,r2,16384
   13ea8:	10000226 	beq	r2,zero,13eb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   13eac:	00bffd44 	movi	r2,-11
   13eb0:	00000b06 	br	13ee0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   13eb4:	e0bffe17 	ldw	r2,-8(fp)
   13eb8:	10c00d17 	ldw	r3,52(r2)
   13ebc:	e0bffe17 	ldw	r2,-8(fp)
   13ec0:	10800c17 	ldw	r2,48(r2)
   13ec4:	18800526 	beq	r3,r2,13edc <altera_avalon_jtag_uart_close+0x54>
   13ec8:	e0bffe17 	ldw	r2,-8(fp)
   13ecc:	10c00917 	ldw	r3,36(r2)
   13ed0:	e0bffe17 	ldw	r2,-8(fp)
   13ed4:	10800117 	ldw	r2,4(r2)
   13ed8:	18bff136 	bltu	r3,r2,13ea0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   13edc:	0005883a 	mov	r2,zero
}
   13ee0:	e037883a 	mov	sp,fp
   13ee4:	df000017 	ldw	fp,0(sp)
   13ee8:	dec00104 	addi	sp,sp,4
   13eec:	f800283a 	ret

00013ef0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   13ef0:	defffa04 	addi	sp,sp,-24
   13ef4:	df000515 	stw	fp,20(sp)
   13ef8:	df000504 	addi	fp,sp,20
   13efc:	e13ffd15 	stw	r4,-12(fp)
   13f00:	e17ffe15 	stw	r5,-8(fp)
   13f04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   13f08:	00bff9c4 	movi	r2,-25
   13f0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   13f10:	e0bffe17 	ldw	r2,-8(fp)
   13f14:	10da8060 	cmpeqi	r3,r2,27137
   13f18:	1800031e 	bne	r3,zero,13f28 <altera_avalon_jtag_uart_ioctl+0x38>
   13f1c:	109a80a0 	cmpeqi	r2,r2,27138
   13f20:	1000191e 	bne	r2,zero,13f88 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   13f24:	00002806 	br	13fc8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   13f28:	e0bffd17 	ldw	r2,-12(fp)
   13f2c:	10c00117 	ldw	r3,4(r2)
   13f30:	00a00034 	movhi	r2,32768
   13f34:	10bfffc4 	addi	r2,r2,-1
   13f38:	18801226 	beq	r3,r2,13f84 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   13f3c:	e0bfff17 	ldw	r2,-4(fp)
   13f40:	10800017 	ldw	r2,0(r2)
   13f44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   13f48:	e0bffc17 	ldw	r2,-16(fp)
   13f4c:	10800090 	cmplti	r2,r2,2
   13f50:	1000061e 	bne	r2,zero,13f6c <altera_avalon_jtag_uart_ioctl+0x7c>
   13f54:	e0fffc17 	ldw	r3,-16(fp)
   13f58:	00a00034 	movhi	r2,32768
   13f5c:	10bfffc4 	addi	r2,r2,-1
   13f60:	18800226 	beq	r3,r2,13f6c <altera_avalon_jtag_uart_ioctl+0x7c>
   13f64:	e0bffc17 	ldw	r2,-16(fp)
   13f68:	00000206 	br	13f74 <altera_avalon_jtag_uart_ioctl+0x84>
   13f6c:	00a00034 	movhi	r2,32768
   13f70:	10bfff84 	addi	r2,r2,-2
   13f74:	e0fffd17 	ldw	r3,-12(fp)
   13f78:	18800115 	stw	r2,4(r3)
      rc = 0;
   13f7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13f80:	00001106 	br	13fc8 <altera_avalon_jtag_uart_ioctl+0xd8>
   13f84:	00001006 	br	13fc8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   13f88:	e0bffd17 	ldw	r2,-12(fp)
   13f8c:	10c00117 	ldw	r3,4(r2)
   13f90:	00a00034 	movhi	r2,32768
   13f94:	10bfffc4 	addi	r2,r2,-1
   13f98:	18800a26 	beq	r3,r2,13fc4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   13f9c:	e0bffd17 	ldw	r2,-12(fp)
   13fa0:	10c00917 	ldw	r3,36(r2)
   13fa4:	e0bffd17 	ldw	r2,-12(fp)
   13fa8:	10800117 	ldw	r2,4(r2)
   13fac:	1885803a 	cmpltu	r2,r3,r2
   13fb0:	10c03fcc 	andi	r3,r2,255
   13fb4:	e0bfff17 	ldw	r2,-4(fp)
   13fb8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   13fbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   13fc0:	00000006 	br	13fc4 <altera_avalon_jtag_uart_ioctl+0xd4>
   13fc4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   13fc8:	e0bffb17 	ldw	r2,-20(fp)
}
   13fcc:	e037883a 	mov	sp,fp
   13fd0:	df000017 	ldw	fp,0(sp)
   13fd4:	dec00104 	addi	sp,sp,4
   13fd8:	f800283a 	ret

00013fdc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   13fdc:	defff304 	addi	sp,sp,-52
   13fe0:	dfc00c15 	stw	ra,48(sp)
   13fe4:	df000b15 	stw	fp,44(sp)
   13fe8:	df000b04 	addi	fp,sp,44
   13fec:	e13ffc15 	stw	r4,-16(fp)
   13ff0:	e17ffd15 	stw	r5,-12(fp)
   13ff4:	e1bffe15 	stw	r6,-8(fp)
   13ff8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   13ffc:	e0bffd17 	ldw	r2,-12(fp)
   14000:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14004:	00004906 	br	1412c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14008:	e0bffc17 	ldw	r2,-16(fp)
   1400c:	10800a17 	ldw	r2,40(r2)
   14010:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14014:	e0bffc17 	ldw	r2,-16(fp)
   14018:	10800b17 	ldw	r2,44(r2)
   1401c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   14020:	e0fff717 	ldw	r3,-36(fp)
   14024:	e0bff817 	ldw	r2,-32(fp)
   14028:	18800536 	bltu	r3,r2,14040 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1402c:	e0fff717 	ldw	r3,-36(fp)
   14030:	e0bff817 	ldw	r2,-32(fp)
   14034:	1885c83a 	sub	r2,r3,r2
   14038:	e0bff615 	stw	r2,-40(fp)
   1403c:	00000406 	br	14050 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14040:	00c20004 	movi	r3,2048
   14044:	e0bff817 	ldw	r2,-32(fp)
   14048:	1885c83a 	sub	r2,r3,r2
   1404c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14050:	e0bff617 	ldw	r2,-40(fp)
   14054:	1000011e 	bne	r2,zero,1405c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   14058:	00001d06 	br	140d0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   1405c:	e0fffe17 	ldw	r3,-8(fp)
   14060:	e0bff617 	ldw	r2,-40(fp)
   14064:	1880022e 	bgeu	r3,r2,14070 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   14068:	e0bffe17 	ldw	r2,-8(fp)
   1406c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14070:	e0bff817 	ldw	r2,-32(fp)
   14074:	10800e04 	addi	r2,r2,56
   14078:	e0fffc17 	ldw	r3,-16(fp)
   1407c:	1885883a 	add	r2,r3,r2
   14080:	e13ff517 	ldw	r4,-44(fp)
   14084:	100b883a 	mov	r5,r2
   14088:	e1bff617 	ldw	r6,-40(fp)
   1408c:	001115c0 	call	1115c <memcpy>
      ptr   += n;
   14090:	e0fff517 	ldw	r3,-44(fp)
   14094:	e0bff617 	ldw	r2,-40(fp)
   14098:	1885883a 	add	r2,r3,r2
   1409c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   140a0:	e0fffe17 	ldw	r3,-8(fp)
   140a4:	e0bff617 	ldw	r2,-40(fp)
   140a8:	1885c83a 	sub	r2,r3,r2
   140ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140b0:	e0fff817 	ldw	r3,-32(fp)
   140b4:	e0bff617 	ldw	r2,-40(fp)
   140b8:	1885883a 	add	r2,r3,r2
   140bc:	10c1ffcc 	andi	r3,r2,2047
   140c0:	e0bffc17 	ldw	r2,-16(fp)
   140c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   140c8:	e0bffe17 	ldw	r2,-8(fp)
   140cc:	00bfce16 	blt	zero,r2,14008 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   140d0:	e0fff517 	ldw	r3,-44(fp)
   140d4:	e0bffd17 	ldw	r2,-12(fp)
   140d8:	18800126 	beq	r3,r2,140e0 <altera_avalon_jtag_uart_read+0x104>
      break;
   140dc:	00001506 	br	14134 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   140e0:	e0bfff17 	ldw	r2,-4(fp)
   140e4:	1090000c 	andi	r2,r2,16384
   140e8:	10000126 	beq	r2,zero,140f0 <altera_avalon_jtag_uart_read+0x114>
      break;
   140ec:	00001106 	br	14134 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   140f0:	0001883a 	nop
   140f4:	e0bffc17 	ldw	r2,-16(fp)
   140f8:	10c00a17 	ldw	r3,40(r2)
   140fc:	e0bff717 	ldw	r2,-36(fp)
   14100:	1880051e 	bne	r3,r2,14118 <altera_avalon_jtag_uart_read+0x13c>
   14104:	e0bffc17 	ldw	r2,-16(fp)
   14108:	10c00917 	ldw	r3,36(r2)
   1410c:	e0bffc17 	ldw	r2,-16(fp)
   14110:	10800117 	ldw	r2,4(r2)
   14114:	18bff736 	bltu	r3,r2,140f4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14118:	e0bffc17 	ldw	r2,-16(fp)
   1411c:	10c00a17 	ldw	r3,40(r2)
   14120:	e0bff717 	ldw	r2,-36(fp)
   14124:	1880011e 	bne	r3,r2,1412c <altera_avalon_jtag_uart_read+0x150>
      break;
   14128:	00000206 	br	14134 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1412c:	e0bffe17 	ldw	r2,-8(fp)
   14130:	00bfb516 	blt	zero,r2,14008 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14134:	e0fff517 	ldw	r3,-44(fp)
   14138:	e0bffd17 	ldw	r2,-12(fp)
   1413c:	18801826 	beq	r3,r2,141a0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14140:	0005303a 	rdctl	r2,status
   14144:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14148:	e0fffa17 	ldw	r3,-24(fp)
   1414c:	00bfff84 	movi	r2,-2
   14150:	1884703a 	and	r2,r3,r2
   14154:	1001703a 	wrctl	status,r2
  
  return context;
   14158:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1415c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14160:	e0bffc17 	ldw	r2,-16(fp)
   14164:	10800817 	ldw	r2,32(r2)
   14168:	10c00054 	ori	r3,r2,1
   1416c:	e0bffc17 	ldw	r2,-16(fp)
   14170:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14174:	e0bffc17 	ldw	r2,-16(fp)
   14178:	10800017 	ldw	r2,0(r2)
   1417c:	10800104 	addi	r2,r2,4
   14180:	1007883a 	mov	r3,r2
   14184:	e0bffc17 	ldw	r2,-16(fp)
   14188:	10800817 	ldw	r2,32(r2)
   1418c:	18800035 	stwio	r2,0(r3)
   14190:	e0bff917 	ldw	r2,-28(fp)
   14194:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14198:	e0bffb17 	ldw	r2,-20(fp)
   1419c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   141a0:	e0fff517 	ldw	r3,-44(fp)
   141a4:	e0bffd17 	ldw	r2,-12(fp)
   141a8:	18800426 	beq	r3,r2,141bc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   141ac:	e0fff517 	ldw	r3,-44(fp)
   141b0:	e0bffd17 	ldw	r2,-12(fp)
   141b4:	1885c83a 	sub	r2,r3,r2
   141b8:	00000606 	br	141d4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   141bc:	e0bfff17 	ldw	r2,-4(fp)
   141c0:	1090000c 	andi	r2,r2,16384
   141c4:	10000226 	beq	r2,zero,141d0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   141c8:	00bffd44 	movi	r2,-11
   141cc:	00000106 	br	141d4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   141d0:	00bffec4 	movi	r2,-5
}
   141d4:	e037883a 	mov	sp,fp
   141d8:	dfc00117 	ldw	ra,4(sp)
   141dc:	df000017 	ldw	fp,0(sp)
   141e0:	dec00204 	addi	sp,sp,8
   141e4:	f800283a 	ret

000141e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   141e8:	defff304 	addi	sp,sp,-52
   141ec:	dfc00c15 	stw	ra,48(sp)
   141f0:	df000b15 	stw	fp,44(sp)
   141f4:	df000b04 	addi	fp,sp,44
   141f8:	e13ffc15 	stw	r4,-16(fp)
   141fc:	e17ffd15 	stw	r5,-12(fp)
   14200:	e1bffe15 	stw	r6,-8(fp)
   14204:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14208:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1420c:	e0bffd17 	ldw	r2,-12(fp)
   14210:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14214:	00003806 	br	142f8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14218:	e0bffc17 	ldw	r2,-16(fp)
   1421c:	10800c17 	ldw	r2,48(r2)
   14220:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   14224:	e0bffc17 	ldw	r2,-16(fp)
   14228:	10800d17 	ldw	r2,52(r2)
   1422c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14230:	e0fff817 	ldw	r3,-32(fp)
   14234:	e0bff517 	ldw	r2,-44(fp)
   14238:	1880062e 	bgeu	r3,r2,14254 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1423c:	e0fff517 	ldw	r3,-44(fp)
   14240:	e0bff817 	ldw	r2,-32(fp)
   14244:	1885c83a 	sub	r2,r3,r2
   14248:	10bfffc4 	addi	r2,r2,-1
   1424c:	e0bff615 	stw	r2,-40(fp)
   14250:	00000b06 	br	14280 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14254:	e0bff517 	ldw	r2,-44(fp)
   14258:	10000526 	beq	r2,zero,14270 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1425c:	00c20004 	movi	r3,2048
   14260:	e0bff817 	ldw	r2,-32(fp)
   14264:	1885c83a 	sub	r2,r3,r2
   14268:	e0bff615 	stw	r2,-40(fp)
   1426c:	00000406 	br	14280 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14270:	00c1ffc4 	movi	r3,2047
   14274:	e0bff817 	ldw	r2,-32(fp)
   14278:	1885c83a 	sub	r2,r3,r2
   1427c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14280:	e0bff617 	ldw	r2,-40(fp)
   14284:	1000011e 	bne	r2,zero,1428c <altera_avalon_jtag_uart_write+0xa4>
        break;
   14288:	00001d06 	br	14300 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   1428c:	e0fffe17 	ldw	r3,-8(fp)
   14290:	e0bff617 	ldw	r2,-40(fp)
   14294:	1880022e 	bgeu	r3,r2,142a0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   14298:	e0bffe17 	ldw	r2,-8(fp)
   1429c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   142a0:	e0bff817 	ldw	r2,-32(fp)
   142a4:	10820e04 	addi	r2,r2,2104
   142a8:	e0fffc17 	ldw	r3,-16(fp)
   142ac:	1885883a 	add	r2,r3,r2
   142b0:	1009883a 	mov	r4,r2
   142b4:	e17ffd17 	ldw	r5,-12(fp)
   142b8:	e1bff617 	ldw	r6,-40(fp)
   142bc:	001115c0 	call	1115c <memcpy>
      ptr   += n;
   142c0:	e0fffd17 	ldw	r3,-12(fp)
   142c4:	e0bff617 	ldw	r2,-40(fp)
   142c8:	1885883a 	add	r2,r3,r2
   142cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   142d0:	e0fffe17 	ldw	r3,-8(fp)
   142d4:	e0bff617 	ldw	r2,-40(fp)
   142d8:	1885c83a 	sub	r2,r3,r2
   142dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   142e0:	e0fff817 	ldw	r3,-32(fp)
   142e4:	e0bff617 	ldw	r2,-40(fp)
   142e8:	1885883a 	add	r2,r3,r2
   142ec:	10c1ffcc 	andi	r3,r2,2047
   142f0:	e0bffc17 	ldw	r2,-16(fp)
   142f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   142f8:	e0bffe17 	ldw	r2,-8(fp)
   142fc:	00bfc616 	blt	zero,r2,14218 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14300:	0005303a 	rdctl	r2,status
   14304:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14308:	e0fffa17 	ldw	r3,-24(fp)
   1430c:	00bfff84 	movi	r2,-2
   14310:	1884703a 	and	r2,r3,r2
   14314:	1001703a 	wrctl	status,r2
  
  return context;
   14318:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1431c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14320:	e0bffc17 	ldw	r2,-16(fp)
   14324:	10800817 	ldw	r2,32(r2)
   14328:	10c00094 	ori	r3,r2,2
   1432c:	e0bffc17 	ldw	r2,-16(fp)
   14330:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14334:	e0bffc17 	ldw	r2,-16(fp)
   14338:	10800017 	ldw	r2,0(r2)
   1433c:	10800104 	addi	r2,r2,4
   14340:	1007883a 	mov	r3,r2
   14344:	e0bffc17 	ldw	r2,-16(fp)
   14348:	10800817 	ldw	r2,32(r2)
   1434c:	18800035 	stwio	r2,0(r3)
   14350:	e0bff917 	ldw	r2,-28(fp)
   14354:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14358:	e0bffb17 	ldw	r2,-20(fp)
   1435c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14360:	e0bffe17 	ldw	r2,-8(fp)
   14364:	0080120e 	bge	zero,r2,143b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   14368:	e0bfff17 	ldw	r2,-4(fp)
   1436c:	1090000c 	andi	r2,r2,16384
   14370:	10000126 	beq	r2,zero,14378 <altera_avalon_jtag_uart_write+0x190>
        break;
   14374:	00001006 	br	143b8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14378:	0001883a 	nop
   1437c:	e0bffc17 	ldw	r2,-16(fp)
   14380:	10c00d17 	ldw	r3,52(r2)
   14384:	e0bff517 	ldw	r2,-44(fp)
   14388:	1880051e 	bne	r3,r2,143a0 <altera_avalon_jtag_uart_write+0x1b8>
   1438c:	e0bffc17 	ldw	r2,-16(fp)
   14390:	10c00917 	ldw	r3,36(r2)
   14394:	e0bffc17 	ldw	r2,-16(fp)
   14398:	10800117 	ldw	r2,4(r2)
   1439c:	18bff736 	bltu	r3,r2,1437c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   143a0:	e0bffc17 	ldw	r2,-16(fp)
   143a4:	10800917 	ldw	r2,36(r2)
   143a8:	10000126 	beq	r2,zero,143b0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   143ac:	00000206 	br	143b8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   143b0:	e0bffe17 	ldw	r2,-8(fp)
   143b4:	00bf9716 	blt	zero,r2,14214 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   143b8:	e0fffd17 	ldw	r3,-12(fp)
   143bc:	e0bff717 	ldw	r2,-36(fp)
   143c0:	18800426 	beq	r3,r2,143d4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   143c4:	e0fffd17 	ldw	r3,-12(fp)
   143c8:	e0bff717 	ldw	r2,-36(fp)
   143cc:	1885c83a 	sub	r2,r3,r2
   143d0:	00000606 	br	143ec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   143d4:	e0bfff17 	ldw	r2,-4(fp)
   143d8:	1090000c 	andi	r2,r2,16384
   143dc:	10000226 	beq	r2,zero,143e8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   143e0:	00bffd44 	movi	r2,-11
   143e4:	00000106 	br	143ec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   143e8:	00bffec4 	movi	r2,-5
}
   143ec:	e037883a 	mov	sp,fp
   143f0:	dfc00117 	ldw	ra,4(sp)
   143f4:	df000017 	ldw	fp,0(sp)
   143f8:	dec00204 	addi	sp,sp,8
   143fc:	f800283a 	ret

00014400 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14400:	defff504 	addi	sp,sp,-44
   14404:	df000a15 	stw	fp,40(sp)
   14408:	df000a04 	addi	fp,sp,40
   1440c:	e13ffc15 	stw	r4,-16(fp)
   14410:	e17ffd15 	stw	r5,-12(fp)
   14414:	e1bffe15 	stw	r6,-8(fp)
   14418:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1441c:	e03ff615 	stw	zero,-40(fp)
   14420:	008000b4 	movhi	r2,2
   14424:	10a36f04 	addi	r2,r2,-29252
   14428:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1442c:	10003f26 	beq	r2,zero,1452c <alt_alarm_start+0x12c>
  {
    if (alarm)
   14430:	e0bffc17 	ldw	r2,-16(fp)
   14434:	10003b26 	beq	r2,zero,14524 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   14438:	e0bffc17 	ldw	r2,-16(fp)
   1443c:	e0fffe17 	ldw	r3,-8(fp)
   14440:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14444:	e0bffc17 	ldw	r2,-16(fp)
   14448:	e0ffff17 	ldw	r3,-4(fp)
   1444c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14450:	0005303a 	rdctl	r2,status
   14454:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14458:	e0fff817 	ldw	r3,-32(fp)
   1445c:	00bfff84 	movi	r2,-2
   14460:	1884703a 	and	r2,r3,r2
   14464:	1001703a 	wrctl	status,r2
  
  return context;
   14468:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1446c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14470:	008000b4 	movhi	r2,2
   14474:	10a37004 	addi	r2,r2,-29248
   14478:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1447c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14480:	e0fffd17 	ldw	r3,-12(fp)
   14484:	e0bff617 	ldw	r2,-40(fp)
   14488:	1885883a 	add	r2,r3,r2
   1448c:	10c00044 	addi	r3,r2,1
   14490:	e0bffc17 	ldw	r2,-16(fp)
   14494:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14498:	e0bffc17 	ldw	r2,-16(fp)
   1449c:	10c00217 	ldw	r3,8(r2)
   144a0:	e0bff617 	ldw	r2,-40(fp)
   144a4:	1880042e 	bgeu	r3,r2,144b8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   144a8:	e0bffc17 	ldw	r2,-16(fp)
   144ac:	00c00044 	movi	r3,1
   144b0:	10c00405 	stb	r3,16(r2)
   144b4:	00000206 	br	144c0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   144b8:	e0bffc17 	ldw	r2,-16(fp)
   144bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   144c0:	e0fffc17 	ldw	r3,-16(fp)
   144c4:	00800074 	movhi	r2,1
   144c8:	109cca04 	addi	r2,r2,29480
   144cc:	e0bff915 	stw	r2,-28(fp)
   144d0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   144d4:	e0bffa17 	ldw	r2,-24(fp)
   144d8:	e0fff917 	ldw	r3,-28(fp)
   144dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   144e0:	e0bff917 	ldw	r2,-28(fp)
   144e4:	10c00017 	ldw	r3,0(r2)
   144e8:	e0bffa17 	ldw	r2,-24(fp)
   144ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   144f0:	e0bff917 	ldw	r2,-28(fp)
   144f4:	10800017 	ldw	r2,0(r2)
   144f8:	e0fffa17 	ldw	r3,-24(fp)
   144fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14500:	e0bff917 	ldw	r2,-28(fp)
   14504:	e0fffa17 	ldw	r3,-24(fp)
   14508:	10c00015 	stw	r3,0(r2)
   1450c:	e0bff717 	ldw	r2,-36(fp)
   14510:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14514:	e0bffb17 	ldw	r2,-20(fp)
   14518:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1451c:	0005883a 	mov	r2,zero
   14520:	00000306 	br	14530 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   14524:	00bffa84 	movi	r2,-22
   14528:	00000106 	br	14530 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   1452c:	00bfde84 	movi	r2,-134
  }
}
   14530:	e037883a 	mov	sp,fp
   14534:	df000017 	ldw	fp,0(sp)
   14538:	dec00104 	addi	sp,sp,4
   1453c:	f800283a 	ret

00014540 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   14540:	defffa04 	addi	sp,sp,-24
   14544:	dfc00515 	stw	ra,20(sp)
   14548:	df000415 	stw	fp,16(sp)
   1454c:	df000404 	addi	fp,sp,16
   14550:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   14554:	008000c4 	movi	r2,3
   14558:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1455c:	e0fffd17 	ldw	r3,-12(fp)
   14560:	008003f4 	movhi	r2,15
   14564:	10909004 	addi	r2,r2,16960
   14568:	1885383a 	mul	r2,r3,r2
   1456c:	0101c9f4 	movhi	r4,1831
   14570:	21038004 	addi	r4,r4,3584
   14574:	100b883a 	mov	r5,r2
   14578:	0012f1c0 	call	12f1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1457c:	01200034 	movhi	r4,32768
   14580:	213fffc4 	addi	r4,r4,-1
   14584:	100b883a 	mov	r5,r2
   14588:	0012f1c0 	call	12f1c <__udivsi3>
   1458c:	e13fff17 	ldw	r4,-4(fp)
   14590:	100b883a 	mov	r5,r2
   14594:	0012f1c0 	call	12f1c <__udivsi3>
   14598:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1459c:	e0bffe17 	ldw	r2,-8(fp)
   145a0:	10002a26 	beq	r2,zero,1464c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   145a4:	e03ffc15 	stw	zero,-16(fp)
   145a8:	00001706 	br	14608 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   145ac:	00a00034 	movhi	r2,32768
   145b0:	10bfffc4 	addi	r2,r2,-1
   145b4:	10bfffc4 	addi	r2,r2,-1
   145b8:	103ffe1e 	bne	r2,zero,145b4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   145bc:	e0fffd17 	ldw	r3,-12(fp)
   145c0:	008003f4 	movhi	r2,15
   145c4:	10909004 	addi	r2,r2,16960
   145c8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   145cc:	0101c9f4 	movhi	r4,1831
   145d0:	21038004 	addi	r4,r4,3584
   145d4:	100b883a 	mov	r5,r2
   145d8:	0012f1c0 	call	12f1c <__udivsi3>
   145dc:	01200034 	movhi	r4,32768
   145e0:	213fffc4 	addi	r4,r4,-1
   145e4:	100b883a 	mov	r5,r2
   145e8:	0012f1c0 	call	12f1c <__udivsi3>
   145ec:	1007883a 	mov	r3,r2
   145f0:	e0bfff17 	ldw	r2,-4(fp)
   145f4:	10c5c83a 	sub	r2,r2,r3
   145f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   145fc:	e0bffc17 	ldw	r2,-16(fp)
   14600:	10800044 	addi	r2,r2,1
   14604:	e0bffc15 	stw	r2,-16(fp)
   14608:	e0fffc17 	ldw	r3,-16(fp)
   1460c:	e0bffe17 	ldw	r2,-8(fp)
   14610:	18bfe616 	blt	r3,r2,145ac <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14614:	e0fffd17 	ldw	r3,-12(fp)
   14618:	008003f4 	movhi	r2,15
   1461c:	10909004 	addi	r2,r2,16960
   14620:	1885383a 	mul	r2,r3,r2
   14624:	0101c9f4 	movhi	r4,1831
   14628:	21038004 	addi	r4,r4,3584
   1462c:	100b883a 	mov	r5,r2
   14630:	0012f1c0 	call	12f1c <__udivsi3>
   14634:	1007883a 	mov	r3,r2
   14638:	e0bfff17 	ldw	r2,-4(fp)
   1463c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14640:	10bfffc4 	addi	r2,r2,-1
   14644:	103ffe1e 	bne	r2,zero,14640 <alt_busy_sleep+0x100>
   14648:	00000d06 	br	14680 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1464c:	e0fffd17 	ldw	r3,-12(fp)
   14650:	008003f4 	movhi	r2,15
   14654:	10909004 	addi	r2,r2,16960
   14658:	1885383a 	mul	r2,r3,r2
   1465c:	0101c9f4 	movhi	r4,1831
   14660:	21038004 	addi	r4,r4,3584
   14664:	100b883a 	mov	r5,r2
   14668:	0012f1c0 	call	12f1c <__udivsi3>
   1466c:	1007883a 	mov	r3,r2
   14670:	e0bfff17 	ldw	r2,-4(fp)
   14674:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   14678:	10bfffc4 	addi	r2,r2,-1
   1467c:	00bffe16 	blt	zero,r2,14678 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   14680:	0005883a 	mov	r2,zero
}
   14684:	e037883a 	mov	sp,fp
   14688:	dfc00117 	ldw	ra,4(sp)
   1468c:	df000017 	ldw	fp,0(sp)
   14690:	dec00204 	addi	sp,sp,8
   14694:	f800283a 	ret

00014698 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14698:	defffe04 	addi	sp,sp,-8
   1469c:	df000115 	stw	fp,4(sp)
   146a0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   146a4:	e03fff15 	stw	zero,-4(fp)
   146a8:	00000506 	br	146c0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   146ac:	e0bfff17 	ldw	r2,-4(fp)
   146b0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   146b4:	e0bfff17 	ldw	r2,-4(fp)
   146b8:	10800804 	addi	r2,r2,32
   146bc:	e0bfff15 	stw	r2,-4(fp)
   146c0:	e0bfff17 	ldw	r2,-4(fp)
   146c4:	10820030 	cmpltui	r2,r2,2048
   146c8:	103ff81e 	bne	r2,zero,146ac <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   146cc:	e037883a 	mov	sp,fp
   146d0:	df000017 	ldw	fp,0(sp)
   146d4:	dec00104 	addi	sp,sp,4
   146d8:	f800283a 	ret

000146dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   146dc:	defffe04 	addi	sp,sp,-8
   146e0:	dfc00115 	stw	ra,4(sp)
   146e4:	df000015 	stw	fp,0(sp)
   146e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   146ec:	00800074 	movhi	r2,1
   146f0:	109cc704 	addi	r2,r2,29468
   146f4:	10800017 	ldw	r2,0(r2)
   146f8:	10000526 	beq	r2,zero,14710 <alt_get_errno+0x34>
   146fc:	00800074 	movhi	r2,1
   14700:	109cc704 	addi	r2,r2,29468
   14704:	10800017 	ldw	r2,0(r2)
   14708:	103ee83a 	callr	r2
   1470c:	00000206 	br	14718 <alt_get_errno+0x3c>
   14710:	008000b4 	movhi	r2,2
   14714:	10a36a04 	addi	r2,r2,-29272
}
   14718:	e037883a 	mov	sp,fp
   1471c:	dfc00117 	ldw	ra,4(sp)
   14720:	df000017 	ldw	fp,0(sp)
   14724:	dec00204 	addi	sp,sp,8
   14728:	f800283a 	ret

0001472c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1472c:	defffa04 	addi	sp,sp,-24
   14730:	dfc00515 	stw	ra,20(sp)
   14734:	df000415 	stw	fp,16(sp)
   14738:	df000404 	addi	fp,sp,16
   1473c:	e13ffe15 	stw	r4,-8(fp)
   14740:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14744:	e0bffe17 	ldw	r2,-8(fp)
   14748:	10000326 	beq	r2,zero,14758 <alt_dev_llist_insert+0x2c>
   1474c:	e0bffe17 	ldw	r2,-8(fp)
   14750:	10800217 	ldw	r2,8(r2)
   14754:	1000061e 	bne	r2,zero,14770 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14758:	00146dc0 	call	146dc <alt_get_errno>
   1475c:	1007883a 	mov	r3,r2
   14760:	00800584 	movi	r2,22
   14764:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14768:	00bffa84 	movi	r2,-22
   1476c:	00001306 	br	147bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14770:	e0bffe17 	ldw	r2,-8(fp)
   14774:	e0ffff17 	ldw	r3,-4(fp)
   14778:	e0fffc15 	stw	r3,-16(fp)
   1477c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14780:	e0bffd17 	ldw	r2,-12(fp)
   14784:	e0fffc17 	ldw	r3,-16(fp)
   14788:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1478c:	e0bffc17 	ldw	r2,-16(fp)
   14790:	10c00017 	ldw	r3,0(r2)
   14794:	e0bffd17 	ldw	r2,-12(fp)
   14798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1479c:	e0bffc17 	ldw	r2,-16(fp)
   147a0:	10800017 	ldw	r2,0(r2)
   147a4:	e0fffd17 	ldw	r3,-12(fp)
   147a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   147ac:	e0bffc17 	ldw	r2,-16(fp)
   147b0:	e0fffd17 	ldw	r3,-12(fp)
   147b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   147b8:	0005883a 	mov	r2,zero
}
   147bc:	e037883a 	mov	sp,fp
   147c0:	dfc00117 	ldw	ra,4(sp)
   147c4:	df000017 	ldw	fp,0(sp)
   147c8:	dec00204 	addi	sp,sp,8
   147cc:	f800283a 	ret

000147d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   147d0:	defffd04 	addi	sp,sp,-12
   147d4:	dfc00215 	stw	ra,8(sp)
   147d8:	df000115 	stw	fp,4(sp)
   147dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   147e0:	00800074 	movhi	r2,1
   147e4:	10960404 	addi	r2,r2,22544
   147e8:	e0bfff15 	stw	r2,-4(fp)
   147ec:	00000606 	br	14808 <_do_ctors+0x38>
        (*ctor) (); 
   147f0:	e0bfff17 	ldw	r2,-4(fp)
   147f4:	10800017 	ldw	r2,0(r2)
   147f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   147fc:	e0bfff17 	ldw	r2,-4(fp)
   14800:	10bfff04 	addi	r2,r2,-4
   14804:	e0bfff15 	stw	r2,-4(fp)
   14808:	e0ffff17 	ldw	r3,-4(fp)
   1480c:	00800074 	movhi	r2,1
   14810:	10960504 	addi	r2,r2,22548
   14814:	18bff62e 	bgeu	r3,r2,147f0 <_do_ctors+0x20>
        (*ctor) (); 
}
   14818:	e037883a 	mov	sp,fp
   1481c:	dfc00117 	ldw	ra,4(sp)
   14820:	df000017 	ldw	fp,0(sp)
   14824:	dec00204 	addi	sp,sp,8
   14828:	f800283a 	ret

0001482c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1482c:	defffd04 	addi	sp,sp,-12
   14830:	dfc00215 	stw	ra,8(sp)
   14834:	df000115 	stw	fp,4(sp)
   14838:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1483c:	00800074 	movhi	r2,1
   14840:	10960404 	addi	r2,r2,22544
   14844:	e0bfff15 	stw	r2,-4(fp)
   14848:	00000606 	br	14864 <_do_dtors+0x38>
        (*dtor) (); 
   1484c:	e0bfff17 	ldw	r2,-4(fp)
   14850:	10800017 	ldw	r2,0(r2)
   14854:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14858:	e0bfff17 	ldw	r2,-4(fp)
   1485c:	10bfff04 	addi	r2,r2,-4
   14860:	e0bfff15 	stw	r2,-4(fp)
   14864:	e0ffff17 	ldw	r3,-4(fp)
   14868:	00800074 	movhi	r2,1
   1486c:	10960504 	addi	r2,r2,22548
   14870:	18bff62e 	bgeu	r3,r2,1484c <_do_dtors+0x20>
        (*dtor) (); 
}
   14874:	e037883a 	mov	sp,fp
   14878:	dfc00117 	ldw	ra,4(sp)
   1487c:	df000017 	ldw	fp,0(sp)
   14880:	dec00204 	addi	sp,sp,8
   14884:	f800283a 	ret

00014888 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14888:	defffe04 	addi	sp,sp,-8
   1488c:	dfc00115 	stw	ra,4(sp)
   14890:	df000015 	stw	fp,0(sp)
   14894:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14898:	0009883a 	mov	r4,zero
   1489c:	01440004 	movi	r5,4096
   148a0:	00153480 	call	15348 <alt_icache_flush>
#endif
}
   148a4:	e037883a 	mov	sp,fp
   148a8:	dfc00117 	ldw	ra,4(sp)
   148ac:	df000017 	ldw	fp,0(sp)
   148b0:	dec00204 	addi	sp,sp,8
   148b4:	f800283a 	ret

000148b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   148b8:	defff904 	addi	sp,sp,-28
   148bc:	dfc00615 	stw	ra,24(sp)
   148c0:	df000515 	stw	fp,20(sp)
   148c4:	df000504 	addi	fp,sp,20
   148c8:	e13ffc15 	stw	r4,-16(fp)
   148cc:	e17ffd15 	stw	r5,-12(fp)
   148d0:	e1bffe15 	stw	r6,-8(fp)
   148d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   148d8:	e0800217 	ldw	r2,8(fp)
   148dc:	d8800015 	stw	r2,0(sp)
   148e0:	e13ffc17 	ldw	r4,-16(fp)
   148e4:	e17ffd17 	ldw	r5,-12(fp)
   148e8:	e1bffe17 	ldw	r6,-8(fp)
   148ec:	e1ffff17 	ldw	r7,-4(fp)
   148f0:	0014a980 	call	14a98 <alt_iic_isr_register>
}  
   148f4:	e037883a 	mov	sp,fp
   148f8:	dfc00117 	ldw	ra,4(sp)
   148fc:	df000017 	ldw	fp,0(sp)
   14900:	dec00204 	addi	sp,sp,8
   14904:	f800283a 	ret

00014908 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14908:	defff904 	addi	sp,sp,-28
   1490c:	df000615 	stw	fp,24(sp)
   14910:	df000604 	addi	fp,sp,24
   14914:	e13ffe15 	stw	r4,-8(fp)
   14918:	e17fff15 	stw	r5,-4(fp)
   1491c:	e0bfff17 	ldw	r2,-4(fp)
   14920:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14924:	0005303a 	rdctl	r2,status
   14928:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1492c:	e0fffb17 	ldw	r3,-20(fp)
   14930:	00bfff84 	movi	r2,-2
   14934:	1884703a 	and	r2,r3,r2
   14938:	1001703a 	wrctl	status,r2
  
  return context;
   1493c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14940:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14944:	e0bffa17 	ldw	r2,-24(fp)
   14948:	00c00044 	movi	r3,1
   1494c:	1884983a 	sll	r2,r3,r2
   14950:	1007883a 	mov	r3,r2
   14954:	008000b4 	movhi	r2,2
   14958:	10a36e04 	addi	r2,r2,-29256
   1495c:	10800017 	ldw	r2,0(r2)
   14960:	1886b03a 	or	r3,r3,r2
   14964:	008000b4 	movhi	r2,2
   14968:	10a36e04 	addi	r2,r2,-29256
   1496c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14970:	008000b4 	movhi	r2,2
   14974:	10a36e04 	addi	r2,r2,-29256
   14978:	10800017 	ldw	r2,0(r2)
   1497c:	100170fa 	wrctl	ienable,r2
   14980:	e0bffc17 	ldw	r2,-16(fp)
   14984:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14988:	e0bffd17 	ldw	r2,-12(fp)
   1498c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14990:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14994:	0001883a 	nop
}
   14998:	e037883a 	mov	sp,fp
   1499c:	df000017 	ldw	fp,0(sp)
   149a0:	dec00104 	addi	sp,sp,4
   149a4:	f800283a 	ret

000149a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   149a8:	defff904 	addi	sp,sp,-28
   149ac:	df000615 	stw	fp,24(sp)
   149b0:	df000604 	addi	fp,sp,24
   149b4:	e13ffe15 	stw	r4,-8(fp)
   149b8:	e17fff15 	stw	r5,-4(fp)
   149bc:	e0bfff17 	ldw	r2,-4(fp)
   149c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149c4:	0005303a 	rdctl	r2,status
   149c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149cc:	e0fffb17 	ldw	r3,-20(fp)
   149d0:	00bfff84 	movi	r2,-2
   149d4:	1884703a 	and	r2,r3,r2
   149d8:	1001703a 	wrctl	status,r2
  
  return context;
   149dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   149e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   149e4:	e0bffa17 	ldw	r2,-24(fp)
   149e8:	00c00044 	movi	r3,1
   149ec:	1884983a 	sll	r2,r3,r2
   149f0:	0084303a 	nor	r2,zero,r2
   149f4:	1007883a 	mov	r3,r2
   149f8:	008000b4 	movhi	r2,2
   149fc:	10a36e04 	addi	r2,r2,-29256
   14a00:	10800017 	ldw	r2,0(r2)
   14a04:	1886703a 	and	r3,r3,r2
   14a08:	008000b4 	movhi	r2,2
   14a0c:	10a36e04 	addi	r2,r2,-29256
   14a10:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14a14:	008000b4 	movhi	r2,2
   14a18:	10a36e04 	addi	r2,r2,-29256
   14a1c:	10800017 	ldw	r2,0(r2)
   14a20:	100170fa 	wrctl	ienable,r2
   14a24:	e0bffc17 	ldw	r2,-16(fp)
   14a28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a2c:	e0bffd17 	ldw	r2,-12(fp)
   14a30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14a34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14a38:	0001883a 	nop
}
   14a3c:	e037883a 	mov	sp,fp
   14a40:	df000017 	ldw	fp,0(sp)
   14a44:	dec00104 	addi	sp,sp,4
   14a48:	f800283a 	ret

00014a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14a4c:	defffc04 	addi	sp,sp,-16
   14a50:	df000315 	stw	fp,12(sp)
   14a54:	df000304 	addi	fp,sp,12
   14a58:	e13ffe15 	stw	r4,-8(fp)
   14a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14a60:	000530fa 	rdctl	r2,ienable
   14a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14a68:	e0bfff17 	ldw	r2,-4(fp)
   14a6c:	00c00044 	movi	r3,1
   14a70:	1884983a 	sll	r2,r3,r2
   14a74:	1007883a 	mov	r3,r2
   14a78:	e0bffd17 	ldw	r2,-12(fp)
   14a7c:	1884703a 	and	r2,r3,r2
   14a80:	1004c03a 	cmpne	r2,r2,zero
   14a84:	10803fcc 	andi	r2,r2,255
}
   14a88:	e037883a 	mov	sp,fp
   14a8c:	df000017 	ldw	fp,0(sp)
   14a90:	dec00104 	addi	sp,sp,4
   14a94:	f800283a 	ret

00014a98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14a98:	defff504 	addi	sp,sp,-44
   14a9c:	dfc00a15 	stw	ra,40(sp)
   14aa0:	df000915 	stw	fp,36(sp)
   14aa4:	df000904 	addi	fp,sp,36
   14aa8:	e13ffc15 	stw	r4,-16(fp)
   14aac:	e17ffd15 	stw	r5,-12(fp)
   14ab0:	e1bffe15 	stw	r6,-8(fp)
   14ab4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14ab8:	00bffa84 	movi	r2,-22
   14abc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14ac0:	e0bffd17 	ldw	r2,-12(fp)
   14ac4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14ac8:	e0bff817 	ldw	r2,-32(fp)
   14acc:	10800808 	cmpgei	r2,r2,32
   14ad0:	1000271e 	bne	r2,zero,14b70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ad4:	0005303a 	rdctl	r2,status
   14ad8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14adc:	e0fffa17 	ldw	r3,-24(fp)
   14ae0:	00bfff84 	movi	r2,-2
   14ae4:	1884703a 	and	r2,r3,r2
   14ae8:	1001703a 	wrctl	status,r2
  
  return context;
   14aec:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14af0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   14af4:	008000b4 	movhi	r2,2
   14af8:	10a37c04 	addi	r2,r2,-29200
   14afc:	e0fff817 	ldw	r3,-32(fp)
   14b00:	180690fa 	slli	r3,r3,3
   14b04:	10c5883a 	add	r2,r2,r3
   14b08:	e0fffe17 	ldw	r3,-8(fp)
   14b0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14b10:	008000b4 	movhi	r2,2
   14b14:	10a37c04 	addi	r2,r2,-29200
   14b18:	e0fff817 	ldw	r3,-32(fp)
   14b1c:	180690fa 	slli	r3,r3,3
   14b20:	18c00104 	addi	r3,r3,4
   14b24:	10c5883a 	add	r2,r2,r3
   14b28:	e0ffff17 	ldw	r3,-4(fp)
   14b2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14b30:	e0bffe17 	ldw	r2,-8(fp)
   14b34:	10000526 	beq	r2,zero,14b4c <alt_iic_isr_register+0xb4>
   14b38:	e0bff817 	ldw	r2,-32(fp)
   14b3c:	e13ffc17 	ldw	r4,-16(fp)
   14b40:	100b883a 	mov	r5,r2
   14b44:	00149080 	call	14908 <alt_ic_irq_enable>
   14b48:	00000406 	br	14b5c <alt_iic_isr_register+0xc4>
   14b4c:	e0bff817 	ldw	r2,-32(fp)
   14b50:	e13ffc17 	ldw	r4,-16(fp)
   14b54:	100b883a 	mov	r5,r2
   14b58:	00149a80 	call	149a8 <alt_ic_irq_disable>
   14b5c:	e0bff715 	stw	r2,-36(fp)
   14b60:	e0bff917 	ldw	r2,-28(fp)
   14b64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b68:	e0bffb17 	ldw	r2,-20(fp)
   14b6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14b70:	e0bff717 	ldw	r2,-36(fp)
}
   14b74:	e037883a 	mov	sp,fp
   14b78:	dfc00117 	ldw	ra,4(sp)
   14b7c:	df000017 	ldw	fp,0(sp)
   14b80:	dec00204 	addi	sp,sp,8
   14b84:	f800283a 	ret

00014b88 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14b88:	defff904 	addi	sp,sp,-28
   14b8c:	dfc00615 	stw	ra,24(sp)
   14b90:	df000515 	stw	fp,20(sp)
   14b94:	df000504 	addi	fp,sp,20
   14b98:	e13ffc15 	stw	r4,-16(fp)
   14b9c:	e17ffd15 	stw	r5,-12(fp)
   14ba0:	e1bffe15 	stw	r6,-8(fp)
   14ba4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14ba8:	e13ffd17 	ldw	r4,-12(fp)
   14bac:	e17ffe17 	ldw	r5,-8(fp)
   14bb0:	e1bfff17 	ldw	r6,-4(fp)
   14bb4:	0014ddc0 	call	14ddc <open>
   14bb8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14bbc:	e0bffb17 	ldw	r2,-20(fp)
   14bc0:	10001c16 	blt	r2,zero,14c34 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   14bc4:	00800074 	movhi	r2,1
   14bc8:	10984604 	addi	r2,r2,24856
   14bcc:	e0fffb17 	ldw	r3,-20(fp)
   14bd0:	18c00324 	muli	r3,r3,12
   14bd4:	10c5883a 	add	r2,r2,r3
   14bd8:	10c00017 	ldw	r3,0(r2)
   14bdc:	e0bffc17 	ldw	r2,-16(fp)
   14be0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14be4:	00800074 	movhi	r2,1
   14be8:	10984604 	addi	r2,r2,24856
   14bec:	e0fffb17 	ldw	r3,-20(fp)
   14bf0:	18c00324 	muli	r3,r3,12
   14bf4:	18c00104 	addi	r3,r3,4
   14bf8:	10c5883a 	add	r2,r2,r3
   14bfc:	10c00017 	ldw	r3,0(r2)
   14c00:	e0bffc17 	ldw	r2,-16(fp)
   14c04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14c08:	00800074 	movhi	r2,1
   14c0c:	10984604 	addi	r2,r2,24856
   14c10:	e0fffb17 	ldw	r3,-20(fp)
   14c14:	18c00324 	muli	r3,r3,12
   14c18:	18c00204 	addi	r3,r3,8
   14c1c:	10c5883a 	add	r2,r2,r3
   14c20:	10c00017 	ldw	r3,0(r2)
   14c24:	e0bffc17 	ldw	r2,-16(fp)
   14c28:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14c2c:	e13ffb17 	ldw	r4,-20(fp)
   14c30:	00136780 	call	13678 <alt_release_fd>
  }
} 
   14c34:	e037883a 	mov	sp,fp
   14c38:	dfc00117 	ldw	ra,4(sp)
   14c3c:	df000017 	ldw	fp,0(sp)
   14c40:	dec00204 	addi	sp,sp,8
   14c44:	f800283a 	ret

00014c48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14c48:	defffb04 	addi	sp,sp,-20
   14c4c:	dfc00415 	stw	ra,16(sp)
   14c50:	df000315 	stw	fp,12(sp)
   14c54:	df000304 	addi	fp,sp,12
   14c58:	e13ffd15 	stw	r4,-12(fp)
   14c5c:	e17ffe15 	stw	r5,-8(fp)
   14c60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14c64:	01000074 	movhi	r4,1
   14c68:	21184904 	addi	r4,r4,24868
   14c6c:	e17ffd17 	ldw	r5,-12(fp)
   14c70:	01800044 	movi	r6,1
   14c74:	01c07fc4 	movi	r7,511
   14c78:	0014b880 	call	14b88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14c7c:	01000074 	movhi	r4,1
   14c80:	21184604 	addi	r4,r4,24856
   14c84:	e17ffe17 	ldw	r5,-8(fp)
   14c88:	000d883a 	mov	r6,zero
   14c8c:	01c07fc4 	movi	r7,511
   14c90:	0014b880 	call	14b88 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14c94:	01000074 	movhi	r4,1
   14c98:	21184c04 	addi	r4,r4,24880
   14c9c:	e17fff17 	ldw	r5,-4(fp)
   14ca0:	01800044 	movi	r6,1
   14ca4:	01c07fc4 	movi	r7,511
   14ca8:	0014b880 	call	14b88 <alt_open_fd>
}  
   14cac:	e037883a 	mov	sp,fp
   14cb0:	dfc00117 	ldw	ra,4(sp)
   14cb4:	df000017 	ldw	fp,0(sp)
   14cb8:	dec00204 	addi	sp,sp,8
   14cbc:	f800283a 	ret

00014cc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14cc0:	defffe04 	addi	sp,sp,-8
   14cc4:	dfc00115 	stw	ra,4(sp)
   14cc8:	df000015 	stw	fp,0(sp)
   14ccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14cd0:	00800074 	movhi	r2,1
   14cd4:	109cc704 	addi	r2,r2,29468
   14cd8:	10800017 	ldw	r2,0(r2)
   14cdc:	10000526 	beq	r2,zero,14cf4 <alt_get_errno+0x34>
   14ce0:	00800074 	movhi	r2,1
   14ce4:	109cc704 	addi	r2,r2,29468
   14ce8:	10800017 	ldw	r2,0(r2)
   14cec:	103ee83a 	callr	r2
   14cf0:	00000206 	br	14cfc <alt_get_errno+0x3c>
   14cf4:	008000b4 	movhi	r2,2
   14cf8:	10a36a04 	addi	r2,r2,-29272
}
   14cfc:	e037883a 	mov	sp,fp
   14d00:	dfc00117 	ldw	ra,4(sp)
   14d04:	df000017 	ldw	fp,0(sp)
   14d08:	dec00204 	addi	sp,sp,8
   14d0c:	f800283a 	ret

00014d10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14d10:	defffd04 	addi	sp,sp,-12
   14d14:	df000215 	stw	fp,8(sp)
   14d18:	df000204 	addi	fp,sp,8
   14d1c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14d20:	e0bfff17 	ldw	r2,-4(fp)
   14d24:	10800217 	ldw	r2,8(r2)
   14d28:	10d00034 	orhi	r3,r2,16384
   14d2c:	e0bfff17 	ldw	r2,-4(fp)
   14d30:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14d34:	e03ffe15 	stw	zero,-8(fp)
   14d38:	00001d06 	br	14db0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14d3c:	00800074 	movhi	r2,1
   14d40:	10984604 	addi	r2,r2,24856
   14d44:	e0fffe17 	ldw	r3,-8(fp)
   14d48:	18c00324 	muli	r3,r3,12
   14d4c:	10c5883a 	add	r2,r2,r3
   14d50:	10c00017 	ldw	r3,0(r2)
   14d54:	e0bfff17 	ldw	r2,-4(fp)
   14d58:	10800017 	ldw	r2,0(r2)
   14d5c:	1880111e 	bne	r3,r2,14da4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14d60:	00800074 	movhi	r2,1
   14d64:	10984604 	addi	r2,r2,24856
   14d68:	e0fffe17 	ldw	r3,-8(fp)
   14d6c:	18c00324 	muli	r3,r3,12
   14d70:	18c00204 	addi	r3,r3,8
   14d74:	10c5883a 	add	r2,r2,r3
   14d78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14d7c:	1000090e 	bge	r2,zero,14da4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14d80:	e0bffe17 	ldw	r2,-8(fp)
   14d84:	10c00324 	muli	r3,r2,12
   14d88:	00800074 	movhi	r2,1
   14d8c:	10984604 	addi	r2,r2,24856
   14d90:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14d94:	e0bfff17 	ldw	r2,-4(fp)
   14d98:	18800226 	beq	r3,r2,14da4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14d9c:	00bffcc4 	movi	r2,-13
   14da0:	00000a06 	br	14dcc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14da4:	e0bffe17 	ldw	r2,-8(fp)
   14da8:	10800044 	addi	r2,r2,1
   14dac:	e0bffe15 	stw	r2,-8(fp)
   14db0:	00800074 	movhi	r2,1
   14db4:	109cc604 	addi	r2,r2,29464
   14db8:	10800017 	ldw	r2,0(r2)
   14dbc:	1007883a 	mov	r3,r2
   14dc0:	e0bffe17 	ldw	r2,-8(fp)
   14dc4:	18bfdd2e 	bgeu	r3,r2,14d3c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14dc8:	0005883a 	mov	r2,zero
}
   14dcc:	e037883a 	mov	sp,fp
   14dd0:	df000017 	ldw	fp,0(sp)
   14dd4:	dec00104 	addi	sp,sp,4
   14dd8:	f800283a 	ret

00014ddc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14ddc:	defff604 	addi	sp,sp,-40
   14de0:	dfc00915 	stw	ra,36(sp)
   14de4:	df000815 	stw	fp,32(sp)
   14de8:	df000804 	addi	fp,sp,32
   14dec:	e13ffd15 	stw	r4,-12(fp)
   14df0:	e17ffe15 	stw	r5,-8(fp)
   14df4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14df8:	00bfffc4 	movi	r2,-1
   14dfc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14e00:	00bffb44 	movi	r2,-19
   14e04:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14e08:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14e0c:	e13ffd17 	ldw	r4,-12(fp)
   14e10:	01400074 	movhi	r5,1
   14e14:	295cc404 	addi	r5,r5,29456
   14e18:	00150f00 	call	150f0 <alt_find_dev>
   14e1c:	e0bff815 	stw	r2,-32(fp)
   14e20:	e0bff817 	ldw	r2,-32(fp)
   14e24:	1000051e 	bne	r2,zero,14e3c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14e28:	e13ffd17 	ldw	r4,-12(fp)
   14e2c:	00151800 	call	15180 <alt_find_file>
   14e30:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14e34:	00800044 	movi	r2,1
   14e38:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14e3c:	e0bff817 	ldw	r2,-32(fp)
   14e40:	10002926 	beq	r2,zero,14ee8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14e44:	e13ff817 	ldw	r4,-32(fp)
   14e48:	00152940 	call	15294 <alt_get_fd>
   14e4c:	e0bff915 	stw	r2,-28(fp)
   14e50:	e0bff917 	ldw	r2,-28(fp)
   14e54:	1000030e 	bge	r2,zero,14e64 <open+0x88>
    {
      status = index;
   14e58:	e0bff917 	ldw	r2,-28(fp)
   14e5c:	e0bffa15 	stw	r2,-24(fp)
   14e60:	00002306 	br	14ef0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   14e64:	e0bff917 	ldw	r2,-28(fp)
   14e68:	10c00324 	muli	r3,r2,12
   14e6c:	00800074 	movhi	r2,1
   14e70:	10984604 	addi	r2,r2,24856
   14e74:	1885883a 	add	r2,r3,r2
   14e78:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   14e7c:	e0fffe17 	ldw	r3,-8(fp)
   14e80:	00900034 	movhi	r2,16384
   14e84:	10bfffc4 	addi	r2,r2,-1
   14e88:	1886703a 	and	r3,r3,r2
   14e8c:	e0bffc17 	ldw	r2,-16(fp)
   14e90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   14e94:	e0bffb17 	ldw	r2,-20(fp)
   14e98:	1000051e 	bne	r2,zero,14eb0 <open+0xd4>
   14e9c:	e13ffc17 	ldw	r4,-16(fp)
   14ea0:	0014d100 	call	14d10 <alt_file_locked>
   14ea4:	e0bffa15 	stw	r2,-24(fp)
   14ea8:	e0bffa17 	ldw	r2,-24(fp)
   14eac:	10001016 	blt	r2,zero,14ef0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14eb0:	e0bff817 	ldw	r2,-32(fp)
   14eb4:	10800317 	ldw	r2,12(r2)
   14eb8:	10000826 	beq	r2,zero,14edc <open+0x100>
   14ebc:	e0bff817 	ldw	r2,-32(fp)
   14ec0:	10800317 	ldw	r2,12(r2)
   14ec4:	e13ffc17 	ldw	r4,-16(fp)
   14ec8:	e17ffd17 	ldw	r5,-12(fp)
   14ecc:	e1bffe17 	ldw	r6,-8(fp)
   14ed0:	e1ffff17 	ldw	r7,-4(fp)
   14ed4:	103ee83a 	callr	r2
   14ed8:	00000106 	br	14ee0 <open+0x104>
   14edc:	0005883a 	mov	r2,zero
   14ee0:	e0bffa15 	stw	r2,-24(fp)
   14ee4:	00000206 	br	14ef0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14ee8:	00bffb44 	movi	r2,-19
   14eec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14ef0:	e0bffa17 	ldw	r2,-24(fp)
   14ef4:	1000090e 	bge	r2,zero,14f1c <open+0x140>
  {
    alt_release_fd (index);  
   14ef8:	e13ff917 	ldw	r4,-28(fp)
   14efc:	00136780 	call	13678 <alt_release_fd>
    ALT_ERRNO = -status;
   14f00:	0014cc00 	call	14cc0 <alt_get_errno>
   14f04:	1007883a 	mov	r3,r2
   14f08:	e0bffa17 	ldw	r2,-24(fp)
   14f0c:	0085c83a 	sub	r2,zero,r2
   14f10:	18800015 	stw	r2,0(r3)
    return -1;
   14f14:	00bfffc4 	movi	r2,-1
   14f18:	00000106 	br	14f20 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   14f1c:	e0bff917 	ldw	r2,-28(fp)
}
   14f20:	e037883a 	mov	sp,fp
   14f24:	dfc00117 	ldw	ra,4(sp)
   14f28:	df000017 	ldw	fp,0(sp)
   14f2c:	dec00204 	addi	sp,sp,8
   14f30:	f800283a 	ret

00014f34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14f34:	defffa04 	addi	sp,sp,-24
   14f38:	df000515 	stw	fp,20(sp)
   14f3c:	df000504 	addi	fp,sp,20
   14f40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f44:	0005303a 	rdctl	r2,status
   14f48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f4c:	e0fffc17 	ldw	r3,-16(fp)
   14f50:	00bfff84 	movi	r2,-2
   14f54:	1884703a 	and	r2,r3,r2
   14f58:	1001703a 	wrctl	status,r2
  
  return context;
   14f5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   14f60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   14f64:	e0bfff17 	ldw	r2,-4(fp)
   14f68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   14f6c:	e0bffd17 	ldw	r2,-12(fp)
   14f70:	10800017 	ldw	r2,0(r2)
   14f74:	e0fffd17 	ldw	r3,-12(fp)
   14f78:	18c00117 	ldw	r3,4(r3)
   14f7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   14f80:	e0bffd17 	ldw	r2,-12(fp)
   14f84:	10800117 	ldw	r2,4(r2)
   14f88:	e0fffd17 	ldw	r3,-12(fp)
   14f8c:	18c00017 	ldw	r3,0(r3)
   14f90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   14f94:	e0bffd17 	ldw	r2,-12(fp)
   14f98:	e0fffd17 	ldw	r3,-12(fp)
   14f9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14fa0:	e0bffd17 	ldw	r2,-12(fp)
   14fa4:	e0fffd17 	ldw	r3,-12(fp)
   14fa8:	10c00015 	stw	r3,0(r2)
   14fac:	e0bffb17 	ldw	r2,-20(fp)
   14fb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fb4:	e0bffe17 	ldw	r2,-8(fp)
   14fb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14fbc:	e037883a 	mov	sp,fp
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00104 	addi	sp,sp,4
   14fc8:	f800283a 	ret

00014fcc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14fcc:	defffb04 	addi	sp,sp,-20
   14fd0:	dfc00415 	stw	ra,16(sp)
   14fd4:	df000315 	stw	fp,12(sp)
   14fd8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14fdc:	d0a00c17 	ldw	r2,-32720(gp)
   14fe0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14fe4:	d0a6b217 	ldw	r2,-25912(gp)
   14fe8:	10800044 	addi	r2,r2,1
   14fec:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14ff0:	00002e06 	br	150ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14ff4:	e0bffd17 	ldw	r2,-12(fp)
   14ff8:	10800017 	ldw	r2,0(r2)
   14ffc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15000:	e0bffd17 	ldw	r2,-12(fp)
   15004:	10800403 	ldbu	r2,16(r2)
   15008:	10803fcc 	andi	r2,r2,255
   1500c:	10000426 	beq	r2,zero,15020 <alt_tick+0x54>
   15010:	d0a6b217 	ldw	r2,-25912(gp)
   15014:	1000021e 	bne	r2,zero,15020 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15018:	e0bffd17 	ldw	r2,-12(fp)
   1501c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15020:	e0bffd17 	ldw	r2,-12(fp)
   15024:	10800217 	ldw	r2,8(r2)
   15028:	d0e6b217 	ldw	r3,-25912(gp)
   1502c:	18801d36 	bltu	r3,r2,150a4 <alt_tick+0xd8>
   15030:	e0bffd17 	ldw	r2,-12(fp)
   15034:	10800403 	ldbu	r2,16(r2)
   15038:	10803fcc 	andi	r2,r2,255
   1503c:	1000191e 	bne	r2,zero,150a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15040:	e0bffd17 	ldw	r2,-12(fp)
   15044:	10800317 	ldw	r2,12(r2)
   15048:	e0fffd17 	ldw	r3,-12(fp)
   1504c:	18c00517 	ldw	r3,20(r3)
   15050:	1809883a 	mov	r4,r3
   15054:	103ee83a 	callr	r2
   15058:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1505c:	e0bfff17 	ldw	r2,-4(fp)
   15060:	1000031e 	bne	r2,zero,15070 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15064:	e13ffd17 	ldw	r4,-12(fp)
   15068:	0014f340 	call	14f34 <alt_alarm_stop>
   1506c:	00000d06 	br	150a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15070:	e0bffd17 	ldw	r2,-12(fp)
   15074:	10c00217 	ldw	r3,8(r2)
   15078:	e0bfff17 	ldw	r2,-4(fp)
   1507c:	1887883a 	add	r3,r3,r2
   15080:	e0bffd17 	ldw	r2,-12(fp)
   15084:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15088:	e0bffd17 	ldw	r2,-12(fp)
   1508c:	10c00217 	ldw	r3,8(r2)
   15090:	d0a6b217 	ldw	r2,-25912(gp)
   15094:	1880032e 	bgeu	r3,r2,150a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15098:	e0bffd17 	ldw	r2,-12(fp)
   1509c:	00c00044 	movi	r3,1
   150a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   150a4:	e0bffe17 	ldw	r2,-8(fp)
   150a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   150ac:	e0fffd17 	ldw	r3,-12(fp)
   150b0:	d0a00c04 	addi	r2,gp,-32720
   150b4:	18bfcf1e 	bne	r3,r2,14ff4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   150b8:	0001883a 	nop
}
   150bc:	e037883a 	mov	sp,fp
   150c0:	dfc00117 	ldw	ra,4(sp)
   150c4:	df000017 	ldw	fp,0(sp)
   150c8:	dec00204 	addi	sp,sp,8
   150cc:	f800283a 	ret

000150d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   150d0:	deffff04 	addi	sp,sp,-4
   150d4:	df000015 	stw	fp,0(sp)
   150d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   150dc:	000170fa 	wrctl	ienable,zero
}
   150e0:	e037883a 	mov	sp,fp
   150e4:	df000017 	ldw	fp,0(sp)
   150e8:	dec00104 	addi	sp,sp,4
   150ec:	f800283a 	ret

000150f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   150f0:	defffa04 	addi	sp,sp,-24
   150f4:	dfc00515 	stw	ra,20(sp)
   150f8:	df000415 	stw	fp,16(sp)
   150fc:	df000404 	addi	fp,sp,16
   15100:	e13ffe15 	stw	r4,-8(fp)
   15104:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15108:	e0bfff17 	ldw	r2,-4(fp)
   1510c:	10800017 	ldw	r2,0(r2)
   15110:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15114:	e13ffe17 	ldw	r4,-8(fp)
   15118:	00103740 	call	10374 <strlen>
   1511c:	10800044 	addi	r2,r2,1
   15120:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15124:	00000d06 	br	1515c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15128:	e0bffc17 	ldw	r2,-16(fp)
   1512c:	10c00217 	ldw	r3,8(r2)
   15130:	e0bffd17 	ldw	r2,-12(fp)
   15134:	1809883a 	mov	r4,r3
   15138:	e17ffe17 	ldw	r5,-8(fp)
   1513c:	100d883a 	mov	r6,r2
   15140:	00154bc0 	call	154bc <memcmp>
   15144:	1000021e 	bne	r2,zero,15150 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15148:	e0bffc17 	ldw	r2,-16(fp)
   1514c:	00000706 	br	1516c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15150:	e0bffc17 	ldw	r2,-16(fp)
   15154:	10800017 	ldw	r2,0(r2)
   15158:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1515c:	e0fffc17 	ldw	r3,-16(fp)
   15160:	e0bfff17 	ldw	r2,-4(fp)
   15164:	18bff01e 	bne	r3,r2,15128 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15168:	0005883a 	mov	r2,zero
}
   1516c:	e037883a 	mov	sp,fp
   15170:	dfc00117 	ldw	ra,4(sp)
   15174:	df000017 	ldw	fp,0(sp)
   15178:	dec00204 	addi	sp,sp,8
   1517c:	f800283a 	ret

00015180 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15180:	defffb04 	addi	sp,sp,-20
   15184:	dfc00415 	stw	ra,16(sp)
   15188:	df000315 	stw	fp,12(sp)
   1518c:	df000304 	addi	fp,sp,12
   15190:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15194:	00800074 	movhi	r2,1
   15198:	109cc204 	addi	r2,r2,29448
   1519c:	10800017 	ldw	r2,0(r2)
   151a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   151a4:	00003106 	br	1526c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   151a8:	e0bffd17 	ldw	r2,-12(fp)
   151ac:	10800217 	ldw	r2,8(r2)
   151b0:	1009883a 	mov	r4,r2
   151b4:	00103740 	call	10374 <strlen>
   151b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   151bc:	e0bffd17 	ldw	r2,-12(fp)
   151c0:	10c00217 	ldw	r3,8(r2)
   151c4:	e0bffe17 	ldw	r2,-8(fp)
   151c8:	10bfffc4 	addi	r2,r2,-1
   151cc:	1885883a 	add	r2,r3,r2
   151d0:	10800003 	ldbu	r2,0(r2)
   151d4:	10803fcc 	andi	r2,r2,255
   151d8:	1080201c 	xori	r2,r2,128
   151dc:	10bfe004 	addi	r2,r2,-128
   151e0:	10800bd8 	cmpnei	r2,r2,47
   151e4:	1000031e 	bne	r2,zero,151f4 <alt_find_file+0x74>
    {
      len -= 1;
   151e8:	e0bffe17 	ldw	r2,-8(fp)
   151ec:	10bfffc4 	addi	r2,r2,-1
   151f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   151f4:	e0bffe17 	ldw	r2,-8(fp)
   151f8:	e0ffff17 	ldw	r3,-4(fp)
   151fc:	1885883a 	add	r2,r3,r2
   15200:	10800003 	ldbu	r2,0(r2)
   15204:	10803fcc 	andi	r2,r2,255
   15208:	1080201c 	xori	r2,r2,128
   1520c:	10bfe004 	addi	r2,r2,-128
   15210:	10800be0 	cmpeqi	r2,r2,47
   15214:	1000081e 	bne	r2,zero,15238 <alt_find_file+0xb8>
   15218:	e0bffe17 	ldw	r2,-8(fp)
   1521c:	e0ffff17 	ldw	r3,-4(fp)
   15220:	1885883a 	add	r2,r3,r2
   15224:	10800003 	ldbu	r2,0(r2)
   15228:	10803fcc 	andi	r2,r2,255
   1522c:	1080201c 	xori	r2,r2,128
   15230:	10bfe004 	addi	r2,r2,-128
   15234:	10000a1e 	bne	r2,zero,15260 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   15238:	e0bffd17 	ldw	r2,-12(fp)
   1523c:	10c00217 	ldw	r3,8(r2)
   15240:	e0bffe17 	ldw	r2,-8(fp)
   15244:	1809883a 	mov	r4,r3
   15248:	e17fff17 	ldw	r5,-4(fp)
   1524c:	100d883a 	mov	r6,r2
   15250:	00154bc0 	call	154bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15254:	1000021e 	bne	r2,zero,15260 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15258:	e0bffd17 	ldw	r2,-12(fp)
   1525c:	00000806 	br	15280 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   15260:	e0bffd17 	ldw	r2,-12(fp)
   15264:	10800017 	ldw	r2,0(r2)
   15268:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1526c:	e0fffd17 	ldw	r3,-12(fp)
   15270:	00800074 	movhi	r2,1
   15274:	109cc204 	addi	r2,r2,29448
   15278:	18bfcb1e 	bne	r3,r2,151a8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1527c:	0005883a 	mov	r2,zero
}
   15280:	e037883a 	mov	sp,fp
   15284:	dfc00117 	ldw	ra,4(sp)
   15288:	df000017 	ldw	fp,0(sp)
   1528c:	dec00204 	addi	sp,sp,8
   15290:	f800283a 	ret

00015294 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15294:	defffc04 	addi	sp,sp,-16
   15298:	df000315 	stw	fp,12(sp)
   1529c:	df000304 	addi	fp,sp,12
   152a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   152a4:	00bffa04 	movi	r2,-24
   152a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   152ac:	e03ffd15 	stw	zero,-12(fp)
   152b0:	00001d06 	br	15328 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   152b4:	00800074 	movhi	r2,1
   152b8:	10984604 	addi	r2,r2,24856
   152bc:	e0fffd17 	ldw	r3,-12(fp)
   152c0:	18c00324 	muli	r3,r3,12
   152c4:	10c5883a 	add	r2,r2,r3
   152c8:	10800017 	ldw	r2,0(r2)
   152cc:	1000131e 	bne	r2,zero,1531c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   152d0:	00800074 	movhi	r2,1
   152d4:	10984604 	addi	r2,r2,24856
   152d8:	e0fffd17 	ldw	r3,-12(fp)
   152dc:	18c00324 	muli	r3,r3,12
   152e0:	10c5883a 	add	r2,r2,r3
   152e4:	e0ffff17 	ldw	r3,-4(fp)
   152e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   152ec:	00800074 	movhi	r2,1
   152f0:	109cc604 	addi	r2,r2,29464
   152f4:	10c00017 	ldw	r3,0(r2)
   152f8:	e0bffd17 	ldw	r2,-12(fp)
   152fc:	1880040e 	bge	r3,r2,15310 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   15300:	00800074 	movhi	r2,1
   15304:	109cc604 	addi	r2,r2,29464
   15308:	e0fffd17 	ldw	r3,-12(fp)
   1530c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   15310:	e0bffd17 	ldw	r2,-12(fp)
   15314:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15318:	00000606 	br	15334 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1531c:	e0bffd17 	ldw	r2,-12(fp)
   15320:	10800044 	addi	r2,r2,1
   15324:	e0bffd15 	stw	r2,-12(fp)
   15328:	e0bffd17 	ldw	r2,-12(fp)
   1532c:	10800810 	cmplti	r2,r2,32
   15330:	103fe01e 	bne	r2,zero,152b4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15334:	e0bffe17 	ldw	r2,-8(fp)
}
   15338:	e037883a 	mov	sp,fp
   1533c:	df000017 	ldw	fp,0(sp)
   15340:	dec00104 	addi	sp,sp,4
   15344:	f800283a 	ret

00015348 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15348:	defffb04 	addi	sp,sp,-20
   1534c:	df000415 	stw	fp,16(sp)
   15350:	df000404 	addi	fp,sp,16
   15354:	e13ffe15 	stw	r4,-8(fp)
   15358:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1535c:	e0bfff17 	ldw	r2,-4(fp)
   15360:	10840070 	cmpltui	r2,r2,4097
   15364:	1000021e 	bne	r2,zero,15370 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15368:	00840004 	movi	r2,4096
   1536c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15370:	e0fffe17 	ldw	r3,-8(fp)
   15374:	e0bfff17 	ldw	r2,-4(fp)
   15378:	1885883a 	add	r2,r3,r2
   1537c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15380:	e0bffe17 	ldw	r2,-8(fp)
   15384:	e0bffc15 	stw	r2,-16(fp)
   15388:	00000506 	br	153a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1538c:	e0bffc17 	ldw	r2,-16(fp)
   15390:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15394:	e0bffc17 	ldw	r2,-16(fp)
   15398:	10800804 	addi	r2,r2,32
   1539c:	e0bffc15 	stw	r2,-16(fp)
   153a0:	e0fffc17 	ldw	r3,-16(fp)
   153a4:	e0bffd17 	ldw	r2,-12(fp)
   153a8:	18bff836 	bltu	r3,r2,1538c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   153ac:	e0bffe17 	ldw	r2,-8(fp)
   153b0:	108007cc 	andi	r2,r2,31
   153b4:	10000226 	beq	r2,zero,153c0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   153b8:	e0bffc17 	ldw	r2,-16(fp)
   153bc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   153c0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   153c4:	e037883a 	mov	sp,fp
   153c8:	df000017 	ldw	fp,0(sp)
   153cc:	dec00104 	addi	sp,sp,4
   153d0:	f800283a 	ret

000153d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   153d4:	defffe04 	addi	sp,sp,-8
   153d8:	df000115 	stw	fp,4(sp)
   153dc:	df000104 	addi	fp,sp,4
   153e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   153e4:	e0bfff17 	ldw	r2,-4(fp)
   153e8:	10bffe84 	addi	r2,r2,-6
   153ec:	10c00428 	cmpgeui	r3,r2,16
   153f0:	18001a1e 	bne	r3,zero,1545c <alt_exception_cause_generated_bad_addr+0x88>
   153f4:	100690ba 	slli	r3,r2,2
   153f8:	00800074 	movhi	r2,1
   153fc:	10950304 	addi	r2,r2,21516
   15400:	1885883a 	add	r2,r3,r2
   15404:	10800017 	ldw	r2,0(r2)
   15408:	1000683a 	jmp	r2
   1540c:	0001544c 	andi	zero,zero,1361
   15410:	0001544c 	andi	zero,zero,1361
   15414:	0001545c 	xori	zero,zero,1361
   15418:	0001545c 	xori	zero,zero,1361
   1541c:	0001545c 	xori	zero,zero,1361
   15420:	0001544c 	andi	zero,zero,1361
   15424:	00015454 	movui	zero,1361
   15428:	0001545c 	xori	zero,zero,1361
   1542c:	0001544c 	andi	zero,zero,1361
   15430:	0001544c 	andi	zero,zero,1361
   15434:	0001545c 	xori	zero,zero,1361
   15438:	0001544c 	andi	zero,zero,1361
   1543c:	00015454 	movui	zero,1361
   15440:	0001545c 	xori	zero,zero,1361
   15444:	0001545c 	xori	zero,zero,1361
   15448:	0001544c 	andi	zero,zero,1361
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1544c:	00800044 	movi	r2,1
   15450:	00000306 	br	15460 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15454:	0005883a 	mov	r2,zero
   15458:	00000106 	br	15460 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1545c:	0005883a 	mov	r2,zero
  }
}
   15460:	e037883a 	mov	sp,fp
   15464:	df000017 	ldw	fp,0(sp)
   15468:	dec00104 	addi	sp,sp,4
   1546c:	f800283a 	ret

00015470 <atexit>:
   15470:	200b883a 	mov	r5,r4
   15474:	000d883a 	mov	r6,zero
   15478:	0009883a 	mov	r4,zero
   1547c:	000f883a 	mov	r7,zero
   15480:	00155381 	jmpi	15538 <__register_exitproc>

00015484 <exit>:
   15484:	defffe04 	addi	sp,sp,-8
   15488:	000b883a 	mov	r5,zero
   1548c:	dc000015 	stw	r16,0(sp)
   15490:	dfc00115 	stw	ra,4(sp)
   15494:	2021883a 	mov	r16,r4
   15498:	001564c0 	call	1564c <__call_exitprocs>
   1549c:	00800074 	movhi	r2,1
   154a0:	109cbe04 	addi	r2,r2,29432
   154a4:	11000017 	ldw	r4,0(r2)
   154a8:	20800f17 	ldw	r2,60(r4)
   154ac:	10000126 	beq	r2,zero,154b4 <exit+0x30>
   154b0:	103ee83a 	callr	r2
   154b4:	8009883a 	mov	r4,r16
   154b8:	00157e00 	call	157e0 <_exit>

000154bc <memcmp>:
   154bc:	01c000c4 	movi	r7,3
   154c0:	3980192e 	bgeu	r7,r6,15528 <memcmp+0x6c>
   154c4:	2144b03a 	or	r2,r4,r5
   154c8:	11c4703a 	and	r2,r2,r7
   154cc:	10000f26 	beq	r2,zero,1550c <memcmp+0x50>
   154d0:	20800003 	ldbu	r2,0(r4)
   154d4:	28c00003 	ldbu	r3,0(r5)
   154d8:	10c0151e 	bne	r2,r3,15530 <memcmp+0x74>
   154dc:	31bfff84 	addi	r6,r6,-2
   154e0:	01ffffc4 	movi	r7,-1
   154e4:	00000406 	br	154f8 <memcmp+0x3c>
   154e8:	20800003 	ldbu	r2,0(r4)
   154ec:	28c00003 	ldbu	r3,0(r5)
   154f0:	31bfffc4 	addi	r6,r6,-1
   154f4:	10c00e1e 	bne	r2,r3,15530 <memcmp+0x74>
   154f8:	21000044 	addi	r4,r4,1
   154fc:	29400044 	addi	r5,r5,1
   15500:	31fff91e 	bne	r6,r7,154e8 <memcmp+0x2c>
   15504:	0005883a 	mov	r2,zero
   15508:	f800283a 	ret
   1550c:	20c00017 	ldw	r3,0(r4)
   15510:	28800017 	ldw	r2,0(r5)
   15514:	1880041e 	bne	r3,r2,15528 <memcmp+0x6c>
   15518:	31bfff04 	addi	r6,r6,-4
   1551c:	21000104 	addi	r4,r4,4
   15520:	29400104 	addi	r5,r5,4
   15524:	39bff936 	bltu	r7,r6,1550c <memcmp+0x50>
   15528:	303fe91e 	bne	r6,zero,154d0 <memcmp+0x14>
   1552c:	003ff506 	br	15504 <memcmp+0x48>
   15530:	10c5c83a 	sub	r2,r2,r3
   15534:	f800283a 	ret

00015538 <__register_exitproc>:
   15538:	00800074 	movhi	r2,1
   1553c:	defffa04 	addi	sp,sp,-24
   15540:	109cbe04 	addi	r2,r2,29432
   15544:	dc000315 	stw	r16,12(sp)
   15548:	14000017 	ldw	r16,0(r2)
   1554c:	dc400415 	stw	r17,16(sp)
   15550:	dfc00515 	stw	ra,20(sp)
   15554:	80805217 	ldw	r2,328(r16)
   15558:	2023883a 	mov	r17,r4
   1555c:	10003626 	beq	r2,zero,15638 <__register_exitproc+0x100>
   15560:	10c00117 	ldw	r3,4(r2)
   15564:	010007c4 	movi	r4,31
   15568:	20c00e16 	blt	r4,r3,155a4 <__register_exitproc+0x6c>
   1556c:	1a400044 	addi	r9,r3,1
   15570:	8800211e 	bne	r17,zero,155f8 <__register_exitproc+0xc0>
   15574:	18c00084 	addi	r3,r3,2
   15578:	18c7883a 	add	r3,r3,r3
   1557c:	18c7883a 	add	r3,r3,r3
   15580:	12400115 	stw	r9,4(r2)
   15584:	10c7883a 	add	r3,r2,r3
   15588:	19400015 	stw	r5,0(r3)
   1558c:	0005883a 	mov	r2,zero
   15590:	dfc00517 	ldw	ra,20(sp)
   15594:	dc400417 	ldw	r17,16(sp)
   15598:	dc000317 	ldw	r16,12(sp)
   1559c:	dec00604 	addi	sp,sp,24
   155a0:	f800283a 	ret
   155a4:	00800034 	movhi	r2,0
   155a8:	10800004 	addi	r2,r2,0
   155ac:	10002526 	beq	r2,zero,15644 <__register_exitproc+0x10c>
   155b0:	01006404 	movi	r4,400
   155b4:	d9400015 	stw	r5,0(sp)
   155b8:	d9800115 	stw	r6,4(sp)
   155bc:	d9c00215 	stw	r7,8(sp)
   155c0:	00000000 	call	0 <__alt_mem_ram-0x10000>
   155c4:	d9400017 	ldw	r5,0(sp)
   155c8:	d9800117 	ldw	r6,4(sp)
   155cc:	d9c00217 	ldw	r7,8(sp)
   155d0:	10001c26 	beq	r2,zero,15644 <__register_exitproc+0x10c>
   155d4:	80c05217 	ldw	r3,328(r16)
   155d8:	10000115 	stw	zero,4(r2)
   155dc:	02400044 	movi	r9,1
   155e0:	10c00015 	stw	r3,0(r2)
   155e4:	80805215 	stw	r2,328(r16)
   155e8:	10006215 	stw	zero,392(r2)
   155ec:	10006315 	stw	zero,396(r2)
   155f0:	0007883a 	mov	r3,zero
   155f4:	883fdf26 	beq	r17,zero,15574 <__register_exitproc+0x3c>
   155f8:	18d1883a 	add	r8,r3,r3
   155fc:	4211883a 	add	r8,r8,r8
   15600:	1211883a 	add	r8,r2,r8
   15604:	41802215 	stw	r6,136(r8)
   15608:	01000044 	movi	r4,1
   1560c:	11806217 	ldw	r6,392(r2)
   15610:	20c8983a 	sll	r4,r4,r3
   15614:	310cb03a 	or	r6,r6,r4
   15618:	11806215 	stw	r6,392(r2)
   1561c:	41c04215 	stw	r7,264(r8)
   15620:	01800084 	movi	r6,2
   15624:	89bfd31e 	bne	r17,r6,15574 <__register_exitproc+0x3c>
   15628:	11806317 	ldw	r6,396(r2)
   1562c:	3108b03a 	or	r4,r6,r4
   15630:	11006315 	stw	r4,396(r2)
   15634:	003fcf06 	br	15574 <__register_exitproc+0x3c>
   15638:	80805304 	addi	r2,r16,332
   1563c:	80805215 	stw	r2,328(r16)
   15640:	003fc706 	br	15560 <__register_exitproc+0x28>
   15644:	00bfffc4 	movi	r2,-1
   15648:	003fd106 	br	15590 <__register_exitproc+0x58>

0001564c <__call_exitprocs>:
   1564c:	00800074 	movhi	r2,1
   15650:	109cbe04 	addi	r2,r2,29432
   15654:	10800017 	ldw	r2,0(r2)
   15658:	defff404 	addi	sp,sp,-48
   1565c:	dd800815 	stw	r22,32(sp)
   15660:	d8800015 	stw	r2,0(sp)
   15664:	10805204 	addi	r2,r2,328
   15668:	dd000615 	stw	r20,24(sp)
   1566c:	dc800415 	stw	r18,16(sp)
   15670:	dfc00b15 	stw	ra,44(sp)
   15674:	df000a15 	stw	fp,40(sp)
   15678:	ddc00915 	stw	r23,36(sp)
   1567c:	dd400715 	stw	r21,28(sp)
   15680:	dcc00515 	stw	r19,20(sp)
   15684:	dc400315 	stw	r17,12(sp)
   15688:	dc000215 	stw	r16,8(sp)
   1568c:	2025883a 	mov	r18,r4
   15690:	2829883a 	mov	r20,r5
   15694:	d8800115 	stw	r2,4(sp)
   15698:	05bfffc4 	movi	r22,-1
   1569c:	d8800017 	ldw	r2,0(sp)
   156a0:	14c05217 	ldw	r19,328(r2)
   156a4:	98001d26 	beq	r19,zero,1571c <__call_exitprocs+0xd0>
   156a8:	dd400117 	ldw	r21,4(sp)
   156ac:	98800117 	ldw	r2,4(r19)
   156b0:	173fffc4 	addi	fp,r2,-1
   156b4:	e0000d16 	blt	fp,zero,156ec <__call_exitprocs+0xa0>
   156b8:	14000044 	addi	r16,r2,1
   156bc:	8421883a 	add	r16,r16,r16
   156c0:	8421883a 	add	r16,r16,r16
   156c4:	84402004 	addi	r17,r16,128
   156c8:	9c63883a 	add	r17,r19,r17
   156cc:	9c21883a 	add	r16,r19,r16
   156d0:	a0001e26 	beq	r20,zero,1574c <__call_exitprocs+0x100>
   156d4:	80804017 	ldw	r2,256(r16)
   156d8:	15001c26 	beq	r2,r20,1574c <__call_exitprocs+0x100>
   156dc:	e73fffc4 	addi	fp,fp,-1
   156e0:	843fff04 	addi	r16,r16,-4
   156e4:	8c7fff04 	addi	r17,r17,-4
   156e8:	e5bff91e 	bne	fp,r22,156d0 <__call_exitprocs+0x84>
   156ec:	00800034 	movhi	r2,0
   156f0:	10800004 	addi	r2,r2,0
   156f4:	10000926 	beq	r2,zero,1571c <__call_exitprocs+0xd0>
   156f8:	98800117 	ldw	r2,4(r19)
   156fc:	1000311e 	bne	r2,zero,157c4 <__call_exitprocs+0x178>
   15700:	98800017 	ldw	r2,0(r19)
   15704:	10003426 	beq	r2,zero,157d8 <__call_exitprocs+0x18c>
   15708:	9809883a 	mov	r4,r19
   1570c:	a8800015 	stw	r2,0(r21)
   15710:	00000000 	call	0 <__alt_mem_ram-0x10000>
   15714:	acc00017 	ldw	r19,0(r21)
   15718:	983fe41e 	bne	r19,zero,156ac <__call_exitprocs+0x60>
   1571c:	dfc00b17 	ldw	ra,44(sp)
   15720:	df000a17 	ldw	fp,40(sp)
   15724:	ddc00917 	ldw	r23,36(sp)
   15728:	dd800817 	ldw	r22,32(sp)
   1572c:	dd400717 	ldw	r21,28(sp)
   15730:	dd000617 	ldw	r20,24(sp)
   15734:	dcc00517 	ldw	r19,20(sp)
   15738:	dc800417 	ldw	r18,16(sp)
   1573c:	dc400317 	ldw	r17,12(sp)
   15740:	dc000217 	ldw	r16,8(sp)
   15744:	dec00c04 	addi	sp,sp,48
   15748:	f800283a 	ret
   1574c:	98800117 	ldw	r2,4(r19)
   15750:	80c00017 	ldw	r3,0(r16)
   15754:	10bfffc4 	addi	r2,r2,-1
   15758:	17001526 	beq	r2,fp,157b0 <__call_exitprocs+0x164>
   1575c:	80000015 	stw	zero,0(r16)
   15760:	183fde26 	beq	r3,zero,156dc <__call_exitprocs+0x90>
   15764:	00800044 	movi	r2,1
   15768:	1708983a 	sll	r4,r2,fp
   1576c:	98806217 	ldw	r2,392(r19)
   15770:	9dc00117 	ldw	r23,4(r19)
   15774:	2084703a 	and	r2,r4,r2
   15778:	1000061e 	bne	r2,zero,15794 <__call_exitprocs+0x148>
   1577c:	183ee83a 	callr	r3
   15780:	98800117 	ldw	r2,4(r19)
   15784:	15ffc51e 	bne	r2,r23,1569c <__call_exitprocs+0x50>
   15788:	a8800017 	ldw	r2,0(r21)
   1578c:	14ffd326 	beq	r2,r19,156dc <__call_exitprocs+0x90>
   15790:	003fc206 	br	1569c <__call_exitprocs+0x50>
   15794:	98806317 	ldw	r2,396(r19)
   15798:	2084703a 	and	r2,r4,r2
   1579c:	1000061e 	bne	r2,zero,157b8 <__call_exitprocs+0x16c>
   157a0:	89400017 	ldw	r5,0(r17)
   157a4:	9009883a 	mov	r4,r18
   157a8:	183ee83a 	callr	r3
   157ac:	003ff406 	br	15780 <__call_exitprocs+0x134>
   157b0:	9f000115 	stw	fp,4(r19)
   157b4:	003fea06 	br	15760 <__call_exitprocs+0x114>
   157b8:	89000017 	ldw	r4,0(r17)
   157bc:	183ee83a 	callr	r3
   157c0:	003fef06 	br	15780 <__call_exitprocs+0x134>
   157c4:	98800017 	ldw	r2,0(r19)
   157c8:	982b883a 	mov	r21,r19
   157cc:	1027883a 	mov	r19,r2
   157d0:	983fb61e 	bne	r19,zero,156ac <__call_exitprocs+0x60>
   157d4:	003fd106 	br	1571c <__call_exitprocs+0xd0>
   157d8:	0005883a 	mov	r2,zero
   157dc:	003ffa06 	br	157c8 <__call_exitprocs+0x17c>

000157e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   157e0:	defffd04 	addi	sp,sp,-12
   157e4:	df000215 	stw	fp,8(sp)
   157e8:	df000204 	addi	fp,sp,8
   157ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   157f0:	0001883a 	nop
   157f4:	e0bfff17 	ldw	r2,-4(fp)
   157f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   157fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15800:	10000226 	beq	r2,zero,1580c <_exit+0x2c>
    ALT_SIM_FAIL();
   15804:	002af070 	cmpltui	zero,zero,43969
   15808:	00000106 	br	15810 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1580c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15810:	003fff06 	br	15810 <_exit+0x30>
