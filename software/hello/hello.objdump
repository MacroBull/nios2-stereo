
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010240

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006674 memsz 0x00006674 flags r-x
    LOAD off    0x00007694 vaddr 0x00016694 paddr 0x000181c4 align 2**12
         filesz 0x00001b30 memsz 0x00001b30 flags rw-
    LOAD off    0x00009cf4 vaddr 0x00019cf4 paddr 0x00019cf4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000639c  00010240  00010240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b8  000165dc  000165dc  000075dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b30  00016694  000181c4  00007694  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00019cf4  00019cf4  00009cf4  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00019e48  00019e48  000091c4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000091c4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b90  00000000  00000000  000091e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001a313  00000000  00000000  00009d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000708d  00000000  00000000  0002408b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000079af  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001958  00000000  00000000  00032ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a0e  00000000  00000000  00034420  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f0a  00000000  00000000  00036e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0003bd38  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000698  00000000  00000000  0003bd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003eddf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003ede2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ede5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ede6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003ede7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003edeb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003edef  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003edf3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0003edfc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0003ee00  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0003ee04  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  0003ee07  2**0
                  CONTENTS, READONLY
 29 .jdi          00003431  00000000  00000000  0003ee27  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00038f06  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010240 l    d  .text	00000000 .text
000165dc l    d  .rodata	00000000 .rodata
00016694 l    d  .rwdata	00000000 .rwdata
00019cf4 l    d  .bss	00000000 .bss
00019e48 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../BSP//obj/HAL/src/crt0.o
00010288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00016694 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00010cac l     F .text	00000008 __fp_lock
00010cb4 l     F .text	00000008 __fp_unlock
00010cc8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000132b8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
000133e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013504 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013530 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013630 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013724 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013808 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000139e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000181b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00013c70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013db8 l     F .text	00000038 alt_dev_reg
00017068 l     O .rwdata	00001060 jtag_uart
000180c8 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000140b4 l     F .text	00000204 altera_avalon_jtag_uart_irq
000142b8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00014a90 l     F .text	00000098 altera_avalon_uart_irq
00014b28 l     F .text	000000e0 altera_avalon_uart_rxirq
00014c08 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00014da0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00014fcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000154a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015950 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015a88 l     F .text	00000050 alt_get_errno
00015ad8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019d1c g     O .bss	00000004 alt_instruction_exception_handler
000131ac g     F .text	00000054 _isatty_r
0001392c g     F .text	00000078 alt_main
0001061c g     F .text	000000a8 _puts_r
00019d48 g     O .bss	00000100 alt_irq
00013200 g     F .text	0000005c _lseek_r
000181c4 g       *ABS*	00000000 __flash_rwdata_start
00019e48 g       *ABS*	00000000 __alt_heap_start
00012f3c g     F .text	0000005c __sseek
00010ffc g     F .text	00000010 __sinit
00010770 g     F .text	00000138 __swbuf_r
00010e64 g     F .text	00000068 __sfmoreglue
000139c4 g     F .text	00000020 __malloc_unlock
00012628 g     F .text	0000015c memmove
00010fe4 g     F .text	00000018 _cleanup
00015e98 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00013154 g     F .text	00000058 _fstat_r
00019d00 g     O .bss	00000004 errno
00012eb8 g     F .text	00000008 __seofread
00019d08 g     O .bss	00000004 alt_argv
0002018c g       *ABS*	00000000 _gp
00013c40 g     F .text	00000030 usleep
00016ee8 g     O .rwdata	00000180 alt_fd_list
00015eb8 g     F .text	00000090 alt_find_dev
000124f0 g     F .text	00000138 memcpy
00010cbc g     F .text	0000000c _cleanup_r
00015a10 g     F .text	00000078 alt_io_redirect
000165dc g       *ABS*	00000000 __DTOR_END__
000106c4 g     F .text	00000014 puts
0001619c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000144b4 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000133d4 g     F .text	00000008 .hidden __udivsi3
00013680 g     F .text	000000a4 isatty
00016110 g     F .text	0000008c alt_icache_flush
00019cfc g     O .bss	00000004 __malloc_top_pad
00010000 g       *ABS*	00000000 __alt_mem_ram
00011460 g     F .text	000004c0 __sfvwrite_r
00012e10 g     F .text	00000054 _sbrk_r
0001325c g     F .text	0000005c _read_r
000181ac g     O .rwdata	00000004 alt_max_fd
00013050 g     F .text	000000f0 _fclose_r
00010c7c g     F .text	00000030 fflush
00019cf8 g     O .bss	00000004 __malloc_max_sbrked_mem
00013858 g     F .text	000000d4 lseek
0001818c g     O .rwdata	00000004 _global_impure_ptr
000128a8 g     F .text	00000568 _realloc_r
00019e48 g       *ABS*	00000000 __bss_end
00015860 g     F .text	000000f0 alt_iic_isr_register
00015d94 g     F .text	00000104 alt_tick
000149e8 g     F .text	000000a8 altera_avalon_uart_init
0001101c g     F .text	00000018 __fp_lock_all
00015814 g     F .text	0000004c alt_ic_irq_enabled
00015cfc g     F .text	00000098 alt_alarm_stop
00019d10 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d0 alt_irq_handler
00016ec0 g     O .rwdata	00000028 alt_dev_null
00015460 g     F .text	00000044 alt_dcache_flush_all
000181c4 g       *ABS*	00000000 __ram_rwdata_end
000181a4 g     O .rwdata	00000008 alt_dev_list
00010304 g     F .text	00000044 _fputc_r
00013cc0 g     F .text	000000f8 write
000104b0 g     F .text	000000a0 _putc_r
00016694 g       *ABS*	00000000 __ram_rodata_end
00013580 g     F .text	000000b0 fstat
000133dc g     F .text	00000008 .hidden __umodsi3
00019e48 g       *ABS*	00000000 end
0001501c g     F .text	000001ac altera_avalon_uart_write
00013ff0 g     F .text	000000c4 altera_avalon_jtag_uart_init
000101cc g     F .exceptions	00000074 alt_instruction_exception_entry
000165dc g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00014938 g     F .text	00000060 altera_avalon_uart_write_fd
00014998 g     F .text	00000050 altera_avalon_uart_close_fd
000146c0 g     F .text	00000218 altera_avalon_jtag_uart_write
0001100c g     F .text	00000004 __sfp_lock_acquire
00012408 g     F .text	000000e8 memchr
00011170 g     F .text	000002f0 _free_r
00016414 g     F .text	00000194 __call_exitprocs
00018194 g     O .rwdata	00000004 __malloc_sbrk_base
00010240 g     F .text	0000004c _start
00019d14 g     O .bss	00000004 _alt_tick_rate
00019d18 g     O .bss	00000004 _alt_nticks
00013a34 g     F .text	000000fc read
00013e24 g     F .text	00000068 alt_sys_init
00016300 g     F .text	00000114 __register_exitproc
00014360 g     F .text	00000068 altera_avalon_jtag_uart_close
00016694 g       *ABS*	00000000 __ram_rwdata_start
000165dc g       *ABS*	00000000 __ram_rodata_start
00019d20 g     O .bss	00000028 __malloc_current_mallinfo
00013e8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001605c g     F .text	000000b4 alt_get_fd
00015308 g     F .text	00000158 alt_busy_sleep
00012ffc g     F .text	00000054 _close_r
00016284 g     F .text	0000007c memcmp
00013f4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019e48 g       *ABS*	00000000 __alt_stack_base
00013f9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000103a4 g     F .text	000000cc _fwrite_r
000108c4 g     F .text	00000154 __swsetup_r
00010ecc g     F .text	00000118 __sfp
00016ab8 g     O .rwdata	00000408 __malloc_av_
00011018 g     F .text	00000004 __sinit_lock_release
00012e64 g     F .text	00000054 __sread
00015f48 g     F .text	00000114 alt_find_file
000154f4 g     F .text	000000a4 alt_dev_llist_insert
000139a4 g     F .text	00000020 __malloc_lock
00013b90 g     F .text	000000b0 sbrk
00010c20 g     F .text	0000005c _fflush_r
00019cf4 g       *ABS*	00000000 __bss_start
00012784 g     F .text	00000124 memset
0001028c g     F .text	00000078 main
00019d0c g     O .bss	00000004 alt_envp
00019cf4 g     O .bss	00000004 __malloc_max_total_mem
00013eec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000108a8 g     F .text	0000001c __swbuf
00012f98 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00013140 g     F .text	00000014 fclose
00011c60 g     F .text	000007a8 _malloc_r
000181b0 g     O .rwdata	00000004 alt_errno
00011920 g     F .text	000000c4 _fwalk
00010550 g     F .text	000000cc putc
00013324 g     F .text	00000054 .hidden __divsi3
0001104c g     F .text	00000124 _malloc_trim_r
000165dc g       *ABS*	00000000 __CTOR_END__
000165dc g       *ABS*	00000000 __flash_rodata_start
000165dc g       *ABS*	00000000 __DTOR_LIST__
00013df0 g     F .text	00000034 alt_irq_init
00013b30 g     F .text	00000060 alt_release_fd
00016238 g     F .text	00000014 atexit
00012fa0 g     F .text	0000005c _write_r
00018190 g     O .rwdata	00000004 _impure_ptr
00019d04 g     O .bss	00000004 alt_argc
00010a18 g     F .text	00000208 __sflush_r
000155f4 g     F .text	0000005c _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00011034 g     F .text	00000018 __fp_unlock_all
00010348 g     F .text	0000005c fputc
0001819c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015680 g     F .text	00000050 alt_ic_isr_register
00010470 g     F .text	00000040 fwrite
000181c4 g       *ABS*	00000000 _edata
000148d8 g     F .text	00000060 altera_avalon_uart_read_fd
00019e48 g       *ABS*	00000000 _end
00010240 g       *ABS*	00000000 __ram_exceptions_end
000143c8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00015770 g     F .text	000000a4 alt_ic_irq_disable
00012ec0 g     F .text	0000007c __swrite
00018198 g     O .rwdata	00000004 __malloc_trim_threshold
0001624c g     F .text	00000038 exit
000119e4 g     F .text	000000c4 _fwalk_reent
00013378 g     F .text	0000005c .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00011010 g     F .text	00000004 __sfp_lock_release
00014d4c g     F .text	00000054 altera_avalon_uart_close
000165a8 g     F .text	00000034 _exit
000151c8 g     F .text	00000140 alt_alarm_start
00011aa8 g     F .text	000001b8 __smakebuf_r
000106d8 g     F .text	00000098 strlen
00015ba4 g     F .text	00000158 open
00015650 g     F .text	00000030 alt_icache_flush_all
000181b8 g     O .rwdata	00000004 alt_priority_mask
000156d0 g     F .text	000000a0 alt_ic_irq_enable
00014df0 g     F .text	000001dc altera_avalon_uart_read
000181bc g     O .rwdata	00000008 alt_alarm_list
00015598 g     F .text	0000005c _do_ctors
00013434 g     F .text	000000d0 close
00013788 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00011014 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409014 	ori	at,at,576
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_ram-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101cc0 	call	101cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a75204 	addi	r2,r2,-25272
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a75204 	addi	r2,r2,-25272
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	21000104 	addi	r4,r4,4
   10168:	1105883a 	add	r2,r2,r4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	e037883a 	mov	sp,fp
   101bc:	dfc00117 	ldw	ra,4(sp)
   101c0:	df000017 	ldw	fp,0(sp)
   101c4:	dec00204 	addi	sp,sp,8
   101c8:	f800283a 	ret

000101cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101cc:	defffb04 	addi	sp,sp,-20
   101d0:	dfc00415 	stw	ra,16(sp)
   101d4:	df000315 	stw	fp,12(sp)
   101d8:	df000304 	addi	fp,sp,12
   101dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e0:	000531fa 	rdctl	r2,exception
   101e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101e8:	e0bffd17 	ldw	r2,-12(fp)
   101ec:	10801f0c 	andi	r2,r2,124
   101f0:	1004d0ba 	srli	r2,r2,2
   101f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101f8:	0005333a 	rdctl	r2,badaddr
   101fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10200:	d0a6e417 	ldw	r2,-25712(gp)
   10204:	10000726 	beq	r2,zero,10224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10208:	d0a6e417 	ldw	r2,-25712(gp)
   1020c:	e0fffd17 	ldw	r3,-12(fp)
   10210:	1809883a 	mov	r4,r3
   10214:	e17fff17 	ldw	r5,-4(fp)
   10218:	e1bffe17 	ldw	r6,-8(fp)
   1021c:	103ee83a 	callr	r2
   10220:	00000206 	br	1022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10228:	0005883a 	mov	r2,zero
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

Disassembly of section .text:

00010240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1024c:	00bffd16 	blt	zero,r2,10244 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10250:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10254:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10258:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1025c:	d6806314 	ori	gp,gp,396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10260:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10264:	10a73d14 	ori	r2,r2,40180

    movhi r3, %hi(__bss_end)
   10268:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1026c:	18e79214 	ori	r3,r3,40520

    beq r2, r3, 1f
   10270:	10c00326 	beq	r2,r3,10280 <_start+0x40>

0:
    stw zero, (r2)
   10274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1027c:	10fffd36 	bltu	r2,r3,10274 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10280:	00137880 	call	13788 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10284:	001392c0 	call	1392c <alt_main>

00010288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10288:	003fff06 	br	10288 <alt_after_alt_main>

0001028c <main>:
#include <stdio.h>



int main()
{
   1028c:	defffd04 	addi	sp,sp,-12
   10290:	dfc00215 	stw	ra,8(sp)
   10294:	df000115 	stw	fp,4(sp)
   10298:	df000104 	addi	fp,sp,4

while (1){
  printf("Hello from Nios II!1231231231432u4ieuripwmriwe;criwpwuieropwruicw;mwriwc;ermcwi;amrcija;smfisa;dm\n");
   1029c:	01000074 	movhi	r4,1
   102a0:	21197704 	addi	r4,r4,26076
   102a4:	00106c40 	call	106c4 <puts>
  usleep(1000*1000);
   102a8:	010003f4 	movhi	r4,15
   102ac:	21109004 	addi	r4,r4,16960
   102b0:	0013c400 	call	13c40 <usleep>
  char c;
  fputc(stderr, c);
   102b4:	008000b4 	movhi	r2,2
   102b8:	10a06404 	addi	r2,r2,-32368
   102bc:	10800017 	ldw	r2,0(r2)
   102c0:	10800317 	ldw	r2,12(r2)
   102c4:	1007883a 	mov	r3,r2
   102c8:	e0bfff07 	ldb	r2,-4(fp)
   102cc:	1809883a 	mov	r4,r3
   102d0:	100b883a 	mov	r5,r2
   102d4:	00103480 	call	10348 <fputc>
  fprintf(stderr, "233\n");
   102d8:	008000b4 	movhi	r2,2
   102dc:	10a06404 	addi	r2,r2,-32368
   102e0:	10800017 	ldw	r2,0(r2)
   102e4:	10800317 	ldw	r2,12(r2)
   102e8:	01000074 	movhi	r4,1
   102ec:	21199004 	addi	r4,r4,26176
   102f0:	01400044 	movi	r5,1
   102f4:	01800104 	movi	r6,4
   102f8:	100f883a 	mov	r7,r2
   102fc:	00104700 	call	10470 <fwrite>
}
   10300:	003fe606 	br	1029c <main+0x10>

00010304 <_fputc_r>:
   10304:	defffc04 	addi	sp,sp,-16
   10308:	dc000215 	stw	r16,8(sp)
   1030c:	dfc00315 	stw	ra,12(sp)
   10310:	2021883a 	mov	r16,r4
   10314:	20000726 	beq	r4,zero,10334 <_fputc_r+0x30>
   10318:	20800e17 	ldw	r2,56(r4)
   1031c:	1000051e 	bne	r2,zero,10334 <_fputc_r+0x30>
   10320:	d9400015 	stw	r5,0(sp)
   10324:	d9800115 	stw	r6,4(sp)
   10328:	0010ffc0 	call	10ffc <__sinit>
   1032c:	d9800117 	ldw	r6,4(sp)
   10330:	d9400017 	ldw	r5,0(sp)
   10334:	8009883a 	mov	r4,r16
   10338:	dfc00317 	ldw	ra,12(sp)
   1033c:	dc000217 	ldw	r16,8(sp)
   10340:	dec00404 	addi	sp,sp,16
   10344:	00104b01 	jmpi	104b0 <_putc_r>

00010348 <fputc>:
   10348:	008000b4 	movhi	r2,2
   1034c:	defffc04 	addi	sp,sp,-16
   10350:	10a06404 	addi	r2,r2,-32368
   10354:	dc000115 	stw	r16,4(sp)
   10358:	14000017 	ldw	r16,0(r2)
   1035c:	dc400215 	stw	r17,8(sp)
   10360:	dfc00315 	stw	ra,12(sp)
   10364:	2023883a 	mov	r17,r4
   10368:	280d883a 	mov	r6,r5
   1036c:	80000626 	beq	r16,zero,10388 <fputc+0x40>
   10370:	80800e17 	ldw	r2,56(r16)
   10374:	1000041e 	bne	r2,zero,10388 <fputc+0x40>
   10378:	8009883a 	mov	r4,r16
   1037c:	d9400015 	stw	r5,0(sp)
   10380:	0010ffc0 	call	10ffc <__sinit>
   10384:	d9800017 	ldw	r6,0(sp)
   10388:	8009883a 	mov	r4,r16
   1038c:	880b883a 	mov	r5,r17
   10390:	dfc00317 	ldw	ra,12(sp)
   10394:	dc400217 	ldw	r17,8(sp)
   10398:	dc000117 	ldw	r16,4(sp)
   1039c:	dec00404 	addi	sp,sp,16
   103a0:	00104b01 	jmpi	104b0 <_putc_r>

000103a4 <_fwrite_r>:
   103a4:	defff504 	addi	sp,sp,-44
   103a8:	dcc00815 	stw	r19,32(sp)
   103ac:	39a7383a 	mul	r19,r7,r6
   103b0:	d8800304 	addi	r2,sp,12
   103b4:	d8800015 	stw	r2,0(sp)
   103b8:	00800044 	movi	r2,1
   103bc:	dd000915 	stw	r20,36(sp)
   103c0:	dc800715 	stw	r18,28(sp)
   103c4:	dc400615 	stw	r17,24(sp)
   103c8:	d9400315 	stw	r5,12(sp)
   103cc:	dfc00a15 	stw	ra,40(sp)
   103d0:	dcc00415 	stw	r19,16(sp)
   103d4:	dcc00215 	stw	r19,8(sp)
   103d8:	d8800115 	stw	r2,4(sp)
   103dc:	3029883a 	mov	r20,r6
   103e0:	3823883a 	mov	r17,r7
   103e4:	2025883a 	mov	r18,r4
   103e8:	d9400b17 	ldw	r5,44(sp)
   103ec:	20000226 	beq	r4,zero,103f8 <_fwrite_r+0x54>
   103f0:	20800e17 	ldw	r2,56(r4)
   103f4:	10001a26 	beq	r2,zero,10460 <_fwrite_r+0xbc>
   103f8:	2880030b 	ldhu	r2,12(r5)
   103fc:	10c8000c 	andi	r3,r2,8192
   10400:	1800061e 	bne	r3,zero,1041c <_fwrite_r+0x78>
   10404:	29001917 	ldw	r4,100(r5)
   10408:	00f7ffc4 	movi	r3,-8193
   1040c:	10880014 	ori	r2,r2,8192
   10410:	20c6703a 	and	r3,r4,r3
   10414:	2880030d 	sth	r2,12(r5)
   10418:	28c01915 	stw	r3,100(r5)
   1041c:	9009883a 	mov	r4,r18
   10420:	d80d883a 	mov	r6,sp
   10424:	00114600 	call	11460 <__sfvwrite_r>
   10428:	10000b26 	beq	r2,zero,10458 <_fwrite_r+0xb4>
   1042c:	d9000217 	ldw	r4,8(sp)
   10430:	a00b883a 	mov	r5,r20
   10434:	9909c83a 	sub	r4,r19,r4
   10438:	00133d40 	call	133d4 <__udivsi3>
   1043c:	dfc00a17 	ldw	ra,40(sp)
   10440:	dd000917 	ldw	r20,36(sp)
   10444:	dcc00817 	ldw	r19,32(sp)
   10448:	dc800717 	ldw	r18,28(sp)
   1044c:	dc400617 	ldw	r17,24(sp)
   10450:	dec00b04 	addi	sp,sp,44
   10454:	f800283a 	ret
   10458:	8805883a 	mov	r2,r17
   1045c:	003ff706 	br	1043c <_fwrite_r+0x98>
   10460:	d9400515 	stw	r5,20(sp)
   10464:	0010ffc0 	call	10ffc <__sinit>
   10468:	d9400517 	ldw	r5,20(sp)
   1046c:	003fe206 	br	103f8 <_fwrite_r+0x54>

00010470 <fwrite>:
   10470:	008000b4 	movhi	r2,2
   10474:	10a06404 	addi	r2,r2,-32368
   10478:	2011883a 	mov	r8,r4
   1047c:	11000017 	ldw	r4,0(r2)
   10480:	defffe04 	addi	sp,sp,-8
   10484:	2807883a 	mov	r3,r5
   10488:	3005883a 	mov	r2,r6
   1048c:	d9c00015 	stw	r7,0(sp)
   10490:	400b883a 	mov	r5,r8
   10494:	180d883a 	mov	r6,r3
   10498:	100f883a 	mov	r7,r2
   1049c:	dfc00115 	stw	ra,4(sp)
   104a0:	00103a40 	call	103a4 <_fwrite_r>
   104a4:	dfc00117 	ldw	ra,4(sp)
   104a8:	dec00204 	addi	sp,sp,8
   104ac:	f800283a 	ret

000104b0 <_putc_r>:
   104b0:	defffc04 	addi	sp,sp,-16
   104b4:	dc000215 	stw	r16,8(sp)
   104b8:	dfc00315 	stw	ra,12(sp)
   104bc:	2021883a 	mov	r16,r4
   104c0:	20000226 	beq	r4,zero,104cc <_putc_r+0x1c>
   104c4:	20800e17 	ldw	r2,56(r4)
   104c8:	10001b26 	beq	r2,zero,10538 <_putc_r+0x88>
   104cc:	30800217 	ldw	r2,8(r6)
   104d0:	10bfffc4 	addi	r2,r2,-1
   104d4:	30800215 	stw	r2,8(r6)
   104d8:	10000a16 	blt	r2,zero,10504 <_putc_r+0x54>
   104dc:	30800017 	ldw	r2,0(r6)
   104e0:	11400005 	stb	r5,0(r2)
   104e4:	30800017 	ldw	r2,0(r6)
   104e8:	10c00044 	addi	r3,r2,1
   104ec:	30c00015 	stw	r3,0(r6)
   104f0:	10800003 	ldbu	r2,0(r2)
   104f4:	dfc00317 	ldw	ra,12(sp)
   104f8:	dc000217 	ldw	r16,8(sp)
   104fc:	dec00404 	addi	sp,sp,16
   10500:	f800283a 	ret
   10504:	30c00617 	ldw	r3,24(r6)
   10508:	10c00616 	blt	r2,r3,10524 <_putc_r+0x74>
   1050c:	30800017 	ldw	r2,0(r6)
   10510:	00c00284 	movi	r3,10
   10514:	11400005 	stb	r5,0(r2)
   10518:	30800017 	ldw	r2,0(r6)
   1051c:	11400003 	ldbu	r5,0(r2)
   10520:	28fff11e 	bne	r5,r3,104e8 <_putc_r+0x38>
   10524:	8009883a 	mov	r4,r16
   10528:	dfc00317 	ldw	ra,12(sp)
   1052c:	dc000217 	ldw	r16,8(sp)
   10530:	dec00404 	addi	sp,sp,16
   10534:	00107701 	jmpi	10770 <__swbuf_r>
   10538:	d9400015 	stw	r5,0(sp)
   1053c:	d9800115 	stw	r6,4(sp)
   10540:	0010ffc0 	call	10ffc <__sinit>
   10544:	d9800117 	ldw	r6,4(sp)
   10548:	d9400017 	ldw	r5,0(sp)
   1054c:	003fdf06 	br	104cc <_putc_r+0x1c>

00010550 <putc>:
   10550:	008000b4 	movhi	r2,2
   10554:	defffc04 	addi	sp,sp,-16
   10558:	10a06404 	addi	r2,r2,-32368
   1055c:	dc400115 	stw	r17,4(sp)
   10560:	14400017 	ldw	r17,0(r2)
   10564:	dc800215 	stw	r18,8(sp)
   10568:	dc000015 	stw	r16,0(sp)
   1056c:	dfc00315 	stw	ra,12(sp)
   10570:	2025883a 	mov	r18,r4
   10574:	2821883a 	mov	r16,r5
   10578:	88000226 	beq	r17,zero,10584 <putc+0x34>
   1057c:	88800e17 	ldw	r2,56(r17)
   10580:	10001a26 	beq	r2,zero,105ec <putc+0x9c>
   10584:	80800217 	ldw	r2,8(r16)
   10588:	10bfffc4 	addi	r2,r2,-1
   1058c:	80800215 	stw	r2,8(r16)
   10590:	10000c16 	blt	r2,zero,105c4 <putc+0x74>
   10594:	80800017 	ldw	r2,0(r16)
   10598:	14800005 	stb	r18,0(r2)
   1059c:	80800017 	ldw	r2,0(r16)
   105a0:	10c00044 	addi	r3,r2,1
   105a4:	80c00015 	stw	r3,0(r16)
   105a8:	10800003 	ldbu	r2,0(r2)
   105ac:	dfc00317 	ldw	ra,12(sp)
   105b0:	dc800217 	ldw	r18,8(sp)
   105b4:	dc400117 	ldw	r17,4(sp)
   105b8:	dc000017 	ldw	r16,0(sp)
   105bc:	dec00404 	addi	sp,sp,16
   105c0:	f800283a 	ret
   105c4:	80c00617 	ldw	r3,24(r16)
   105c8:	10c00b16 	blt	r2,r3,105f8 <putc+0xa8>
   105cc:	80800017 	ldw	r2,0(r16)
   105d0:	00c00284 	movi	r3,10
   105d4:	14800005 	stb	r18,0(r2)
   105d8:	80800017 	ldw	r2,0(r16)
   105dc:	11400003 	ldbu	r5,0(r2)
   105e0:	28ffef1e 	bne	r5,r3,105a0 <putc+0x50>
   105e4:	8809883a 	mov	r4,r17
   105e8:	00000506 	br	10600 <putc+0xb0>
   105ec:	8809883a 	mov	r4,r17
   105f0:	0010ffc0 	call	10ffc <__sinit>
   105f4:	003fe306 	br	10584 <putc+0x34>
   105f8:	8809883a 	mov	r4,r17
   105fc:	900b883a 	mov	r5,r18
   10600:	800d883a 	mov	r6,r16
   10604:	dfc00317 	ldw	ra,12(sp)
   10608:	dc800217 	ldw	r18,8(sp)
   1060c:	dc400117 	ldw	r17,4(sp)
   10610:	dc000017 	ldw	r16,0(sp)
   10614:	dec00404 	addi	sp,sp,16
   10618:	00107701 	jmpi	10770 <__swbuf_r>

0001061c <_puts_r>:
   1061c:	defff604 	addi	sp,sp,-40
   10620:	dc000715 	stw	r16,28(sp)
   10624:	2021883a 	mov	r16,r4
   10628:	2809883a 	mov	r4,r5
   1062c:	dc400815 	stw	r17,32(sp)
   10630:	dfc00915 	stw	ra,36(sp)
   10634:	2823883a 	mov	r17,r5
   10638:	00106d80 	call	106d8 <strlen>
   1063c:	81400217 	ldw	r5,8(r16)
   10640:	11000044 	addi	r4,r2,1
   10644:	d8800115 	stw	r2,4(sp)
   10648:	00800074 	movhi	r2,1
   1064c:	2980030b 	ldhu	r6,12(r5)
   10650:	10999304 	addi	r2,r2,26188
   10654:	d8800215 	stw	r2,8(sp)
   10658:	00800044 	movi	r2,1
   1065c:	d8800315 	stw	r2,12(sp)
   10660:	00800084 	movi	r2,2
   10664:	d8800515 	stw	r2,20(sp)
   10668:	dc400015 	stw	r17,0(sp)
   1066c:	d9000615 	stw	r4,24(sp)
   10670:	dec00415 	stw	sp,16(sp)
   10674:	3088000c 	andi	r2,r6,8192
   10678:	1000061e 	bne	r2,zero,10694 <_puts_r+0x78>
   1067c:	29001917 	ldw	r4,100(r5)
   10680:	00b7ffc4 	movi	r2,-8193
   10684:	31880014 	ori	r6,r6,8192
   10688:	2084703a 	and	r2,r4,r2
   1068c:	2980030d 	sth	r6,12(r5)
   10690:	28801915 	stw	r2,100(r5)
   10694:	8009883a 	mov	r4,r16
   10698:	d9800404 	addi	r6,sp,16
   1069c:	00114600 	call	11460 <__sfvwrite_r>
   106a0:	1000061e 	bne	r2,zero,106bc <_puts_r+0xa0>
   106a4:	00800284 	movi	r2,10
   106a8:	dfc00917 	ldw	ra,36(sp)
   106ac:	dc400817 	ldw	r17,32(sp)
   106b0:	dc000717 	ldw	r16,28(sp)
   106b4:	dec00a04 	addi	sp,sp,40
   106b8:	f800283a 	ret
   106bc:	00bfffc4 	movi	r2,-1
   106c0:	003ff906 	br	106a8 <_puts_r+0x8c>

000106c4 <puts>:
   106c4:	008000b4 	movhi	r2,2
   106c8:	10a06404 	addi	r2,r2,-32368
   106cc:	200b883a 	mov	r5,r4
   106d0:	11000017 	ldw	r4,0(r2)
   106d4:	001061c1 	jmpi	1061c <_puts_r>

000106d8 <strlen>:
   106d8:	208000cc 	andi	r2,r4,3
   106dc:	10002026 	beq	r2,zero,10760 <strlen+0x88>
   106e0:	20800007 	ldb	r2,0(r4)
   106e4:	10002026 	beq	r2,zero,10768 <strlen+0x90>
   106e8:	2005883a 	mov	r2,r4
   106ec:	00000206 	br	106f8 <strlen+0x20>
   106f0:	10c00007 	ldb	r3,0(r2)
   106f4:	18001826 	beq	r3,zero,10758 <strlen+0x80>
   106f8:	10800044 	addi	r2,r2,1
   106fc:	10c000cc 	andi	r3,r2,3
   10700:	183ffb1e 	bne	r3,zero,106f0 <strlen+0x18>
   10704:	10c00017 	ldw	r3,0(r2)
   10708:	01ffbff4 	movhi	r7,65279
   1070c:	39ffbfc4 	addi	r7,r7,-257
   10710:	00ca303a 	nor	r5,zero,r3
   10714:	01a02074 	movhi	r6,32897
   10718:	19c7883a 	add	r3,r3,r7
   1071c:	31a02004 	addi	r6,r6,-32640
   10720:	1946703a 	and	r3,r3,r5
   10724:	1986703a 	and	r3,r3,r6
   10728:	1800091e 	bne	r3,zero,10750 <strlen+0x78>
   1072c:	10800104 	addi	r2,r2,4
   10730:	10c00017 	ldw	r3,0(r2)
   10734:	19cb883a 	add	r5,r3,r7
   10738:	00c6303a 	nor	r3,zero,r3
   1073c:	28c6703a 	and	r3,r5,r3
   10740:	1986703a 	and	r3,r3,r6
   10744:	183ff926 	beq	r3,zero,1072c <strlen+0x54>
   10748:	00000106 	br	10750 <strlen+0x78>
   1074c:	10800044 	addi	r2,r2,1
   10750:	10c00007 	ldb	r3,0(r2)
   10754:	183ffd1e 	bne	r3,zero,1074c <strlen+0x74>
   10758:	1105c83a 	sub	r2,r2,r4
   1075c:	f800283a 	ret
   10760:	2005883a 	mov	r2,r4
   10764:	003fe706 	br	10704 <strlen+0x2c>
   10768:	0005883a 	mov	r2,zero
   1076c:	f800283a 	ret

00010770 <__swbuf_r>:
   10770:	defffc04 	addi	sp,sp,-16
   10774:	dc800215 	stw	r18,8(sp)
   10778:	dc400115 	stw	r17,4(sp)
   1077c:	dc000015 	stw	r16,0(sp)
   10780:	dfc00315 	stw	ra,12(sp)
   10784:	2025883a 	mov	r18,r4
   10788:	2823883a 	mov	r17,r5
   1078c:	3021883a 	mov	r16,r6
   10790:	20000226 	beq	r4,zero,1079c <__swbuf_r+0x2c>
   10794:	20800e17 	ldw	r2,56(r4)
   10798:	10004126 	beq	r2,zero,108a0 <__swbuf_r+0x130>
   1079c:	80c00617 	ldw	r3,24(r16)
   107a0:	8180030b 	ldhu	r6,12(r16)
   107a4:	80c00215 	stw	r3,8(r16)
   107a8:	30c0020c 	andi	r3,r6,8
   107ac:	18003526 	beq	r3,zero,10884 <__swbuf_r+0x114>
   107b0:	80c00417 	ldw	r3,16(r16)
   107b4:	18003326 	beq	r3,zero,10884 <__swbuf_r+0x114>
   107b8:	3088000c 	andi	r2,r6,8192
   107bc:	8c403fcc 	andi	r17,r17,255
   107c0:	10001726 	beq	r2,zero,10820 <__swbuf_r+0xb0>
   107c4:	80800017 	ldw	r2,0(r16)
   107c8:	81000517 	ldw	r4,20(r16)
   107cc:	10c7c83a 	sub	r3,r2,r3
   107d0:	19001d0e 	bge	r3,r4,10848 <__swbuf_r+0xd8>
   107d4:	18c00044 	addi	r3,r3,1
   107d8:	81400217 	ldw	r5,8(r16)
   107dc:	11000044 	addi	r4,r2,1
   107e0:	81000015 	stw	r4,0(r16)
   107e4:	297fffc4 	addi	r5,r5,-1
   107e8:	81400215 	stw	r5,8(r16)
   107ec:	14400005 	stb	r17,0(r2)
   107f0:	80800517 	ldw	r2,20(r16)
   107f4:	10c01d26 	beq	r2,r3,1086c <__swbuf_r+0xfc>
   107f8:	8080030b 	ldhu	r2,12(r16)
   107fc:	1080004c 	andi	r2,r2,1
   10800:	1000181e 	bne	r2,zero,10864 <__swbuf_r+0xf4>
   10804:	8805883a 	mov	r2,r17
   10808:	dfc00317 	ldw	ra,12(sp)
   1080c:	dc800217 	ldw	r18,8(sp)
   10810:	dc400117 	ldw	r17,4(sp)
   10814:	dc000017 	ldw	r16,0(sp)
   10818:	dec00404 	addi	sp,sp,16
   1081c:	f800283a 	ret
   10820:	81001917 	ldw	r4,100(r16)
   10824:	00b7ffc4 	movi	r2,-8193
   10828:	31880014 	ori	r6,r6,8192
   1082c:	2084703a 	and	r2,r4,r2
   10830:	80801915 	stw	r2,100(r16)
   10834:	80800017 	ldw	r2,0(r16)
   10838:	81000517 	ldw	r4,20(r16)
   1083c:	8180030d 	sth	r6,12(r16)
   10840:	10c7c83a 	sub	r3,r2,r3
   10844:	193fe316 	blt	r3,r4,107d4 <__swbuf_r+0x64>
   10848:	9009883a 	mov	r4,r18
   1084c:	800b883a 	mov	r5,r16
   10850:	0010c200 	call	10c20 <_fflush_r>
   10854:	1000091e 	bne	r2,zero,1087c <__swbuf_r+0x10c>
   10858:	80800017 	ldw	r2,0(r16)
   1085c:	00c00044 	movi	r3,1
   10860:	003fdd06 	br	107d8 <__swbuf_r+0x68>
   10864:	00800284 	movi	r2,10
   10868:	88bfe61e 	bne	r17,r2,10804 <__swbuf_r+0x94>
   1086c:	9009883a 	mov	r4,r18
   10870:	800b883a 	mov	r5,r16
   10874:	0010c200 	call	10c20 <_fflush_r>
   10878:	103fe226 	beq	r2,zero,10804 <__swbuf_r+0x94>
   1087c:	00bfffc4 	movi	r2,-1
   10880:	003fe106 	br	10808 <__swbuf_r+0x98>
   10884:	9009883a 	mov	r4,r18
   10888:	800b883a 	mov	r5,r16
   1088c:	00108c40 	call	108c4 <__swsetup_r>
   10890:	103ffa1e 	bne	r2,zero,1087c <__swbuf_r+0x10c>
   10894:	8180030b 	ldhu	r6,12(r16)
   10898:	80c00417 	ldw	r3,16(r16)
   1089c:	003fc606 	br	107b8 <__swbuf_r+0x48>
   108a0:	0010ffc0 	call	10ffc <__sinit>
   108a4:	003fbd06 	br	1079c <__swbuf_r+0x2c>

000108a8 <__swbuf>:
   108a8:	00c000b4 	movhi	r3,2
   108ac:	18e06404 	addi	r3,r3,-32368
   108b0:	2005883a 	mov	r2,r4
   108b4:	19000017 	ldw	r4,0(r3)
   108b8:	280d883a 	mov	r6,r5
   108bc:	100b883a 	mov	r5,r2
   108c0:	00107701 	jmpi	10770 <__swbuf_r>

000108c4 <__swsetup_r>:
   108c4:	008000b4 	movhi	r2,2
   108c8:	defffd04 	addi	sp,sp,-12
   108cc:	10a06404 	addi	r2,r2,-32368
   108d0:	dc400115 	stw	r17,4(sp)
   108d4:	2023883a 	mov	r17,r4
   108d8:	11000017 	ldw	r4,0(r2)
   108dc:	dc000015 	stw	r16,0(sp)
   108e0:	dfc00215 	stw	ra,8(sp)
   108e4:	2821883a 	mov	r16,r5
   108e8:	20000226 	beq	r4,zero,108f4 <__swsetup_r+0x30>
   108ec:	20c00e17 	ldw	r3,56(r4)
   108f0:	18003126 	beq	r3,zero,109b8 <__swsetup_r+0xf4>
   108f4:	8080030b 	ldhu	r2,12(r16)
   108f8:	10c0020c 	andi	r3,r2,8
   108fc:	100d883a 	mov	r6,r2
   10900:	18000f26 	beq	r3,zero,10940 <__swsetup_r+0x7c>
   10904:	80c00417 	ldw	r3,16(r16)
   10908:	18001526 	beq	r3,zero,10960 <__swsetup_r+0x9c>
   1090c:	1100004c 	andi	r4,r2,1
   10910:	20001c1e 	bne	r4,zero,10984 <__swsetup_r+0xc0>
   10914:	1080008c 	andi	r2,r2,2
   10918:	1000291e 	bne	r2,zero,109c0 <__swsetup_r+0xfc>
   1091c:	80800517 	ldw	r2,20(r16)
   10920:	80800215 	stw	r2,8(r16)
   10924:	18001c26 	beq	r3,zero,10998 <__swsetup_r+0xd4>
   10928:	0005883a 	mov	r2,zero
   1092c:	dfc00217 	ldw	ra,8(sp)
   10930:	dc400117 	ldw	r17,4(sp)
   10934:	dc000017 	ldw	r16,0(sp)
   10938:	dec00304 	addi	sp,sp,12
   1093c:	f800283a 	ret
   10940:	3080040c 	andi	r2,r6,16
   10944:	10002e26 	beq	r2,zero,10a00 <__swsetup_r+0x13c>
   10948:	3080010c 	andi	r2,r6,4
   1094c:	10001e1e 	bne	r2,zero,109c8 <__swsetup_r+0x104>
   10950:	80c00417 	ldw	r3,16(r16)
   10954:	30800214 	ori	r2,r6,8
   10958:	8080030d 	sth	r2,12(r16)
   1095c:	183feb1e 	bne	r3,zero,1090c <__swsetup_r+0x48>
   10960:	1140a00c 	andi	r5,r2,640
   10964:	01008004 	movi	r4,512
   10968:	293fe826 	beq	r5,r4,1090c <__swsetup_r+0x48>
   1096c:	8809883a 	mov	r4,r17
   10970:	800b883a 	mov	r5,r16
   10974:	0011aa80 	call	11aa8 <__smakebuf_r>
   10978:	8080030b 	ldhu	r2,12(r16)
   1097c:	80c00417 	ldw	r3,16(r16)
   10980:	003fe206 	br	1090c <__swsetup_r+0x48>
   10984:	80800517 	ldw	r2,20(r16)
   10988:	80000215 	stw	zero,8(r16)
   1098c:	0085c83a 	sub	r2,zero,r2
   10990:	80800615 	stw	r2,24(r16)
   10994:	183fe41e 	bne	r3,zero,10928 <__swsetup_r+0x64>
   10998:	80c0030b 	ldhu	r3,12(r16)
   1099c:	0005883a 	mov	r2,zero
   109a0:	1900200c 	andi	r4,r3,128
   109a4:	203fe126 	beq	r4,zero,1092c <__swsetup_r+0x68>
   109a8:	18c01014 	ori	r3,r3,64
   109ac:	80c0030d 	sth	r3,12(r16)
   109b0:	00bfffc4 	movi	r2,-1
   109b4:	003fdd06 	br	1092c <__swsetup_r+0x68>
   109b8:	0010ffc0 	call	10ffc <__sinit>
   109bc:	003fcd06 	br	108f4 <__swsetup_r+0x30>
   109c0:	0005883a 	mov	r2,zero
   109c4:	003fd606 	br	10920 <__swsetup_r+0x5c>
   109c8:	81400c17 	ldw	r5,48(r16)
   109cc:	28000626 	beq	r5,zero,109e8 <__swsetup_r+0x124>
   109d0:	80801004 	addi	r2,r16,64
   109d4:	28800326 	beq	r5,r2,109e4 <__swsetup_r+0x120>
   109d8:	8809883a 	mov	r4,r17
   109dc:	00111700 	call	11170 <_free_r>
   109e0:	8180030b 	ldhu	r6,12(r16)
   109e4:	80000c15 	stw	zero,48(r16)
   109e8:	80c00417 	ldw	r3,16(r16)
   109ec:	00bff6c4 	movi	r2,-37
   109f0:	118c703a 	and	r6,r2,r6
   109f4:	80000115 	stw	zero,4(r16)
   109f8:	80c00015 	stw	r3,0(r16)
   109fc:	003fd506 	br	10954 <__swsetup_r+0x90>
   10a00:	00800244 	movi	r2,9
   10a04:	88800015 	stw	r2,0(r17)
   10a08:	30801014 	ori	r2,r6,64
   10a0c:	8080030d 	sth	r2,12(r16)
   10a10:	00bfffc4 	movi	r2,-1
   10a14:	003fc506 	br	1092c <__swsetup_r+0x68>

00010a18 <__sflush_r>:
   10a18:	2880030b 	ldhu	r2,12(r5)
   10a1c:	defffb04 	addi	sp,sp,-20
   10a20:	dcc00315 	stw	r19,12(sp)
   10a24:	dc400115 	stw	r17,4(sp)
   10a28:	dfc00415 	stw	ra,16(sp)
   10a2c:	dc800215 	stw	r18,8(sp)
   10a30:	dc000015 	stw	r16,0(sp)
   10a34:	10c0020c 	andi	r3,r2,8
   10a38:	2823883a 	mov	r17,r5
   10a3c:	2027883a 	mov	r19,r4
   10a40:	1800311e 	bne	r3,zero,10b08 <__sflush_r+0xf0>
   10a44:	28c00117 	ldw	r3,4(r5)
   10a48:	10820014 	ori	r2,r2,2048
   10a4c:	2880030d 	sth	r2,12(r5)
   10a50:	00c04b0e 	bge	zero,r3,10b80 <__sflush_r+0x168>
   10a54:	8a000a17 	ldw	r8,40(r17)
   10a58:	40002326 	beq	r8,zero,10ae8 <__sflush_r+0xd0>
   10a5c:	9c000017 	ldw	r16,0(r19)
   10a60:	10c4000c 	andi	r3,r2,4096
   10a64:	98000015 	stw	zero,0(r19)
   10a68:	18004826 	beq	r3,zero,10b8c <__sflush_r+0x174>
   10a6c:	89801417 	ldw	r6,80(r17)
   10a70:	10c0010c 	andi	r3,r2,4
   10a74:	18000626 	beq	r3,zero,10a90 <__sflush_r+0x78>
   10a78:	88c00117 	ldw	r3,4(r17)
   10a7c:	88800c17 	ldw	r2,48(r17)
   10a80:	30cdc83a 	sub	r6,r6,r3
   10a84:	10000226 	beq	r2,zero,10a90 <__sflush_r+0x78>
   10a88:	88800f17 	ldw	r2,60(r17)
   10a8c:	308dc83a 	sub	r6,r6,r2
   10a90:	89400717 	ldw	r5,28(r17)
   10a94:	9809883a 	mov	r4,r19
   10a98:	000f883a 	mov	r7,zero
   10a9c:	403ee83a 	callr	r8
   10aa0:	00ffffc4 	movi	r3,-1
   10aa4:	10c04426 	beq	r2,r3,10bb8 <__sflush_r+0x1a0>
   10aa8:	88c0030b 	ldhu	r3,12(r17)
   10aac:	89000417 	ldw	r4,16(r17)
   10ab0:	88000115 	stw	zero,4(r17)
   10ab4:	197dffcc 	andi	r5,r3,63487
   10ab8:	8940030d 	sth	r5,12(r17)
   10abc:	89000015 	stw	r4,0(r17)
   10ac0:	18c4000c 	andi	r3,r3,4096
   10ac4:	18002c1e 	bne	r3,zero,10b78 <__sflush_r+0x160>
   10ac8:	89400c17 	ldw	r5,48(r17)
   10acc:	9c000015 	stw	r16,0(r19)
   10ad0:	28000526 	beq	r5,zero,10ae8 <__sflush_r+0xd0>
   10ad4:	88801004 	addi	r2,r17,64
   10ad8:	28800226 	beq	r5,r2,10ae4 <__sflush_r+0xcc>
   10adc:	9809883a 	mov	r4,r19
   10ae0:	00111700 	call	11170 <_free_r>
   10ae4:	88000c15 	stw	zero,48(r17)
   10ae8:	0005883a 	mov	r2,zero
   10aec:	dfc00417 	ldw	ra,16(sp)
   10af0:	dcc00317 	ldw	r19,12(sp)
   10af4:	dc800217 	ldw	r18,8(sp)
   10af8:	dc400117 	ldw	r17,4(sp)
   10afc:	dc000017 	ldw	r16,0(sp)
   10b00:	dec00504 	addi	sp,sp,20
   10b04:	f800283a 	ret
   10b08:	2c800417 	ldw	r18,16(r5)
   10b0c:	903ff626 	beq	r18,zero,10ae8 <__sflush_r+0xd0>
   10b10:	2c000017 	ldw	r16,0(r5)
   10b14:	108000cc 	andi	r2,r2,3
   10b18:	2c800015 	stw	r18,0(r5)
   10b1c:	84a1c83a 	sub	r16,r16,r18
   10b20:	1000131e 	bne	r2,zero,10b70 <__sflush_r+0x158>
   10b24:	28800517 	ldw	r2,20(r5)
   10b28:	88800215 	stw	r2,8(r17)
   10b2c:	04000316 	blt	zero,r16,10b3c <__sflush_r+0x124>
   10b30:	003fed06 	br	10ae8 <__sflush_r+0xd0>
   10b34:	90a5883a 	add	r18,r18,r2
   10b38:	043feb0e 	bge	zero,r16,10ae8 <__sflush_r+0xd0>
   10b3c:	88800917 	ldw	r2,36(r17)
   10b40:	89400717 	ldw	r5,28(r17)
   10b44:	800f883a 	mov	r7,r16
   10b48:	900d883a 	mov	r6,r18
   10b4c:	9809883a 	mov	r4,r19
   10b50:	103ee83a 	callr	r2
   10b54:	80a1c83a 	sub	r16,r16,r2
   10b58:	00bff616 	blt	zero,r2,10b34 <__sflush_r+0x11c>
   10b5c:	88c0030b 	ldhu	r3,12(r17)
   10b60:	00bfffc4 	movi	r2,-1
   10b64:	18c01014 	ori	r3,r3,64
   10b68:	88c0030d 	sth	r3,12(r17)
   10b6c:	003fdf06 	br	10aec <__sflush_r+0xd4>
   10b70:	0005883a 	mov	r2,zero
   10b74:	003fec06 	br	10b28 <__sflush_r+0x110>
   10b78:	88801415 	stw	r2,80(r17)
   10b7c:	003fd206 	br	10ac8 <__sflush_r+0xb0>
   10b80:	28c00f17 	ldw	r3,60(r5)
   10b84:	00ffb316 	blt	zero,r3,10a54 <__sflush_r+0x3c>
   10b88:	003fd706 	br	10ae8 <__sflush_r+0xd0>
   10b8c:	89400717 	ldw	r5,28(r17)
   10b90:	000d883a 	mov	r6,zero
   10b94:	9809883a 	mov	r4,r19
   10b98:	01c00044 	movi	r7,1
   10b9c:	403ee83a 	callr	r8
   10ba0:	100d883a 	mov	r6,r2
   10ba4:	00bfffc4 	movi	r2,-1
   10ba8:	30801426 	beq	r6,r2,10bfc <__sflush_r+0x1e4>
   10bac:	8880030b 	ldhu	r2,12(r17)
   10bb0:	8a000a17 	ldw	r8,40(r17)
   10bb4:	003fae06 	br	10a70 <__sflush_r+0x58>
   10bb8:	98c00017 	ldw	r3,0(r19)
   10bbc:	183fba26 	beq	r3,zero,10aa8 <__sflush_r+0x90>
   10bc0:	01000744 	movi	r4,29
   10bc4:	19000626 	beq	r3,r4,10be0 <__sflush_r+0x1c8>
   10bc8:	01000584 	movi	r4,22
   10bcc:	19000426 	beq	r3,r4,10be0 <__sflush_r+0x1c8>
   10bd0:	88c0030b 	ldhu	r3,12(r17)
   10bd4:	18c01014 	ori	r3,r3,64
   10bd8:	88c0030d 	sth	r3,12(r17)
   10bdc:	003fc306 	br	10aec <__sflush_r+0xd4>
   10be0:	8880030b 	ldhu	r2,12(r17)
   10be4:	88c00417 	ldw	r3,16(r17)
   10be8:	88000115 	stw	zero,4(r17)
   10bec:	10bdffcc 	andi	r2,r2,63487
   10bf0:	8880030d 	sth	r2,12(r17)
   10bf4:	88c00015 	stw	r3,0(r17)
   10bf8:	003fb306 	br	10ac8 <__sflush_r+0xb0>
   10bfc:	98800017 	ldw	r2,0(r19)
   10c00:	103fea26 	beq	r2,zero,10bac <__sflush_r+0x194>
   10c04:	00c00744 	movi	r3,29
   10c08:	10c00226 	beq	r2,r3,10c14 <__sflush_r+0x1fc>
   10c0c:	00c00584 	movi	r3,22
   10c10:	10ffd21e 	bne	r2,r3,10b5c <__sflush_r+0x144>
   10c14:	9c000015 	stw	r16,0(r19)
   10c18:	0005883a 	mov	r2,zero
   10c1c:	003fb306 	br	10aec <__sflush_r+0xd4>

00010c20 <_fflush_r>:
   10c20:	defffd04 	addi	sp,sp,-12
   10c24:	dc000115 	stw	r16,4(sp)
   10c28:	dfc00215 	stw	ra,8(sp)
   10c2c:	2021883a 	mov	r16,r4
   10c30:	20000226 	beq	r4,zero,10c3c <_fflush_r+0x1c>
   10c34:	20800e17 	ldw	r2,56(r4)
   10c38:	10000c26 	beq	r2,zero,10c6c <_fflush_r+0x4c>
   10c3c:	2880030f 	ldh	r2,12(r5)
   10c40:	1000051e 	bne	r2,zero,10c58 <_fflush_r+0x38>
   10c44:	0005883a 	mov	r2,zero
   10c48:	dfc00217 	ldw	ra,8(sp)
   10c4c:	dc000117 	ldw	r16,4(sp)
   10c50:	dec00304 	addi	sp,sp,12
   10c54:	f800283a 	ret
   10c58:	8009883a 	mov	r4,r16
   10c5c:	dfc00217 	ldw	ra,8(sp)
   10c60:	dc000117 	ldw	r16,4(sp)
   10c64:	dec00304 	addi	sp,sp,12
   10c68:	0010a181 	jmpi	10a18 <__sflush_r>
   10c6c:	d9400015 	stw	r5,0(sp)
   10c70:	0010ffc0 	call	10ffc <__sinit>
   10c74:	d9400017 	ldw	r5,0(sp)
   10c78:	003ff006 	br	10c3c <_fflush_r+0x1c>

00010c7c <fflush>:
   10c7c:	20000526 	beq	r4,zero,10c94 <fflush+0x18>
   10c80:	008000b4 	movhi	r2,2
   10c84:	10a06404 	addi	r2,r2,-32368
   10c88:	200b883a 	mov	r5,r4
   10c8c:	11000017 	ldw	r4,0(r2)
   10c90:	0010c201 	jmpi	10c20 <_fflush_r>
   10c94:	008000b4 	movhi	r2,2
   10c98:	10a06304 	addi	r2,r2,-32372
   10c9c:	11000017 	ldw	r4,0(r2)
   10ca0:	01400074 	movhi	r5,1
   10ca4:	29430804 	addi	r5,r5,3104
   10ca8:	00119e41 	jmpi	119e4 <_fwalk_reent>

00010cac <__fp_lock>:
   10cac:	0005883a 	mov	r2,zero
   10cb0:	f800283a 	ret

00010cb4 <__fp_unlock>:
   10cb4:	0005883a 	mov	r2,zero
   10cb8:	f800283a 	ret

00010cbc <_cleanup_r>:
   10cbc:	01400074 	movhi	r5,1
   10cc0:	294c1404 	addi	r5,r5,12368
   10cc4:	00119e41 	jmpi	119e4 <_fwalk_reent>

00010cc8 <__sinit.part.1>:
   10cc8:	defff704 	addi	sp,sp,-36
   10ccc:	00c00074 	movhi	r3,1
   10cd0:	dfc00815 	stw	ra,32(sp)
   10cd4:	ddc00715 	stw	r23,28(sp)
   10cd8:	dd800615 	stw	r22,24(sp)
   10cdc:	dd400515 	stw	r21,20(sp)
   10ce0:	dd000415 	stw	r20,16(sp)
   10ce4:	dcc00315 	stw	r19,12(sp)
   10ce8:	dc800215 	stw	r18,8(sp)
   10cec:	dc400115 	stw	r17,4(sp)
   10cf0:	dc000015 	stw	r16,0(sp)
   10cf4:	18c32f04 	addi	r3,r3,3260
   10cf8:	24000117 	ldw	r16,4(r4)
   10cfc:	20c00f15 	stw	r3,60(r4)
   10d00:	2080bb04 	addi	r2,r4,748
   10d04:	00c000c4 	movi	r3,3
   10d08:	20c0b915 	stw	r3,740(r4)
   10d0c:	2080ba15 	stw	r2,744(r4)
   10d10:	2000b815 	stw	zero,736(r4)
   10d14:	05c00204 	movi	r23,8
   10d18:	00800104 	movi	r2,4
   10d1c:	2025883a 	mov	r18,r4
   10d20:	b80d883a 	mov	r6,r23
   10d24:	81001704 	addi	r4,r16,92
   10d28:	000b883a 	mov	r5,zero
   10d2c:	80000015 	stw	zero,0(r16)
   10d30:	80000115 	stw	zero,4(r16)
   10d34:	80000215 	stw	zero,8(r16)
   10d38:	8080030d 	sth	r2,12(r16)
   10d3c:	80001915 	stw	zero,100(r16)
   10d40:	8000038d 	sth	zero,14(r16)
   10d44:	80000415 	stw	zero,16(r16)
   10d48:	80000515 	stw	zero,20(r16)
   10d4c:	80000615 	stw	zero,24(r16)
   10d50:	00127840 	call	12784 <memset>
   10d54:	05800074 	movhi	r22,1
   10d58:	94400217 	ldw	r17,8(r18)
   10d5c:	05400074 	movhi	r21,1
   10d60:	05000074 	movhi	r20,1
   10d64:	04c00074 	movhi	r19,1
   10d68:	b58b9904 	addi	r22,r22,11876
   10d6c:	ad4bb004 	addi	r21,r21,11968
   10d70:	a50bcf04 	addi	r20,r20,12092
   10d74:	9ccbe604 	addi	r19,r19,12184
   10d78:	85800815 	stw	r22,32(r16)
   10d7c:	85400915 	stw	r21,36(r16)
   10d80:	85000a15 	stw	r20,40(r16)
   10d84:	84c00b15 	stw	r19,44(r16)
   10d88:	84000715 	stw	r16,28(r16)
   10d8c:	00800284 	movi	r2,10
   10d90:	8880030d 	sth	r2,12(r17)
   10d94:	00800044 	movi	r2,1
   10d98:	89001704 	addi	r4,r17,92
   10d9c:	b80d883a 	mov	r6,r23
   10da0:	000b883a 	mov	r5,zero
   10da4:	88000015 	stw	zero,0(r17)
   10da8:	88000115 	stw	zero,4(r17)
   10dac:	88000215 	stw	zero,8(r17)
   10db0:	88001915 	stw	zero,100(r17)
   10db4:	8880038d 	sth	r2,14(r17)
   10db8:	88000415 	stw	zero,16(r17)
   10dbc:	88000515 	stw	zero,20(r17)
   10dc0:	88000615 	stw	zero,24(r17)
   10dc4:	00127840 	call	12784 <memset>
   10dc8:	94000317 	ldw	r16,12(r18)
   10dcc:	00800484 	movi	r2,18
   10dd0:	8c400715 	stw	r17,28(r17)
   10dd4:	8d800815 	stw	r22,32(r17)
   10dd8:	8d400915 	stw	r21,36(r17)
   10ddc:	8d000a15 	stw	r20,40(r17)
   10de0:	8cc00b15 	stw	r19,44(r17)
   10de4:	8080030d 	sth	r2,12(r16)
   10de8:	00800084 	movi	r2,2
   10dec:	80000015 	stw	zero,0(r16)
   10df0:	80000115 	stw	zero,4(r16)
   10df4:	80000215 	stw	zero,8(r16)
   10df8:	80001915 	stw	zero,100(r16)
   10dfc:	8080038d 	sth	r2,14(r16)
   10e00:	80000415 	stw	zero,16(r16)
   10e04:	80000515 	stw	zero,20(r16)
   10e08:	80000615 	stw	zero,24(r16)
   10e0c:	81001704 	addi	r4,r16,92
   10e10:	000b883a 	mov	r5,zero
   10e14:	b80d883a 	mov	r6,r23
   10e18:	00127840 	call	12784 <memset>
   10e1c:	00800044 	movi	r2,1
   10e20:	84000715 	stw	r16,28(r16)
   10e24:	85800815 	stw	r22,32(r16)
   10e28:	85400915 	stw	r21,36(r16)
   10e2c:	85000a15 	stw	r20,40(r16)
   10e30:	84c00b15 	stw	r19,44(r16)
   10e34:	90800e15 	stw	r2,56(r18)
   10e38:	dfc00817 	ldw	ra,32(sp)
   10e3c:	ddc00717 	ldw	r23,28(sp)
   10e40:	dd800617 	ldw	r22,24(sp)
   10e44:	dd400517 	ldw	r21,20(sp)
   10e48:	dd000417 	ldw	r20,16(sp)
   10e4c:	dcc00317 	ldw	r19,12(sp)
   10e50:	dc800217 	ldw	r18,8(sp)
   10e54:	dc400117 	ldw	r17,4(sp)
   10e58:	dc000017 	ldw	r16,0(sp)
   10e5c:	dec00904 	addi	sp,sp,36
   10e60:	f800283a 	ret

00010e64 <__sfmoreglue>:
   10e64:	defffc04 	addi	sp,sp,-16
   10e68:	dc400115 	stw	r17,4(sp)
   10e6c:	2c7fffc4 	addi	r17,r5,-1
   10e70:	8c401a24 	muli	r17,r17,104
   10e74:	dc800215 	stw	r18,8(sp)
   10e78:	2825883a 	mov	r18,r5
   10e7c:	89401d04 	addi	r5,r17,116
   10e80:	dc000015 	stw	r16,0(sp)
   10e84:	dfc00315 	stw	ra,12(sp)
   10e88:	0011c600 	call	11c60 <_malloc_r>
   10e8c:	1021883a 	mov	r16,r2
   10e90:	10000726 	beq	r2,zero,10eb0 <__sfmoreglue+0x4c>
   10e94:	11000304 	addi	r4,r2,12
   10e98:	10000015 	stw	zero,0(r2)
   10e9c:	14800115 	stw	r18,4(r2)
   10ea0:	11000215 	stw	r4,8(r2)
   10ea4:	000b883a 	mov	r5,zero
   10ea8:	89801a04 	addi	r6,r17,104
   10eac:	00127840 	call	12784 <memset>
   10eb0:	8005883a 	mov	r2,r16
   10eb4:	dfc00317 	ldw	ra,12(sp)
   10eb8:	dc800217 	ldw	r18,8(sp)
   10ebc:	dc400117 	ldw	r17,4(sp)
   10ec0:	dc000017 	ldw	r16,0(sp)
   10ec4:	dec00404 	addi	sp,sp,16
   10ec8:	f800283a 	ret

00010ecc <__sfp>:
   10ecc:	008000b4 	movhi	r2,2
   10ed0:	defffb04 	addi	sp,sp,-20
   10ed4:	10a06304 	addi	r2,r2,-32372
   10ed8:	dc800215 	stw	r18,8(sp)
   10edc:	14800017 	ldw	r18,0(r2)
   10ee0:	dcc00315 	stw	r19,12(sp)
   10ee4:	dfc00415 	stw	ra,16(sp)
   10ee8:	90800e17 	ldw	r2,56(r18)
   10eec:	dc400115 	stw	r17,4(sp)
   10ef0:	dc000015 	stw	r16,0(sp)
   10ef4:	2027883a 	mov	r19,r4
   10ef8:	1000021e 	bne	r2,zero,10f04 <__sfp+0x38>
   10efc:	9009883a 	mov	r4,r18
   10f00:	0010cc80 	call	10cc8 <__sinit.part.1>
   10f04:	9480b804 	addi	r18,r18,736
   10f08:	047fffc4 	movi	r17,-1
   10f0c:	91400117 	ldw	r5,4(r18)
   10f10:	94000217 	ldw	r16,8(r18)
   10f14:	297fffc4 	addi	r5,r5,-1
   10f18:	28000a16 	blt	r5,zero,10f44 <__sfp+0x78>
   10f1c:	8080030f 	ldh	r2,12(r16)
   10f20:	10000c26 	beq	r2,zero,10f54 <__sfp+0x88>
   10f24:	80c01d04 	addi	r3,r16,116
   10f28:	00000206 	br	10f34 <__sfp+0x68>
   10f2c:	18bfe60f 	ldh	r2,-104(r3)
   10f30:	10000826 	beq	r2,zero,10f54 <__sfp+0x88>
   10f34:	297fffc4 	addi	r5,r5,-1
   10f38:	1c3ffd04 	addi	r16,r3,-12
   10f3c:	18c01a04 	addi	r3,r3,104
   10f40:	2c7ffa1e 	bne	r5,r17,10f2c <__sfp+0x60>
   10f44:	90800017 	ldw	r2,0(r18)
   10f48:	10001d26 	beq	r2,zero,10fc0 <__sfp+0xf4>
   10f4c:	1025883a 	mov	r18,r2
   10f50:	003fee06 	br	10f0c <__sfp+0x40>
   10f54:	00bfffc4 	movi	r2,-1
   10f58:	8080038d 	sth	r2,14(r16)
   10f5c:	00800044 	movi	r2,1
   10f60:	8080030d 	sth	r2,12(r16)
   10f64:	80001915 	stw	zero,100(r16)
   10f68:	80000015 	stw	zero,0(r16)
   10f6c:	80000215 	stw	zero,8(r16)
   10f70:	80000115 	stw	zero,4(r16)
   10f74:	80000415 	stw	zero,16(r16)
   10f78:	80000515 	stw	zero,20(r16)
   10f7c:	80000615 	stw	zero,24(r16)
   10f80:	81001704 	addi	r4,r16,92
   10f84:	000b883a 	mov	r5,zero
   10f88:	01800204 	movi	r6,8
   10f8c:	00127840 	call	12784 <memset>
   10f90:	8005883a 	mov	r2,r16
   10f94:	80000c15 	stw	zero,48(r16)
   10f98:	80000d15 	stw	zero,52(r16)
   10f9c:	80001115 	stw	zero,68(r16)
   10fa0:	80001215 	stw	zero,72(r16)
   10fa4:	dfc00417 	ldw	ra,16(sp)
   10fa8:	dcc00317 	ldw	r19,12(sp)
   10fac:	dc800217 	ldw	r18,8(sp)
   10fb0:	dc400117 	ldw	r17,4(sp)
   10fb4:	dc000017 	ldw	r16,0(sp)
   10fb8:	dec00504 	addi	sp,sp,20
   10fbc:	f800283a 	ret
   10fc0:	9809883a 	mov	r4,r19
   10fc4:	01400104 	movi	r5,4
   10fc8:	0010e640 	call	10e64 <__sfmoreglue>
   10fcc:	90800015 	stw	r2,0(r18)
   10fd0:	103fde1e 	bne	r2,zero,10f4c <__sfp+0x80>
   10fd4:	00800304 	movi	r2,12
   10fd8:	98800015 	stw	r2,0(r19)
   10fdc:	0005883a 	mov	r2,zero
   10fe0:	003ff006 	br	10fa4 <__sfp+0xd8>

00010fe4 <_cleanup>:
   10fe4:	008000b4 	movhi	r2,2
   10fe8:	10a06304 	addi	r2,r2,-32372
   10fec:	11000017 	ldw	r4,0(r2)
   10ff0:	01400074 	movhi	r5,1
   10ff4:	294c1404 	addi	r5,r5,12368
   10ff8:	00119e41 	jmpi	119e4 <_fwalk_reent>

00010ffc <__sinit>:
   10ffc:	20800e17 	ldw	r2,56(r4)
   11000:	10000126 	beq	r2,zero,11008 <__sinit+0xc>
   11004:	f800283a 	ret
   11008:	0010cc81 	jmpi	10cc8 <__sinit.part.1>

0001100c <__sfp_lock_acquire>:
   1100c:	f800283a 	ret

00011010 <__sfp_lock_release>:
   11010:	f800283a 	ret

00011014 <__sinit_lock_acquire>:
   11014:	f800283a 	ret

00011018 <__sinit_lock_release>:
   11018:	f800283a 	ret

0001101c <__fp_lock_all>:
   1101c:	008000b4 	movhi	r2,2
   11020:	10a06404 	addi	r2,r2,-32368
   11024:	11000017 	ldw	r4,0(r2)
   11028:	01400074 	movhi	r5,1
   1102c:	29432b04 	addi	r5,r5,3244
   11030:	00119201 	jmpi	11920 <_fwalk>

00011034 <__fp_unlock_all>:
   11034:	008000b4 	movhi	r2,2
   11038:	10a06404 	addi	r2,r2,-32368
   1103c:	11000017 	ldw	r4,0(r2)
   11040:	01400074 	movhi	r5,1
   11044:	29432d04 	addi	r5,r5,3252
   11048:	00119201 	jmpi	11920 <_fwalk>

0001104c <_malloc_trim_r>:
   1104c:	defffb04 	addi	sp,sp,-20
   11050:	dcc00315 	stw	r19,12(sp)
   11054:	04c00074 	movhi	r19,1
   11058:	dc800215 	stw	r18,8(sp)
   1105c:	dc400115 	stw	r17,4(sp)
   11060:	dc000015 	stw	r16,0(sp)
   11064:	dfc00415 	stw	ra,16(sp)
   11068:	2821883a 	mov	r16,r5
   1106c:	9cdaae04 	addi	r19,r19,27320
   11070:	2025883a 	mov	r18,r4
   11074:	00139a40 	call	139a4 <__malloc_lock>
   11078:	98800217 	ldw	r2,8(r19)
   1107c:	14400117 	ldw	r17,4(r2)
   11080:	00bfff04 	movi	r2,-4
   11084:	88a2703a 	and	r17,r17,r2
   11088:	8c21c83a 	sub	r16,r17,r16
   1108c:	8403fbc4 	addi	r16,r16,4079
   11090:	8020d33a 	srli	r16,r16,12
   11094:	0083ffc4 	movi	r2,4095
   11098:	843fffc4 	addi	r16,r16,-1
   1109c:	8020933a 	slli	r16,r16,12
   110a0:	1400060e 	bge	r2,r16,110bc <_malloc_trim_r+0x70>
   110a4:	9009883a 	mov	r4,r18
   110a8:	000b883a 	mov	r5,zero
   110ac:	0012e100 	call	12e10 <_sbrk_r>
   110b0:	98c00217 	ldw	r3,8(r19)
   110b4:	1c47883a 	add	r3,r3,r17
   110b8:	10c00a26 	beq	r2,r3,110e4 <_malloc_trim_r+0x98>
   110bc:	9009883a 	mov	r4,r18
   110c0:	00139c40 	call	139c4 <__malloc_unlock>
   110c4:	0005883a 	mov	r2,zero
   110c8:	dfc00417 	ldw	ra,16(sp)
   110cc:	dcc00317 	ldw	r19,12(sp)
   110d0:	dc800217 	ldw	r18,8(sp)
   110d4:	dc400117 	ldw	r17,4(sp)
   110d8:	dc000017 	ldw	r16,0(sp)
   110dc:	dec00504 	addi	sp,sp,20
   110e0:	f800283a 	ret
   110e4:	9009883a 	mov	r4,r18
   110e8:	040bc83a 	sub	r5,zero,r16
   110ec:	0012e100 	call	12e10 <_sbrk_r>
   110f0:	00ffffc4 	movi	r3,-1
   110f4:	10c00d26 	beq	r2,r3,1112c <_malloc_trim_r+0xe0>
   110f8:	00c000b4 	movhi	r3,2
   110fc:	18e74804 	addi	r3,r3,-25312
   11100:	18800017 	ldw	r2,0(r3)
   11104:	99000217 	ldw	r4,8(r19)
   11108:	8c23c83a 	sub	r17,r17,r16
   1110c:	8c400054 	ori	r17,r17,1
   11110:	1421c83a 	sub	r16,r2,r16
   11114:	24400115 	stw	r17,4(r4)
   11118:	9009883a 	mov	r4,r18
   1111c:	1c000015 	stw	r16,0(r3)
   11120:	00139c40 	call	139c4 <__malloc_unlock>
   11124:	00800044 	movi	r2,1
   11128:	003fe706 	br	110c8 <_malloc_trim_r+0x7c>
   1112c:	9009883a 	mov	r4,r18
   11130:	000b883a 	mov	r5,zero
   11134:	0012e100 	call	12e10 <_sbrk_r>
   11138:	99000217 	ldw	r4,8(r19)
   1113c:	014003c4 	movi	r5,15
   11140:	1107c83a 	sub	r3,r2,r4
   11144:	28ffdd0e 	bge	r5,r3,110bc <_malloc_trim_r+0x70>
   11148:	014000b4 	movhi	r5,2
   1114c:	29606504 	addi	r5,r5,-32364
   11150:	29400017 	ldw	r5,0(r5)
   11154:	18c00054 	ori	r3,r3,1
   11158:	20c00115 	stw	r3,4(r4)
   1115c:	00c000b4 	movhi	r3,2
   11160:	1145c83a 	sub	r2,r2,r5
   11164:	18e74804 	addi	r3,r3,-25312
   11168:	18800015 	stw	r2,0(r3)
   1116c:	003fd306 	br	110bc <_malloc_trim_r+0x70>

00011170 <_free_r>:
   11170:	28004c26 	beq	r5,zero,112a4 <_free_r+0x134>
   11174:	defffd04 	addi	sp,sp,-12
   11178:	dc400115 	stw	r17,4(sp)
   1117c:	dc000015 	stw	r16,0(sp)
   11180:	2023883a 	mov	r17,r4
   11184:	2821883a 	mov	r16,r5
   11188:	dfc00215 	stw	ra,8(sp)
   1118c:	00139a40 	call	139a4 <__malloc_lock>
   11190:	813fff17 	ldw	r4,-4(r16)
   11194:	00bfff84 	movi	r2,-2
   11198:	02400074 	movhi	r9,1
   1119c:	81bffe04 	addi	r6,r16,-8
   111a0:	2084703a 	and	r2,r4,r2
   111a4:	4a5aae04 	addi	r9,r9,27320
   111a8:	308b883a 	add	r5,r6,r2
   111ac:	2a000117 	ldw	r8,4(r5)
   111b0:	49c00217 	ldw	r7,8(r9)
   111b4:	00ffff04 	movi	r3,-4
   111b8:	40c6703a 	and	r3,r8,r3
   111bc:	39405326 	beq	r7,r5,1130c <_free_r+0x19c>
   111c0:	28c00115 	stw	r3,4(r5)
   111c4:	2100004c 	andi	r4,r4,1
   111c8:	2000091e 	bne	r4,zero,111f0 <_free_r+0x80>
   111cc:	81fffe17 	ldw	r7,-8(r16)
   111d0:	4a000204 	addi	r8,r9,8
   111d4:	31cdc83a 	sub	r6,r6,r7
   111d8:	31000217 	ldw	r4,8(r6)
   111dc:	11c5883a 	add	r2,r2,r7
   111e0:	22006126 	beq	r4,r8,11368 <_free_r+0x1f8>
   111e4:	31c00317 	ldw	r7,12(r6)
   111e8:	21c00315 	stw	r7,12(r4)
   111ec:	39000215 	stw	r4,8(r7)
   111f0:	28c9883a 	add	r4,r5,r3
   111f4:	21c00117 	ldw	r7,4(r4)
   111f8:	39c0004c 	andi	r7,r7,1
   111fc:	38000d1e 	bne	r7,zero,11234 <_free_r+0xc4>
   11200:	29000217 	ldw	r4,8(r5)
   11204:	10c5883a 	add	r2,r2,r3
   11208:	00c00074 	movhi	r3,1
   1120c:	18dab004 	addi	r3,r3,27328
   11210:	20c07526 	beq	r4,r3,113e8 <_free_r+0x278>
   11214:	29c00317 	ldw	r7,12(r5)
   11218:	11400054 	ori	r5,r2,1
   1121c:	3087883a 	add	r3,r6,r2
   11220:	21c00315 	stw	r7,12(r4)
   11224:	39000215 	stw	r4,8(r7)
   11228:	31400115 	stw	r5,4(r6)
   1122c:	18800015 	stw	r2,0(r3)
   11230:	00000406 	br	11244 <_free_r+0xd4>
   11234:	10c00054 	ori	r3,r2,1
   11238:	30c00115 	stw	r3,4(r6)
   1123c:	3087883a 	add	r3,r6,r2
   11240:	18800015 	stw	r2,0(r3)
   11244:	00c07fc4 	movi	r3,511
   11248:	18801736 	bltu	r3,r2,112a8 <_free_r+0x138>
   1124c:	1004d0fa 	srli	r2,r2,3
   11250:	01400044 	movi	r5,1
   11254:	49000117 	ldw	r4,4(r9)
   11258:	1087883a 	add	r3,r2,r2
   1125c:	18c7883a 	add	r3,r3,r3
   11260:	1005d0ba 	srai	r2,r2,2
   11264:	18c7883a 	add	r3,r3,r3
   11268:	1a47883a 	add	r3,r3,r9
   1126c:	19c00217 	ldw	r7,8(r3)
   11270:	2884983a 	sll	r2,r5,r2
   11274:	30c00315 	stw	r3,12(r6)
   11278:	31c00215 	stw	r7,8(r6)
   1127c:	1104b03a 	or	r2,r2,r4
   11280:	19800215 	stw	r6,8(r3)
   11284:	48800115 	stw	r2,4(r9)
   11288:	39800315 	stw	r6,12(r7)
   1128c:	8809883a 	mov	r4,r17
   11290:	dfc00217 	ldw	ra,8(sp)
   11294:	dc400117 	ldw	r17,4(sp)
   11298:	dc000017 	ldw	r16,0(sp)
   1129c:	dec00304 	addi	sp,sp,12
   112a0:	00139c41 	jmpi	139c4 <__malloc_unlock>
   112a4:	f800283a 	ret
   112a8:	1006d27a 	srli	r3,r2,9
   112ac:	01000104 	movi	r4,4
   112b0:	20c04036 	bltu	r4,r3,113b4 <_free_r+0x244>
   112b4:	1006d1ba 	srli	r3,r2,6
   112b8:	19400e04 	addi	r5,r3,56
   112bc:	2947883a 	add	r3,r5,r5
   112c0:	18c7883a 	add	r3,r3,r3
   112c4:	18c7883a 	add	r3,r3,r3
   112c8:	1a49883a 	add	r4,r3,r9
   112cc:	20c00217 	ldw	r3,8(r4)
   112d0:	01c00074 	movhi	r7,1
   112d4:	39daae04 	addi	r7,r7,27320
   112d8:	19003b26 	beq	r3,r4,113c8 <_free_r+0x258>
   112dc:	01ffff04 	movi	r7,-4
   112e0:	19400117 	ldw	r5,4(r3)
   112e4:	29ca703a 	and	r5,r5,r7
   112e8:	1140022e 	bgeu	r2,r5,112f4 <_free_r+0x184>
   112ec:	18c00217 	ldw	r3,8(r3)
   112f0:	20fffb1e 	bne	r4,r3,112e0 <_free_r+0x170>
   112f4:	18800317 	ldw	r2,12(r3)
   112f8:	30800315 	stw	r2,12(r6)
   112fc:	30c00215 	stw	r3,8(r6)
   11300:	11800215 	stw	r6,8(r2)
   11304:	19800315 	stw	r6,12(r3)
   11308:	003fe006 	br	1128c <_free_r+0x11c>
   1130c:	2100004c 	andi	r4,r4,1
   11310:	1885883a 	add	r2,r3,r2
   11314:	2000071e 	bne	r4,zero,11334 <_free_r+0x1c4>
   11318:	817ffe17 	ldw	r5,-8(r16)
   1131c:	314dc83a 	sub	r6,r6,r5
   11320:	30c00317 	ldw	r3,12(r6)
   11324:	31000217 	ldw	r4,8(r6)
   11328:	1145883a 	add	r2,r2,r5
   1132c:	20c00315 	stw	r3,12(r4)
   11330:	19000215 	stw	r4,8(r3)
   11334:	10c00054 	ori	r3,r2,1
   11338:	30c00115 	stw	r3,4(r6)
   1133c:	00c000b4 	movhi	r3,2
   11340:	18e06604 	addi	r3,r3,-32360
   11344:	18c00017 	ldw	r3,0(r3)
   11348:	49800215 	stw	r6,8(r9)
   1134c:	10ffcf36 	bltu	r2,r3,1128c <_free_r+0x11c>
   11350:	008000b4 	movhi	r2,2
   11354:	10a73f04 	addi	r2,r2,-25348
   11358:	11400017 	ldw	r5,0(r2)
   1135c:	8809883a 	mov	r4,r17
   11360:	001104c0 	call	1104c <_malloc_trim_r>
   11364:	003fc906 	br	1128c <_free_r+0x11c>
   11368:	28c9883a 	add	r4,r5,r3
   1136c:	21000117 	ldw	r4,4(r4)
   11370:	2100004c 	andi	r4,r4,1
   11374:	20000a1e 	bne	r4,zero,113a0 <_free_r+0x230>
   11378:	29000317 	ldw	r4,12(r5)
   1137c:	29400217 	ldw	r5,8(r5)
   11380:	10c5883a 	add	r2,r2,r3
   11384:	10c00054 	ori	r3,r2,1
   11388:	29000315 	stw	r4,12(r5)
   1138c:	21400215 	stw	r5,8(r4)
   11390:	30c00115 	stw	r3,4(r6)
   11394:	308d883a 	add	r6,r6,r2
   11398:	30800015 	stw	r2,0(r6)
   1139c:	003fbb06 	br	1128c <_free_r+0x11c>
   113a0:	10c00054 	ori	r3,r2,1
   113a4:	30c00115 	stw	r3,4(r6)
   113a8:	308d883a 	add	r6,r6,r2
   113ac:	30800015 	stw	r2,0(r6)
   113b0:	003fb606 	br	1128c <_free_r+0x11c>
   113b4:	01000504 	movi	r4,20
   113b8:	20c01436 	bltu	r4,r3,1140c <_free_r+0x29c>
   113bc:	194016c4 	addi	r5,r3,91
   113c0:	2947883a 	add	r3,r5,r5
   113c4:	003fbe06 	br	112c0 <_free_r+0x150>
   113c8:	280bd0ba 	srai	r5,r5,2
   113cc:	00800044 	movi	r2,1
   113d0:	39000117 	ldw	r4,4(r7)
   113d4:	114a983a 	sll	r5,r2,r5
   113d8:	1805883a 	mov	r2,r3
   113dc:	2908b03a 	or	r4,r5,r4
   113e0:	39000115 	stw	r4,4(r7)
   113e4:	003fc406 	br	112f8 <_free_r+0x188>
   113e8:	49800515 	stw	r6,20(r9)
   113ec:	49800415 	stw	r6,16(r9)
   113f0:	10c00054 	ori	r3,r2,1
   113f4:	31000315 	stw	r4,12(r6)
   113f8:	31000215 	stw	r4,8(r6)
   113fc:	30c00115 	stw	r3,4(r6)
   11400:	308d883a 	add	r6,r6,r2
   11404:	30800015 	stw	r2,0(r6)
   11408:	003fa006 	br	1128c <_free_r+0x11c>
   1140c:	01001504 	movi	r4,84
   11410:	20c00436 	bltu	r4,r3,11424 <_free_r+0x2b4>
   11414:	1006d33a 	srli	r3,r2,12
   11418:	19401b84 	addi	r5,r3,110
   1141c:	2947883a 	add	r3,r5,r5
   11420:	003fa706 	br	112c0 <_free_r+0x150>
   11424:	01005504 	movi	r4,340
   11428:	20c00436 	bltu	r4,r3,1143c <_free_r+0x2cc>
   1142c:	1006d3fa 	srli	r3,r2,15
   11430:	19401dc4 	addi	r5,r3,119
   11434:	2947883a 	add	r3,r5,r5
   11438:	003fa106 	br	112c0 <_free_r+0x150>
   1143c:	01015504 	movi	r4,1364
   11440:	20c00436 	bltu	r4,r3,11454 <_free_r+0x2e4>
   11444:	1006d4ba 	srli	r3,r2,18
   11448:	19401f04 	addi	r5,r3,124
   1144c:	2947883a 	add	r3,r5,r5
   11450:	003f9b06 	br	112c0 <_free_r+0x150>
   11454:	00c03f04 	movi	r3,252
   11458:	01401f84 	movi	r5,126
   1145c:	003f9806 	br	112c0 <_free_r+0x150>

00011460 <__sfvwrite_r>:
   11460:	30800217 	ldw	r2,8(r6)
   11464:	10006726 	beq	r2,zero,11604 <__sfvwrite_r+0x1a4>
   11468:	defff404 	addi	sp,sp,-48
   1146c:	dd000615 	stw	r20,24(sp)
   11470:	2029883a 	mov	r20,r4
   11474:	2900030b 	ldhu	r4,12(r5)
   11478:	ddc00915 	stw	r23,36(sp)
   1147c:	dc000215 	stw	r16,8(sp)
   11480:	dfc00b15 	stw	ra,44(sp)
   11484:	df000a15 	stw	fp,40(sp)
   11488:	dd800815 	stw	r22,32(sp)
   1148c:	dd400715 	stw	r21,28(sp)
   11490:	dcc00515 	stw	r19,20(sp)
   11494:	dc800415 	stw	r18,16(sp)
   11498:	dc400315 	stw	r17,12(sp)
   1149c:	2080020c 	andi	r2,r4,8
   114a0:	2821883a 	mov	r16,r5
   114a4:	302f883a 	mov	r23,r6
   114a8:	10002726 	beq	r2,zero,11548 <__sfvwrite_r+0xe8>
   114ac:	28800417 	ldw	r2,16(r5)
   114b0:	10002526 	beq	r2,zero,11548 <__sfvwrite_r+0xe8>
   114b4:	2080008c 	andi	r2,r4,2
   114b8:	bc400017 	ldw	r17,0(r23)
   114bc:	10002a26 	beq	r2,zero,11568 <__sfvwrite_r+0x108>
   114c0:	05600034 	movhi	r21,32768
   114c4:	0027883a 	mov	r19,zero
   114c8:	0025883a 	mov	r18,zero
   114cc:	ad7f0004 	addi	r21,r21,-1024
   114d0:	980d883a 	mov	r6,r19
   114d4:	a009883a 	mov	r4,r20
   114d8:	90004626 	beq	r18,zero,115f4 <__sfvwrite_r+0x194>
   114dc:	900f883a 	mov	r7,r18
   114e0:	81400717 	ldw	r5,28(r16)
   114e4:	ac80022e 	bgeu	r21,r18,114f0 <__sfvwrite_r+0x90>
   114e8:	01e00034 	movhi	r7,32768
   114ec:	39ff0004 	addi	r7,r7,-1024
   114f0:	80800917 	ldw	r2,36(r16)
   114f4:	103ee83a 	callr	r2
   114f8:	0080520e 	bge	zero,r2,11644 <__sfvwrite_r+0x1e4>
   114fc:	b8c00217 	ldw	r3,8(r23)
   11500:	98a7883a 	add	r19,r19,r2
   11504:	90a5c83a 	sub	r18,r18,r2
   11508:	1885c83a 	sub	r2,r3,r2
   1150c:	b8800215 	stw	r2,8(r23)
   11510:	103fef1e 	bne	r2,zero,114d0 <__sfvwrite_r+0x70>
   11514:	0005883a 	mov	r2,zero
   11518:	dfc00b17 	ldw	ra,44(sp)
   1151c:	df000a17 	ldw	fp,40(sp)
   11520:	ddc00917 	ldw	r23,36(sp)
   11524:	dd800817 	ldw	r22,32(sp)
   11528:	dd400717 	ldw	r21,28(sp)
   1152c:	dd000617 	ldw	r20,24(sp)
   11530:	dcc00517 	ldw	r19,20(sp)
   11534:	dc800417 	ldw	r18,16(sp)
   11538:	dc400317 	ldw	r17,12(sp)
   1153c:	dc000217 	ldw	r16,8(sp)
   11540:	dec00c04 	addi	sp,sp,48
   11544:	f800283a 	ret
   11548:	a009883a 	mov	r4,r20
   1154c:	800b883a 	mov	r5,r16
   11550:	00108c40 	call	108c4 <__swsetup_r>
   11554:	1000ec1e 	bne	r2,zero,11908 <__sfvwrite_r+0x4a8>
   11558:	8100030b 	ldhu	r4,12(r16)
   1155c:	bc400017 	ldw	r17,0(r23)
   11560:	2080008c 	andi	r2,r4,2
   11564:	103fd61e 	bne	r2,zero,114c0 <__sfvwrite_r+0x60>
   11568:	2080004c 	andi	r2,r4,1
   1156c:	10003a1e 	bne	r2,zero,11658 <__sfvwrite_r+0x1f8>
   11570:	0039883a 	mov	fp,zero
   11574:	0025883a 	mov	r18,zero
   11578:	90001a26 	beq	r18,zero,115e4 <__sfvwrite_r+0x184>
   1157c:	2080800c 	andi	r2,r4,512
   11580:	85800217 	ldw	r22,8(r16)
   11584:	10007626 	beq	r2,zero,11760 <__sfvwrite_r+0x300>
   11588:	b027883a 	mov	r19,r22
   1158c:	95809436 	bltu	r18,r22,117e0 <__sfvwrite_r+0x380>
   11590:	2081200c 	andi	r2,r4,1152
   11594:	10009f1e 	bne	r2,zero,11814 <__sfvwrite_r+0x3b4>
   11598:	81000017 	ldw	r4,0(r16)
   1159c:	e00b883a 	mov	r5,fp
   115a0:	980d883a 	mov	r6,r19
   115a4:	00126280 	call	12628 <memmove>
   115a8:	81000217 	ldw	r4,8(r16)
   115ac:	81400017 	ldw	r5,0(r16)
   115b0:	9005883a 	mov	r2,r18
   115b4:	2587c83a 	sub	r3,r4,r22
   115b8:	2ce7883a 	add	r19,r5,r19
   115bc:	80c00215 	stw	r3,8(r16)
   115c0:	84c00015 	stw	r19,0(r16)
   115c4:	b8c00217 	ldw	r3,8(r23)
   115c8:	e0b9883a 	add	fp,fp,r2
   115cc:	90a5c83a 	sub	r18,r18,r2
   115d0:	1885c83a 	sub	r2,r3,r2
   115d4:	b8800215 	stw	r2,8(r23)
   115d8:	103fce26 	beq	r2,zero,11514 <__sfvwrite_r+0xb4>
   115dc:	8100030b 	ldhu	r4,12(r16)
   115e0:	903fe61e 	bne	r18,zero,1157c <__sfvwrite_r+0x11c>
   115e4:	8f000017 	ldw	fp,0(r17)
   115e8:	8c800117 	ldw	r18,4(r17)
   115ec:	8c400204 	addi	r17,r17,8
   115f0:	003fe106 	br	11578 <__sfvwrite_r+0x118>
   115f4:	8cc00017 	ldw	r19,0(r17)
   115f8:	8c800117 	ldw	r18,4(r17)
   115fc:	8c400204 	addi	r17,r17,8
   11600:	003fb306 	br	114d0 <__sfvwrite_r+0x70>
   11604:	0005883a 	mov	r2,zero
   11608:	f800283a 	ret
   1160c:	00a00034 	movhi	r2,32768
   11610:	10bfffc4 	addi	r2,r2,-1
   11614:	9009883a 	mov	r4,r18
   11618:	1480012e 	bgeu	r2,r18,11620 <__sfvwrite_r+0x1c0>
   1161c:	1009883a 	mov	r4,r2
   11620:	980b883a 	mov	r5,r19
   11624:	00133240 	call	13324 <__divsi3>
   11628:	81400717 	ldw	r5,28(r16)
   1162c:	80c00917 	ldw	r3,36(r16)
   11630:	988f383a 	mul	r7,r19,r2
   11634:	a009883a 	mov	r4,r20
   11638:	e00d883a 	mov	r6,fp
   1163c:	183ee83a 	callr	r3
   11640:	00bfe016 	blt	zero,r2,115c4 <__sfvwrite_r+0x164>
   11644:	8080030b 	ldhu	r2,12(r16)
   11648:	10801014 	ori	r2,r2,64
   1164c:	8080030d 	sth	r2,12(r16)
   11650:	00bfffc4 	movi	r2,-1
   11654:	003fb006 	br	11518 <__sfvwrite_r+0xb8>
   11658:	0027883a 	mov	r19,zero
   1165c:	0011883a 	mov	r8,zero
   11660:	0039883a 	mov	fp,zero
   11664:	0025883a 	mov	r18,zero
   11668:	90001f26 	beq	r18,zero,116e8 <__sfvwrite_r+0x288>
   1166c:	40006026 	beq	r8,zero,117f0 <__sfvwrite_r+0x390>
   11670:	982b883a 	mov	r21,r19
   11674:	94c0012e 	bgeu	r18,r19,1167c <__sfvwrite_r+0x21c>
   11678:	902b883a 	mov	r21,r18
   1167c:	81000017 	ldw	r4,0(r16)
   11680:	80800417 	ldw	r2,16(r16)
   11684:	a82d883a 	mov	r22,r21
   11688:	81800217 	ldw	r6,8(r16)
   1168c:	81c00517 	ldw	r7,20(r16)
   11690:	1100022e 	bgeu	r2,r4,1169c <__sfvwrite_r+0x23c>
   11694:	31c7883a 	add	r3,r6,r7
   11698:	1d401816 	blt	r3,r21,116fc <__sfvwrite_r+0x29c>
   1169c:	a9c04416 	blt	r21,r7,117b0 <__sfvwrite_r+0x350>
   116a0:	80800917 	ldw	r2,36(r16)
   116a4:	81400717 	ldw	r5,28(r16)
   116a8:	a009883a 	mov	r4,r20
   116ac:	da000115 	stw	r8,4(sp)
   116b0:	e00d883a 	mov	r6,fp
   116b4:	103ee83a 	callr	r2
   116b8:	102d883a 	mov	r22,r2
   116bc:	da000117 	ldw	r8,4(sp)
   116c0:	00bfe00e 	bge	zero,r2,11644 <__sfvwrite_r+0x1e4>
   116c4:	9da7c83a 	sub	r19,r19,r22
   116c8:	98001f26 	beq	r19,zero,11748 <__sfvwrite_r+0x2e8>
   116cc:	b8800217 	ldw	r2,8(r23)
   116d0:	e5b9883a 	add	fp,fp,r22
   116d4:	95a5c83a 	sub	r18,r18,r22
   116d8:	15adc83a 	sub	r22,r2,r22
   116dc:	bd800215 	stw	r22,8(r23)
   116e0:	b03f8c26 	beq	r22,zero,11514 <__sfvwrite_r+0xb4>
   116e4:	903fe11e 	bne	r18,zero,1166c <__sfvwrite_r+0x20c>
   116e8:	8f000017 	ldw	fp,0(r17)
   116ec:	8c800117 	ldw	r18,4(r17)
   116f0:	0011883a 	mov	r8,zero
   116f4:	8c400204 	addi	r17,r17,8
   116f8:	003fdb06 	br	11668 <__sfvwrite_r+0x208>
   116fc:	180d883a 	mov	r6,r3
   11700:	e00b883a 	mov	r5,fp
   11704:	da000115 	stw	r8,4(sp)
   11708:	d8c00015 	stw	r3,0(sp)
   1170c:	00126280 	call	12628 <memmove>
   11710:	d8c00017 	ldw	r3,0(sp)
   11714:	80800017 	ldw	r2,0(r16)
   11718:	a009883a 	mov	r4,r20
   1171c:	800b883a 	mov	r5,r16
   11720:	10c5883a 	add	r2,r2,r3
   11724:	80800015 	stw	r2,0(r16)
   11728:	d8c00015 	stw	r3,0(sp)
   1172c:	0010c200 	call	10c20 <_fflush_r>
   11730:	d8c00017 	ldw	r3,0(sp)
   11734:	da000117 	ldw	r8,4(sp)
   11738:	103fc21e 	bne	r2,zero,11644 <__sfvwrite_r+0x1e4>
   1173c:	182d883a 	mov	r22,r3
   11740:	9da7c83a 	sub	r19,r19,r22
   11744:	983fe11e 	bne	r19,zero,116cc <__sfvwrite_r+0x26c>
   11748:	a009883a 	mov	r4,r20
   1174c:	800b883a 	mov	r5,r16
   11750:	0010c200 	call	10c20 <_fflush_r>
   11754:	103fbb1e 	bne	r2,zero,11644 <__sfvwrite_r+0x1e4>
   11758:	0011883a 	mov	r8,zero
   1175c:	003fdb06 	br	116cc <__sfvwrite_r+0x26c>
   11760:	81000017 	ldw	r4,0(r16)
   11764:	80800417 	ldw	r2,16(r16)
   11768:	11000236 	bltu	r2,r4,11774 <__sfvwrite_r+0x314>
   1176c:	84c00517 	ldw	r19,20(r16)
   11770:	94ffa62e 	bgeu	r18,r19,1160c <__sfvwrite_r+0x1ac>
   11774:	9027883a 	mov	r19,r18
   11778:	b480012e 	bgeu	r22,r18,11780 <__sfvwrite_r+0x320>
   1177c:	b027883a 	mov	r19,r22
   11780:	e00b883a 	mov	r5,fp
   11784:	980d883a 	mov	r6,r19
   11788:	00126280 	call	12628 <memmove>
   1178c:	80800217 	ldw	r2,8(r16)
   11790:	80c00017 	ldw	r3,0(r16)
   11794:	14c5c83a 	sub	r2,r2,r19
   11798:	1cc7883a 	add	r3,r3,r19
   1179c:	80800215 	stw	r2,8(r16)
   117a0:	80c00015 	stw	r3,0(r16)
   117a4:	10004326 	beq	r2,zero,118b4 <__sfvwrite_r+0x454>
   117a8:	9805883a 	mov	r2,r19
   117ac:	003f8506 	br	115c4 <__sfvwrite_r+0x164>
   117b0:	a80d883a 	mov	r6,r21
   117b4:	e00b883a 	mov	r5,fp
   117b8:	da000115 	stw	r8,4(sp)
   117bc:	00126280 	call	12628 <memmove>
   117c0:	80800217 	ldw	r2,8(r16)
   117c4:	80c00017 	ldw	r3,0(r16)
   117c8:	da000117 	ldw	r8,4(sp)
   117cc:	1545c83a 	sub	r2,r2,r21
   117d0:	1d6b883a 	add	r21,r3,r21
   117d4:	80800215 	stw	r2,8(r16)
   117d8:	85400015 	stw	r21,0(r16)
   117dc:	003fb906 	br	116c4 <__sfvwrite_r+0x264>
   117e0:	81000017 	ldw	r4,0(r16)
   117e4:	902d883a 	mov	r22,r18
   117e8:	9027883a 	mov	r19,r18
   117ec:	003f6b06 	br	1159c <__sfvwrite_r+0x13c>
   117f0:	e009883a 	mov	r4,fp
   117f4:	01400284 	movi	r5,10
   117f8:	900d883a 	mov	r6,r18
   117fc:	00124080 	call	12408 <memchr>
   11800:	10003e26 	beq	r2,zero,118fc <__sfvwrite_r+0x49c>
   11804:	10800044 	addi	r2,r2,1
   11808:	1727c83a 	sub	r19,r2,fp
   1180c:	02000044 	movi	r8,1
   11810:	003f9706 	br	11670 <__sfvwrite_r+0x210>
   11814:	80800517 	ldw	r2,20(r16)
   11818:	81400417 	ldw	r5,16(r16)
   1181c:	80c00017 	ldw	r3,0(r16)
   11820:	10a7883a 	add	r19,r2,r2
   11824:	9885883a 	add	r2,r19,r2
   11828:	1026d7fa 	srli	r19,r2,31
   1182c:	196bc83a 	sub	r21,r3,r5
   11830:	a9800044 	addi	r6,r21,1
   11834:	9885883a 	add	r2,r19,r2
   11838:	1027d07a 	srai	r19,r2,1
   1183c:	3485883a 	add	r2,r6,r18
   11840:	980d883a 	mov	r6,r19
   11844:	9880022e 	bgeu	r19,r2,11850 <__sfvwrite_r+0x3f0>
   11848:	1027883a 	mov	r19,r2
   1184c:	100d883a 	mov	r6,r2
   11850:	2101000c 	andi	r4,r4,1024
   11854:	20001c26 	beq	r4,zero,118c8 <__sfvwrite_r+0x468>
   11858:	a009883a 	mov	r4,r20
   1185c:	300b883a 	mov	r5,r6
   11860:	0011c600 	call	11c60 <_malloc_r>
   11864:	102d883a 	mov	r22,r2
   11868:	10002926 	beq	r2,zero,11910 <__sfvwrite_r+0x4b0>
   1186c:	81400417 	ldw	r5,16(r16)
   11870:	1009883a 	mov	r4,r2
   11874:	a80d883a 	mov	r6,r21
   11878:	00124f00 	call	124f0 <memcpy>
   1187c:	8080030b 	ldhu	r2,12(r16)
   11880:	00fedfc4 	movi	r3,-1153
   11884:	10c4703a 	and	r2,r2,r3
   11888:	10802014 	ori	r2,r2,128
   1188c:	8080030d 	sth	r2,12(r16)
   11890:	b549883a 	add	r4,r22,r21
   11894:	9d4bc83a 	sub	r5,r19,r21
   11898:	85800415 	stw	r22,16(r16)
   1189c:	84c00515 	stw	r19,20(r16)
   118a0:	81000015 	stw	r4,0(r16)
   118a4:	902d883a 	mov	r22,r18
   118a8:	81400215 	stw	r5,8(r16)
   118ac:	9027883a 	mov	r19,r18
   118b0:	003f3a06 	br	1159c <__sfvwrite_r+0x13c>
   118b4:	a009883a 	mov	r4,r20
   118b8:	800b883a 	mov	r5,r16
   118bc:	0010c200 	call	10c20 <_fflush_r>
   118c0:	103fb926 	beq	r2,zero,117a8 <__sfvwrite_r+0x348>
   118c4:	003f5f06 	br	11644 <__sfvwrite_r+0x1e4>
   118c8:	a009883a 	mov	r4,r20
   118cc:	00128a80 	call	128a8 <_realloc_r>
   118d0:	102d883a 	mov	r22,r2
   118d4:	103fee1e 	bne	r2,zero,11890 <__sfvwrite_r+0x430>
   118d8:	81400417 	ldw	r5,16(r16)
   118dc:	a009883a 	mov	r4,r20
   118e0:	00111700 	call	11170 <_free_r>
   118e4:	8080030b 	ldhu	r2,12(r16)
   118e8:	00ffdfc4 	movi	r3,-129
   118ec:	1884703a 	and	r2,r3,r2
   118f0:	00c00304 	movi	r3,12
   118f4:	a0c00015 	stw	r3,0(r20)
   118f8:	003f5306 	br	11648 <__sfvwrite_r+0x1e8>
   118fc:	94c00044 	addi	r19,r18,1
   11900:	02000044 	movi	r8,1
   11904:	003f5a06 	br	11670 <__sfvwrite_r+0x210>
   11908:	00bfffc4 	movi	r2,-1
   1190c:	003f0206 	br	11518 <__sfvwrite_r+0xb8>
   11910:	00800304 	movi	r2,12
   11914:	a0800015 	stw	r2,0(r20)
   11918:	8080030b 	ldhu	r2,12(r16)
   1191c:	003f4a06 	br	11648 <__sfvwrite_r+0x1e8>

00011920 <_fwalk>:
   11920:	defff704 	addi	sp,sp,-36
   11924:	dd000415 	stw	r20,16(sp)
   11928:	dfc00815 	stw	ra,32(sp)
   1192c:	ddc00715 	stw	r23,28(sp)
   11930:	dd800615 	stw	r22,24(sp)
   11934:	dd400515 	stw	r21,20(sp)
   11938:	dcc00315 	stw	r19,12(sp)
   1193c:	dc800215 	stw	r18,8(sp)
   11940:	dc400115 	stw	r17,4(sp)
   11944:	dc000015 	stw	r16,0(sp)
   11948:	2500b804 	addi	r20,r4,736
   1194c:	a0002326 	beq	r20,zero,119dc <_fwalk+0xbc>
   11950:	282b883a 	mov	r21,r5
   11954:	002f883a 	mov	r23,zero
   11958:	05800044 	movi	r22,1
   1195c:	04ffffc4 	movi	r19,-1
   11960:	a4400117 	ldw	r17,4(r20)
   11964:	a4800217 	ldw	r18,8(r20)
   11968:	8c7fffc4 	addi	r17,r17,-1
   1196c:	88000d16 	blt	r17,zero,119a4 <_fwalk+0x84>
   11970:	94000304 	addi	r16,r18,12
   11974:	94800384 	addi	r18,r18,14
   11978:	80c0000b 	ldhu	r3,0(r16)
   1197c:	8c7fffc4 	addi	r17,r17,-1
   11980:	813ffd04 	addi	r4,r16,-12
   11984:	b0c0042e 	bgeu	r22,r3,11998 <_fwalk+0x78>
   11988:	90c0000f 	ldh	r3,0(r18)
   1198c:	1cc00226 	beq	r3,r19,11998 <_fwalk+0x78>
   11990:	a83ee83a 	callr	r21
   11994:	b8aeb03a 	or	r23,r23,r2
   11998:	84001a04 	addi	r16,r16,104
   1199c:	94801a04 	addi	r18,r18,104
   119a0:	8cfff51e 	bne	r17,r19,11978 <_fwalk+0x58>
   119a4:	a5000017 	ldw	r20,0(r20)
   119a8:	a03fed1e 	bne	r20,zero,11960 <_fwalk+0x40>
   119ac:	b805883a 	mov	r2,r23
   119b0:	dfc00817 	ldw	ra,32(sp)
   119b4:	ddc00717 	ldw	r23,28(sp)
   119b8:	dd800617 	ldw	r22,24(sp)
   119bc:	dd400517 	ldw	r21,20(sp)
   119c0:	dd000417 	ldw	r20,16(sp)
   119c4:	dcc00317 	ldw	r19,12(sp)
   119c8:	dc800217 	ldw	r18,8(sp)
   119cc:	dc400117 	ldw	r17,4(sp)
   119d0:	dc000017 	ldw	r16,0(sp)
   119d4:	dec00904 	addi	sp,sp,36
   119d8:	f800283a 	ret
   119dc:	002f883a 	mov	r23,zero
   119e0:	003ff206 	br	119ac <_fwalk+0x8c>

000119e4 <_fwalk_reent>:
   119e4:	defff704 	addi	sp,sp,-36
   119e8:	dd400515 	stw	r21,20(sp)
   119ec:	dfc00815 	stw	ra,32(sp)
   119f0:	ddc00715 	stw	r23,28(sp)
   119f4:	dd800615 	stw	r22,24(sp)
   119f8:	dd000415 	stw	r20,16(sp)
   119fc:	dcc00315 	stw	r19,12(sp)
   11a00:	dc800215 	stw	r18,8(sp)
   11a04:	dc400115 	stw	r17,4(sp)
   11a08:	dc000015 	stw	r16,0(sp)
   11a0c:	2540b804 	addi	r21,r4,736
   11a10:	a8002326 	beq	r21,zero,11aa0 <_fwalk_reent+0xbc>
   11a14:	2829883a 	mov	r20,r5
   11a18:	202d883a 	mov	r22,r4
   11a1c:	002f883a 	mov	r23,zero
   11a20:	04c00044 	movi	r19,1
   11a24:	04bfffc4 	movi	r18,-1
   11a28:	ac400117 	ldw	r17,4(r21)
   11a2c:	ac000217 	ldw	r16,8(r21)
   11a30:	8c7fffc4 	addi	r17,r17,-1
   11a34:	88000c16 	blt	r17,zero,11a68 <_fwalk_reent+0x84>
   11a38:	84000304 	addi	r16,r16,12
   11a3c:	80c0000b 	ldhu	r3,0(r16)
   11a40:	8c7fffc4 	addi	r17,r17,-1
   11a44:	817ffd04 	addi	r5,r16,-12
   11a48:	98c0052e 	bgeu	r19,r3,11a60 <_fwalk_reent+0x7c>
   11a4c:	80c0008f 	ldh	r3,2(r16)
   11a50:	b009883a 	mov	r4,r22
   11a54:	1c800226 	beq	r3,r18,11a60 <_fwalk_reent+0x7c>
   11a58:	a03ee83a 	callr	r20
   11a5c:	b8aeb03a 	or	r23,r23,r2
   11a60:	84001a04 	addi	r16,r16,104
   11a64:	8cbff51e 	bne	r17,r18,11a3c <_fwalk_reent+0x58>
   11a68:	ad400017 	ldw	r21,0(r21)
   11a6c:	a83fee1e 	bne	r21,zero,11a28 <_fwalk_reent+0x44>
   11a70:	b805883a 	mov	r2,r23
   11a74:	dfc00817 	ldw	ra,32(sp)
   11a78:	ddc00717 	ldw	r23,28(sp)
   11a7c:	dd800617 	ldw	r22,24(sp)
   11a80:	dd400517 	ldw	r21,20(sp)
   11a84:	dd000417 	ldw	r20,16(sp)
   11a88:	dcc00317 	ldw	r19,12(sp)
   11a8c:	dc800217 	ldw	r18,8(sp)
   11a90:	dc400117 	ldw	r17,4(sp)
   11a94:	dc000017 	ldw	r16,0(sp)
   11a98:	dec00904 	addi	sp,sp,36
   11a9c:	f800283a 	ret
   11aa0:	002f883a 	mov	r23,zero
   11aa4:	003ff206 	br	11a70 <_fwalk_reent+0x8c>

00011aa8 <__smakebuf_r>:
   11aa8:	2880030b 	ldhu	r2,12(r5)
   11aac:	10c0008c 	andi	r3,r2,2
   11ab0:	1800401e 	bne	r3,zero,11bb4 <__smakebuf_r+0x10c>
   11ab4:	deffec04 	addi	sp,sp,-80
   11ab8:	dc000f15 	stw	r16,60(sp)
   11abc:	2821883a 	mov	r16,r5
   11ac0:	2940038f 	ldh	r5,14(r5)
   11ac4:	dc401015 	stw	r17,64(sp)
   11ac8:	dfc01315 	stw	ra,76(sp)
   11acc:	dcc01215 	stw	r19,72(sp)
   11ad0:	dc801115 	stw	r18,68(sp)
   11ad4:	2023883a 	mov	r17,r4
   11ad8:	28001b16 	blt	r5,zero,11b48 <__smakebuf_r+0xa0>
   11adc:	d80d883a 	mov	r6,sp
   11ae0:	00131540 	call	13154 <_fstat_r>
   11ae4:	10001716 	blt	r2,zero,11b44 <__smakebuf_r+0x9c>
   11ae8:	d8800117 	ldw	r2,4(sp)
   11aec:	00e00014 	movui	r3,32768
   11af0:	10bc000c 	andi	r2,r2,61440
   11af4:	10c03726 	beq	r2,r3,11bd4 <__smakebuf_r+0x12c>
   11af8:	80c0030b 	ldhu	r3,12(r16)
   11afc:	18c20014 	ori	r3,r3,2048
   11b00:	80c0030d 	sth	r3,12(r16)
   11b04:	00c80004 	movi	r3,8192
   11b08:	10c03c1e 	bne	r2,r3,11bfc <__smakebuf_r+0x154>
   11b0c:	8140038f 	ldh	r5,14(r16)
   11b10:	8809883a 	mov	r4,r17
   11b14:	00131ac0 	call	131ac <_isatty_r>
   11b18:	10004e26 	beq	r2,zero,11c54 <__smakebuf_r+0x1ac>
   11b1c:	8080030b 	ldhu	r2,12(r16)
   11b20:	04c00044 	movi	r19,1
   11b24:	80c010c4 	addi	r3,r16,67
   11b28:	14c4b03a 	or	r2,r2,r19
   11b2c:	8080030d 	sth	r2,12(r16)
   11b30:	80c00015 	stw	r3,0(r16)
   11b34:	80c00415 	stw	r3,16(r16)
   11b38:	84c00515 	stw	r19,20(r16)
   11b3c:	04810004 	movi	r18,1024
   11b40:	00000706 	br	11b60 <__smakebuf_r+0xb8>
   11b44:	8080030b 	ldhu	r2,12(r16)
   11b48:	10c0200c 	andi	r3,r2,128
   11b4c:	18001f1e 	bne	r3,zero,11bcc <__smakebuf_r+0x124>
   11b50:	04810004 	movi	r18,1024
   11b54:	10820014 	ori	r2,r2,2048
   11b58:	8080030d 	sth	r2,12(r16)
   11b5c:	0027883a 	mov	r19,zero
   11b60:	8809883a 	mov	r4,r17
   11b64:	900b883a 	mov	r5,r18
   11b68:	0011c600 	call	11c60 <_malloc_r>
   11b6c:	10002e26 	beq	r2,zero,11c28 <__smakebuf_r+0x180>
   11b70:	80c0030b 	ldhu	r3,12(r16)
   11b74:	01000074 	movhi	r4,1
   11b78:	21032f04 	addi	r4,r4,3260
   11b7c:	89000f15 	stw	r4,60(r17)
   11b80:	18c02014 	ori	r3,r3,128
   11b84:	80c0030d 	sth	r3,12(r16)
   11b88:	80800015 	stw	r2,0(r16)
   11b8c:	80800415 	stw	r2,16(r16)
   11b90:	84800515 	stw	r18,20(r16)
   11b94:	98001c1e 	bne	r19,zero,11c08 <__smakebuf_r+0x160>
   11b98:	dfc01317 	ldw	ra,76(sp)
   11b9c:	dcc01217 	ldw	r19,72(sp)
   11ba0:	dc801117 	ldw	r18,68(sp)
   11ba4:	dc401017 	ldw	r17,64(sp)
   11ba8:	dc000f17 	ldw	r16,60(sp)
   11bac:	dec01404 	addi	sp,sp,80
   11bb0:	f800283a 	ret
   11bb4:	288010c4 	addi	r2,r5,67
   11bb8:	28800015 	stw	r2,0(r5)
   11bbc:	28800415 	stw	r2,16(r5)
   11bc0:	00800044 	movi	r2,1
   11bc4:	28800515 	stw	r2,20(r5)
   11bc8:	f800283a 	ret
   11bcc:	04801004 	movi	r18,64
   11bd0:	003fe006 	br	11b54 <__smakebuf_r+0xac>
   11bd4:	81000a17 	ldw	r4,40(r16)
   11bd8:	00c00074 	movhi	r3,1
   11bdc:	18cbcf04 	addi	r3,r3,12092
   11be0:	20ffc51e 	bne	r4,r3,11af8 <__smakebuf_r+0x50>
   11be4:	80c0030b 	ldhu	r3,12(r16)
   11be8:	01010004 	movi	r4,1024
   11bec:	81001315 	stw	r4,76(r16)
   11bf0:	1906b03a 	or	r3,r3,r4
   11bf4:	80c0030d 	sth	r3,12(r16)
   11bf8:	003fc206 	br	11b04 <__smakebuf_r+0x5c>
   11bfc:	0027883a 	mov	r19,zero
   11c00:	04810004 	movi	r18,1024
   11c04:	003fd606 	br	11b60 <__smakebuf_r+0xb8>
   11c08:	8140038f 	ldh	r5,14(r16)
   11c0c:	8809883a 	mov	r4,r17
   11c10:	00131ac0 	call	131ac <_isatty_r>
   11c14:	103fe026 	beq	r2,zero,11b98 <__smakebuf_r+0xf0>
   11c18:	8080030b 	ldhu	r2,12(r16)
   11c1c:	10800054 	ori	r2,r2,1
   11c20:	8080030d 	sth	r2,12(r16)
   11c24:	003fdc06 	br	11b98 <__smakebuf_r+0xf0>
   11c28:	8080030b 	ldhu	r2,12(r16)
   11c2c:	10c0800c 	andi	r3,r2,512
   11c30:	183fd91e 	bne	r3,zero,11b98 <__smakebuf_r+0xf0>
   11c34:	10800094 	ori	r2,r2,2
   11c38:	80c010c4 	addi	r3,r16,67
   11c3c:	8080030d 	sth	r2,12(r16)
   11c40:	00800044 	movi	r2,1
   11c44:	80c00015 	stw	r3,0(r16)
   11c48:	80c00415 	stw	r3,16(r16)
   11c4c:	80800515 	stw	r2,20(r16)
   11c50:	003fd106 	br	11b98 <__smakebuf_r+0xf0>
   11c54:	04c00044 	movi	r19,1
   11c58:	04810004 	movi	r18,1024
   11c5c:	003fc006 	br	11b60 <__smakebuf_r+0xb8>

00011c60 <_malloc_r>:
   11c60:	defff504 	addi	sp,sp,-44
   11c64:	dc800315 	stw	r18,12(sp)
   11c68:	dfc00a15 	stw	ra,40(sp)
   11c6c:	df000915 	stw	fp,36(sp)
   11c70:	ddc00815 	stw	r23,32(sp)
   11c74:	dd800715 	stw	r22,28(sp)
   11c78:	dd400615 	stw	r21,24(sp)
   11c7c:	dd000515 	stw	r20,20(sp)
   11c80:	dcc00415 	stw	r19,16(sp)
   11c84:	dc400215 	stw	r17,8(sp)
   11c88:	dc000115 	stw	r16,4(sp)
   11c8c:	288002c4 	addi	r2,r5,11
   11c90:	00c00584 	movi	r3,22
   11c94:	2025883a 	mov	r18,r4
   11c98:	18802a2e 	bgeu	r3,r2,11d44 <_malloc_r+0xe4>
   11c9c:	047ffe04 	movi	r17,-8
   11ca0:	1462703a 	and	r17,r2,r17
   11ca4:	88009e16 	blt	r17,zero,11f20 <_malloc_r+0x2c0>
   11ca8:	89409d36 	bltu	r17,r5,11f20 <_malloc_r+0x2c0>
   11cac:	00139a40 	call	139a4 <__malloc_lock>
   11cb0:	00807dc4 	movi	r2,503
   11cb4:	14402736 	bltu	r2,r17,11d54 <_malloc_r+0xf4>
   11cb8:	8806d0fa 	srli	r3,r17,3
   11cbc:	04c00074 	movhi	r19,1
   11cc0:	9cdaae04 	addi	r19,r19,27320
   11cc4:	18c5883a 	add	r2,r3,r3
   11cc8:	1085883a 	add	r2,r2,r2
   11ccc:	1085883a 	add	r2,r2,r2
   11cd0:	9885883a 	add	r2,r19,r2
   11cd4:	14000317 	ldw	r16,12(r2)
   11cd8:	80814a26 	beq	r16,r2,12204 <_malloc_r+0x5a4>
   11cdc:	80c00117 	ldw	r3,4(r16)
   11ce0:	81000317 	ldw	r4,12(r16)
   11ce4:	00bfff04 	movi	r2,-4
   11ce8:	1884703a 	and	r2,r3,r2
   11cec:	81400217 	ldw	r5,8(r16)
   11cf0:	8085883a 	add	r2,r16,r2
   11cf4:	10c00117 	ldw	r3,4(r2)
   11cf8:	29000315 	stw	r4,12(r5)
   11cfc:	21400215 	stw	r5,8(r4)
   11d00:	18c00054 	ori	r3,r3,1
   11d04:	10c00115 	stw	r3,4(r2)
   11d08:	9009883a 	mov	r4,r18
   11d0c:	00139c40 	call	139c4 <__malloc_unlock>
   11d10:	80800204 	addi	r2,r16,8
   11d14:	dfc00a17 	ldw	ra,40(sp)
   11d18:	df000917 	ldw	fp,36(sp)
   11d1c:	ddc00817 	ldw	r23,32(sp)
   11d20:	dd800717 	ldw	r22,28(sp)
   11d24:	dd400617 	ldw	r21,24(sp)
   11d28:	dd000517 	ldw	r20,20(sp)
   11d2c:	dcc00417 	ldw	r19,16(sp)
   11d30:	dc800317 	ldw	r18,12(sp)
   11d34:	dc400217 	ldw	r17,8(sp)
   11d38:	dc000117 	ldw	r16,4(sp)
   11d3c:	dec00b04 	addi	sp,sp,44
   11d40:	f800283a 	ret
   11d44:	04400404 	movi	r17,16
   11d48:	89407536 	bltu	r17,r5,11f20 <_malloc_r+0x2c0>
   11d4c:	00139a40 	call	139a4 <__malloc_lock>
   11d50:	003fd906 	br	11cb8 <_malloc_r+0x58>
   11d54:	8806d27a 	srli	r3,r17,9
   11d58:	18007526 	beq	r3,zero,11f30 <_malloc_r+0x2d0>
   11d5c:	00800104 	movi	r2,4
   11d60:	10c0ef36 	bltu	r2,r3,12120 <_malloc_r+0x4c0>
   11d64:	8806d1ba 	srli	r3,r17,6
   11d68:	19c00e04 	addi	r7,r3,56
   11d6c:	39cb883a 	add	r5,r7,r7
   11d70:	04c00074 	movhi	r19,1
   11d74:	294b883a 	add	r5,r5,r5
   11d78:	9cdaae04 	addi	r19,r19,27320
   11d7c:	294b883a 	add	r5,r5,r5
   11d80:	994b883a 	add	r5,r19,r5
   11d84:	2c000317 	ldw	r16,12(r5)
   11d88:	2c000e26 	beq	r5,r16,11dc4 <_malloc_r+0x164>
   11d8c:	80800117 	ldw	r2,4(r16)
   11d90:	01bfff04 	movi	r6,-4
   11d94:	010003c4 	movi	r4,15
   11d98:	1184703a 	and	r2,r2,r6
   11d9c:	1447c83a 	sub	r3,r2,r17
   11da0:	20c00716 	blt	r4,r3,11dc0 <_malloc_r+0x160>
   11da4:	1800650e 	bge	r3,zero,11f3c <_malloc_r+0x2dc>
   11da8:	84000317 	ldw	r16,12(r16)
   11dac:	2c000526 	beq	r5,r16,11dc4 <_malloc_r+0x164>
   11db0:	80800117 	ldw	r2,4(r16)
   11db4:	1184703a 	and	r2,r2,r6
   11db8:	1447c83a 	sub	r3,r2,r17
   11dbc:	20fff90e 	bge	r4,r3,11da4 <_malloc_r+0x144>
   11dc0:	39ffffc4 	addi	r7,r7,-1
   11dc4:	38c00044 	addi	r3,r7,1
   11dc8:	01800074 	movhi	r6,1
   11dcc:	9c000417 	ldw	r16,16(r19)
   11dd0:	319aae04 	addi	r6,r6,27320
   11dd4:	32400204 	addi	r9,r6,8
   11dd8:	82410326 	beq	r16,r9,121e8 <_malloc_r+0x588>
   11ddc:	81000117 	ldw	r4,4(r16)
   11de0:	00bfff04 	movi	r2,-4
   11de4:	208e703a 	and	r7,r4,r2
   11de8:	3c45c83a 	sub	r2,r7,r17
   11dec:	010003c4 	movi	r4,15
   11df0:	2080ee16 	blt	r4,r2,121ac <_malloc_r+0x54c>
   11df4:	32400515 	stw	r9,20(r6)
   11df8:	32400415 	stw	r9,16(r6)
   11dfc:	1000510e 	bge	r2,zero,11f44 <_malloc_r+0x2e4>
   11e00:	00807fc4 	movi	r2,511
   11e04:	11c0ce36 	bltu	r2,r7,12140 <_malloc_r+0x4e0>
   11e08:	3808d0fa 	srli	r4,r7,3
   11e0c:	01c00044 	movi	r7,1
   11e10:	30800117 	ldw	r2,4(r6)
   11e14:	210b883a 	add	r5,r4,r4
   11e18:	294b883a 	add	r5,r5,r5
   11e1c:	2009d0ba 	srai	r4,r4,2
   11e20:	294b883a 	add	r5,r5,r5
   11e24:	298b883a 	add	r5,r5,r6
   11e28:	2a000217 	ldw	r8,8(r5)
   11e2c:	3908983a 	sll	r4,r7,r4
   11e30:	81400315 	stw	r5,12(r16)
   11e34:	82000215 	stw	r8,8(r16)
   11e38:	2088b03a 	or	r4,r4,r2
   11e3c:	2c000215 	stw	r16,8(r5)
   11e40:	31000115 	stw	r4,4(r6)
   11e44:	44000315 	stw	r16,12(r8)
   11e48:	1805d0ba 	srai	r2,r3,2
   11e4c:	01400044 	movi	r5,1
   11e50:	288a983a 	sll	r5,r5,r2
   11e54:	21404336 	bltu	r4,r5,11f64 <_malloc_r+0x304>
   11e58:	2144703a 	and	r2,r4,r5
   11e5c:	10000a1e 	bne	r2,zero,11e88 <_malloc_r+0x228>
   11e60:	00bfff04 	movi	r2,-4
   11e64:	294b883a 	add	r5,r5,r5
   11e68:	1886703a 	and	r3,r3,r2
   11e6c:	2144703a 	and	r2,r4,r5
   11e70:	18c00104 	addi	r3,r3,4
   11e74:	1000041e 	bne	r2,zero,11e88 <_malloc_r+0x228>
   11e78:	294b883a 	add	r5,r5,r5
   11e7c:	2144703a 	and	r2,r4,r5
   11e80:	18c00104 	addi	r3,r3,4
   11e84:	103ffc26 	beq	r2,zero,11e78 <_malloc_r+0x218>
   11e88:	023fff04 	movi	r8,-4
   11e8c:	01c003c4 	movi	r7,15
   11e90:	18c5883a 	add	r2,r3,r3
   11e94:	1085883a 	add	r2,r2,r2
   11e98:	1085883a 	add	r2,r2,r2
   11e9c:	9895883a 	add	r10,r19,r2
   11ea0:	52c00304 	addi	r11,r10,12
   11ea4:	1819883a 	mov	r12,r3
   11ea8:	5c000017 	ldw	r16,0(r11)
   11eac:	59bffd04 	addi	r6,r11,-12
   11eb0:	8180041e 	bne	r16,r6,11ec4 <_malloc_r+0x264>
   11eb4:	0000ce06 	br	121f0 <_malloc_r+0x590>
   11eb8:	2000d70e 	bge	r4,zero,12218 <_malloc_r+0x5b8>
   11ebc:	84000317 	ldw	r16,12(r16)
   11ec0:	8180cb26 	beq	r16,r6,121f0 <_malloc_r+0x590>
   11ec4:	80800117 	ldw	r2,4(r16)
   11ec8:	1204703a 	and	r2,r2,r8
   11ecc:	1449c83a 	sub	r4,r2,r17
   11ed0:	393ff90e 	bge	r7,r4,11eb8 <_malloc_r+0x258>
   11ed4:	80800317 	ldw	r2,12(r16)
   11ed8:	80c00217 	ldw	r3,8(r16)
   11edc:	89400054 	ori	r5,r17,1
   11ee0:	81400115 	stw	r5,4(r16)
   11ee4:	18800315 	stw	r2,12(r3)
   11ee8:	10c00215 	stw	r3,8(r2)
   11eec:	8463883a 	add	r17,r16,r17
   11ef0:	9c400515 	stw	r17,20(r19)
   11ef4:	9c400415 	stw	r17,16(r19)
   11ef8:	20800054 	ori	r2,r4,1
   11efc:	88800115 	stw	r2,4(r17)
   11f00:	8a400315 	stw	r9,12(r17)
   11f04:	8a400215 	stw	r9,8(r17)
   11f08:	8923883a 	add	r17,r17,r4
   11f0c:	89000015 	stw	r4,0(r17)
   11f10:	9009883a 	mov	r4,r18
   11f14:	00139c40 	call	139c4 <__malloc_unlock>
   11f18:	80800204 	addi	r2,r16,8
   11f1c:	003f7d06 	br	11d14 <_malloc_r+0xb4>
   11f20:	00800304 	movi	r2,12
   11f24:	90800015 	stw	r2,0(r18)
   11f28:	0005883a 	mov	r2,zero
   11f2c:	003f7906 	br	11d14 <_malloc_r+0xb4>
   11f30:	01401f84 	movi	r5,126
   11f34:	01c00fc4 	movi	r7,63
   11f38:	003f8d06 	br	11d70 <_malloc_r+0x110>
   11f3c:	81000317 	ldw	r4,12(r16)
   11f40:	003f6a06 	br	11cec <_malloc_r+0x8c>
   11f44:	81c5883a 	add	r2,r16,r7
   11f48:	10c00117 	ldw	r3,4(r2)
   11f4c:	9009883a 	mov	r4,r18
   11f50:	18c00054 	ori	r3,r3,1
   11f54:	10c00115 	stw	r3,4(r2)
   11f58:	00139c40 	call	139c4 <__malloc_unlock>
   11f5c:	80800204 	addi	r2,r16,8
   11f60:	003f6c06 	br	11d14 <_malloc_r+0xb4>
   11f64:	9c000217 	ldw	r16,8(r19)
   11f68:	00bfff04 	movi	r2,-4
   11f6c:	85800117 	ldw	r22,4(r16)
   11f70:	b0ac703a 	and	r22,r22,r2
   11f74:	b4400336 	bltu	r22,r17,11f84 <_malloc_r+0x324>
   11f78:	b445c83a 	sub	r2,r22,r17
   11f7c:	00c003c4 	movi	r3,15
   11f80:	18805d16 	blt	r3,r2,120f8 <_malloc_r+0x498>
   11f84:	05c000b4 	movhi	r23,2
   11f88:	008000b4 	movhi	r2,2
   11f8c:	bde06504 	addi	r23,r23,-32364
   11f90:	10a73f04 	addi	r2,r2,-25348
   11f94:	15400017 	ldw	r21,0(r2)
   11f98:	b9000017 	ldw	r4,0(r23)
   11f9c:	00ffffc4 	movi	r3,-1
   11fa0:	858d883a 	add	r6,r16,r22
   11fa4:	8d6b883a 	add	r21,r17,r21
   11fa8:	20c0e426 	beq	r4,r3,1233c <_malloc_r+0x6dc>
   11fac:	ad4403c4 	addi	r21,r21,4111
   11fb0:	00fc0004 	movi	r3,-4096
   11fb4:	a8ea703a 	and	r21,r21,r3
   11fb8:	9009883a 	mov	r4,r18
   11fbc:	a80b883a 	mov	r5,r21
   11fc0:	d9800015 	stw	r6,0(sp)
   11fc4:	0012e100 	call	12e10 <_sbrk_r>
   11fc8:	00ffffc4 	movi	r3,-1
   11fcc:	1029883a 	mov	r20,r2
   11fd0:	d9800017 	ldw	r6,0(sp)
   11fd4:	10c0a426 	beq	r2,r3,12268 <_malloc_r+0x608>
   11fd8:	1180a236 	bltu	r2,r6,12264 <_malloc_r+0x604>
   11fdc:	070000b4 	movhi	fp,2
   11fe0:	e7274804 	addi	fp,fp,-25312
   11fe4:	e0c00017 	ldw	r3,0(fp)
   11fe8:	a8c7883a 	add	r3,r21,r3
   11fec:	e0c00015 	stw	r3,0(fp)
   11ff0:	3500da26 	beq	r6,r20,1235c <_malloc_r+0x6fc>
   11ff4:	b9000017 	ldw	r4,0(r23)
   11ff8:	00bfffc4 	movi	r2,-1
   11ffc:	2080e426 	beq	r4,r2,12390 <_malloc_r+0x730>
   12000:	a185c83a 	sub	r2,r20,r6
   12004:	1885883a 	add	r2,r3,r2
   12008:	e0800015 	stw	r2,0(fp)
   1200c:	a0c001cc 	andi	r3,r20,7
   12010:	1800b526 	beq	r3,zero,122e8 <_malloc_r+0x688>
   12014:	a0e9c83a 	sub	r20,r20,r3
   12018:	00840204 	movi	r2,4104
   1201c:	a5000204 	addi	r20,r20,8
   12020:	10c7c83a 	sub	r3,r2,r3
   12024:	a545883a 	add	r2,r20,r21
   12028:	1083ffcc 	andi	r2,r2,4095
   1202c:	18abc83a 	sub	r21,r3,r2
   12030:	9009883a 	mov	r4,r18
   12034:	a80b883a 	mov	r5,r21
   12038:	0012e100 	call	12e10 <_sbrk_r>
   1203c:	00ffffc4 	movi	r3,-1
   12040:	10c0d026 	beq	r2,r3,12384 <_malloc_r+0x724>
   12044:	1507c83a 	sub	r3,r2,r20
   12048:	a8c7883a 	add	r3,r21,r3
   1204c:	18c00054 	ori	r3,r3,1
   12050:	e0800017 	ldw	r2,0(fp)
   12054:	9d000215 	stw	r20,8(r19)
   12058:	a0c00115 	stw	r3,4(r20)
   1205c:	a887883a 	add	r3,r21,r2
   12060:	e0c00015 	stw	r3,0(fp)
   12064:	84c00e26 	beq	r16,r19,120a0 <_malloc_r+0x440>
   12068:	018003c4 	movi	r6,15
   1206c:	3580a02e 	bgeu	r6,r22,122f0 <_malloc_r+0x690>
   12070:	81400117 	ldw	r5,4(r16)
   12074:	013ffe04 	movi	r4,-8
   12078:	b0bffd04 	addi	r2,r22,-12
   1207c:	1104703a 	and	r2,r2,r4
   12080:	2900004c 	andi	r4,r5,1
   12084:	1108b03a 	or	r4,r2,r4
   12088:	81000115 	stw	r4,4(r16)
   1208c:	01400144 	movi	r5,5
   12090:	8089883a 	add	r4,r16,r2
   12094:	21400115 	stw	r5,4(r4)
   12098:	21400215 	stw	r5,8(r4)
   1209c:	3080c036 	bltu	r6,r2,123a0 <_malloc_r+0x740>
   120a0:	008000b4 	movhi	r2,2
   120a4:	10a73e04 	addi	r2,r2,-25352
   120a8:	11000017 	ldw	r4,0(r2)
   120ac:	20c0012e 	bgeu	r4,r3,120b4 <_malloc_r+0x454>
   120b0:	10c00015 	stw	r3,0(r2)
   120b4:	008000b4 	movhi	r2,2
   120b8:	10a73d04 	addi	r2,r2,-25356
   120bc:	11000017 	ldw	r4,0(r2)
   120c0:	9c000217 	ldw	r16,8(r19)
   120c4:	20c0012e 	bgeu	r4,r3,120cc <_malloc_r+0x46c>
   120c8:	10c00015 	stw	r3,0(r2)
   120cc:	80c00117 	ldw	r3,4(r16)
   120d0:	00bfff04 	movi	r2,-4
   120d4:	1886703a 	and	r3,r3,r2
   120d8:	1c45c83a 	sub	r2,r3,r17
   120dc:	1c400236 	bltu	r3,r17,120e8 <_malloc_r+0x488>
   120e0:	00c003c4 	movi	r3,15
   120e4:	18800416 	blt	r3,r2,120f8 <_malloc_r+0x498>
   120e8:	9009883a 	mov	r4,r18
   120ec:	00139c40 	call	139c4 <__malloc_unlock>
   120f0:	0005883a 	mov	r2,zero
   120f4:	003f0706 	br	11d14 <_malloc_r+0xb4>
   120f8:	88c00054 	ori	r3,r17,1
   120fc:	80c00115 	stw	r3,4(r16)
   12100:	8463883a 	add	r17,r16,r17
   12104:	10800054 	ori	r2,r2,1
   12108:	9c400215 	stw	r17,8(r19)
   1210c:	88800115 	stw	r2,4(r17)
   12110:	9009883a 	mov	r4,r18
   12114:	00139c40 	call	139c4 <__malloc_unlock>
   12118:	80800204 	addi	r2,r16,8
   1211c:	003efd06 	br	11d14 <_malloc_r+0xb4>
   12120:	00800504 	movi	r2,20
   12124:	10c0482e 	bgeu	r2,r3,12248 <_malloc_r+0x5e8>
   12128:	00801504 	movi	r2,84
   1212c:	10c06836 	bltu	r2,r3,122d0 <_malloc_r+0x670>
   12130:	8806d33a 	srli	r3,r17,12
   12134:	19c01b84 	addi	r7,r3,110
   12138:	39cb883a 	add	r5,r7,r7
   1213c:	003f0c06 	br	11d70 <_malloc_r+0x110>
   12140:	3804d27a 	srli	r2,r7,9
   12144:	01000104 	movi	r4,4
   12148:	2080422e 	bgeu	r4,r2,12254 <_malloc_r+0x5f4>
   1214c:	01000504 	movi	r4,20
   12150:	20807c36 	bltu	r4,r2,12344 <_malloc_r+0x6e4>
   12154:	110016c4 	addi	r4,r2,91
   12158:	210b883a 	add	r5,r4,r4
   1215c:	294b883a 	add	r5,r5,r5
   12160:	294b883a 	add	r5,r5,r5
   12164:	994b883a 	add	r5,r19,r5
   12168:	28800217 	ldw	r2,8(r5)
   1216c:	02000074 	movhi	r8,1
   12170:	421aae04 	addi	r8,r8,27320
   12174:	11406326 	beq	r2,r5,12304 <_malloc_r+0x6a4>
   12178:	01bfff04 	movi	r6,-4
   1217c:	11000117 	ldw	r4,4(r2)
   12180:	2188703a 	and	r4,r4,r6
   12184:	3900022e 	bgeu	r7,r4,12190 <_malloc_r+0x530>
   12188:	10800217 	ldw	r2,8(r2)
   1218c:	28bffb1e 	bne	r5,r2,1217c <_malloc_r+0x51c>
   12190:	11800317 	ldw	r6,12(r2)
   12194:	99000117 	ldw	r4,4(r19)
   12198:	81800315 	stw	r6,12(r16)
   1219c:	80800215 	stw	r2,8(r16)
   121a0:	34000215 	stw	r16,8(r6)
   121a4:	14000315 	stw	r16,12(r2)
   121a8:	003f2706 	br	11e48 <_malloc_r+0x1e8>
   121ac:	88c00054 	ori	r3,r17,1
   121b0:	80c00115 	stw	r3,4(r16)
   121b4:	8463883a 	add	r17,r16,r17
   121b8:	34400515 	stw	r17,20(r6)
   121bc:	34400415 	stw	r17,16(r6)
   121c0:	10c00054 	ori	r3,r2,1
   121c4:	8a400315 	stw	r9,12(r17)
   121c8:	8a400215 	stw	r9,8(r17)
   121cc:	88c00115 	stw	r3,4(r17)
   121d0:	88a3883a 	add	r17,r17,r2
   121d4:	88800015 	stw	r2,0(r17)
   121d8:	9009883a 	mov	r4,r18
   121dc:	00139c40 	call	139c4 <__malloc_unlock>
   121e0:	80800204 	addi	r2,r16,8
   121e4:	003ecb06 	br	11d14 <_malloc_r+0xb4>
   121e8:	31000117 	ldw	r4,4(r6)
   121ec:	003f1606 	br	11e48 <_malloc_r+0x1e8>
   121f0:	63000044 	addi	r12,r12,1
   121f4:	608000cc 	andi	r2,r12,3
   121f8:	5ac00204 	addi	r11,r11,8
   121fc:	103f2a1e 	bne	r2,zero,11ea8 <_malloc_r+0x248>
   12200:	00002106 	br	12288 <_malloc_r+0x628>
   12204:	80800204 	addi	r2,r16,8
   12208:	84000517 	ldw	r16,20(r16)
   1220c:	143eb31e 	bne	r2,r16,11cdc <_malloc_r+0x7c>
   12210:	18c00084 	addi	r3,r3,2
   12214:	003eec06 	br	11dc8 <_malloc_r+0x168>
   12218:	8085883a 	add	r2,r16,r2
   1221c:	10c00117 	ldw	r3,4(r2)
   12220:	81000317 	ldw	r4,12(r16)
   12224:	81400217 	ldw	r5,8(r16)
   12228:	18c00054 	ori	r3,r3,1
   1222c:	10c00115 	stw	r3,4(r2)
   12230:	29000315 	stw	r4,12(r5)
   12234:	21400215 	stw	r5,8(r4)
   12238:	9009883a 	mov	r4,r18
   1223c:	00139c40 	call	139c4 <__malloc_unlock>
   12240:	80800204 	addi	r2,r16,8
   12244:	003eb306 	br	11d14 <_malloc_r+0xb4>
   12248:	19c016c4 	addi	r7,r3,91
   1224c:	39cb883a 	add	r5,r7,r7
   12250:	003ec706 	br	11d70 <_malloc_r+0x110>
   12254:	3804d1ba 	srli	r2,r7,6
   12258:	11000e04 	addi	r4,r2,56
   1225c:	210b883a 	add	r5,r4,r4
   12260:	003fbe06 	br	1215c <_malloc_r+0x4fc>
   12264:	84ff5d26 	beq	r16,r19,11fdc <_malloc_r+0x37c>
   12268:	9c000217 	ldw	r16,8(r19)
   1226c:	00bfff04 	movi	r2,-4
   12270:	80c00117 	ldw	r3,4(r16)
   12274:	1886703a 	and	r3,r3,r2
   12278:	003f9706 	br	120d8 <_malloc_r+0x478>
   1227c:	52800017 	ldw	r10,0(r10)
   12280:	18ffffc4 	addi	r3,r3,-1
   12284:	50805c1e 	bne	r10,r2,123f8 <_malloc_r+0x798>
   12288:	190000cc 	andi	r4,r3,3
   1228c:	50bffe04 	addi	r2,r10,-8
   12290:	203ffa1e 	bne	r4,zero,1227c <_malloc_r+0x61c>
   12294:	98800117 	ldw	r2,4(r19)
   12298:	0146303a 	nor	r3,zero,r5
   1229c:	1884703a 	and	r2,r3,r2
   122a0:	98800115 	stw	r2,4(r19)
   122a4:	294b883a 	add	r5,r5,r5
   122a8:	117f2e36 	bltu	r2,r5,11f64 <_malloc_r+0x304>
   122ac:	283f2d26 	beq	r5,zero,11f64 <_malloc_r+0x304>
   122b0:	1146703a 	and	r3,r2,r5
   122b4:	1800521e 	bne	r3,zero,12400 <_malloc_r+0x7a0>
   122b8:	6007883a 	mov	r3,r12
   122bc:	294b883a 	add	r5,r5,r5
   122c0:	1148703a 	and	r4,r2,r5
   122c4:	18c00104 	addi	r3,r3,4
   122c8:	203ffc26 	beq	r4,zero,122bc <_malloc_r+0x65c>
   122cc:	003ef006 	br	11e90 <_malloc_r+0x230>
   122d0:	00805504 	movi	r2,340
   122d4:	10c01336 	bltu	r2,r3,12324 <_malloc_r+0x6c4>
   122d8:	8806d3fa 	srli	r3,r17,15
   122dc:	19c01dc4 	addi	r7,r3,119
   122e0:	39cb883a 	add	r5,r7,r7
   122e4:	003ea206 	br	11d70 <_malloc_r+0x110>
   122e8:	00c40004 	movi	r3,4096
   122ec:	003f4d06 	br	12024 <_malloc_r+0x3c4>
   122f0:	00800044 	movi	r2,1
   122f4:	a0800115 	stw	r2,4(r20)
   122f8:	a021883a 	mov	r16,r20
   122fc:	0007883a 	mov	r3,zero
   12300:	003f7506 	br	120d8 <_malloc_r+0x478>
   12304:	200bd0ba 	srai	r5,r4,2
   12308:	01800044 	movi	r6,1
   1230c:	41000117 	ldw	r4,4(r8)
   12310:	314a983a 	sll	r5,r6,r5
   12314:	100d883a 	mov	r6,r2
   12318:	2908b03a 	or	r4,r5,r4
   1231c:	41000115 	stw	r4,4(r8)
   12320:	003f9d06 	br	12198 <_malloc_r+0x538>
   12324:	00815504 	movi	r2,1364
   12328:	10c01336 	bltu	r2,r3,12378 <_malloc_r+0x718>
   1232c:	8806d4ba 	srli	r3,r17,18
   12330:	19c01f04 	addi	r7,r3,124
   12334:	39cb883a 	add	r5,r7,r7
   12338:	003e8d06 	br	11d70 <_malloc_r+0x110>
   1233c:	ad400404 	addi	r21,r21,16
   12340:	003f1d06 	br	11fb8 <_malloc_r+0x358>
   12344:	01001504 	movi	r4,84
   12348:	20801c36 	bltu	r4,r2,123bc <_malloc_r+0x75c>
   1234c:	3804d33a 	srli	r2,r7,12
   12350:	11001b84 	addi	r4,r2,110
   12354:	210b883a 	add	r5,r4,r4
   12358:	003f8006 	br	1215c <_malloc_r+0x4fc>
   1235c:	3083ffcc 	andi	r2,r6,4095
   12360:	103f241e 	bne	r2,zero,11ff4 <_malloc_r+0x394>
   12364:	99000217 	ldw	r4,8(r19)
   12368:	ad85883a 	add	r2,r21,r22
   1236c:	10800054 	ori	r2,r2,1
   12370:	20800115 	stw	r2,4(r4)
   12374:	003f4a06 	br	120a0 <_malloc_r+0x440>
   12378:	01403f04 	movi	r5,252
   1237c:	01c01f84 	movi	r7,126
   12380:	003e7b06 	br	11d70 <_malloc_r+0x110>
   12384:	00c00044 	movi	r3,1
   12388:	002b883a 	mov	r21,zero
   1238c:	003f3006 	br	12050 <_malloc_r+0x3f0>
   12390:	008000b4 	movhi	r2,2
   12394:	10a06504 	addi	r2,r2,-32364
   12398:	15000015 	stw	r20,0(r2)
   1239c:	003f1b06 	br	1200c <_malloc_r+0x3ac>
   123a0:	9009883a 	mov	r4,r18
   123a4:	81400204 	addi	r5,r16,8
   123a8:	00111700 	call	11170 <_free_r>
   123ac:	008000b4 	movhi	r2,2
   123b0:	10a74804 	addi	r2,r2,-25312
   123b4:	10c00017 	ldw	r3,0(r2)
   123b8:	003f3906 	br	120a0 <_malloc_r+0x440>
   123bc:	01005504 	movi	r4,340
   123c0:	20800436 	bltu	r4,r2,123d4 <_malloc_r+0x774>
   123c4:	3804d3fa 	srli	r2,r7,15
   123c8:	11001dc4 	addi	r4,r2,119
   123cc:	210b883a 	add	r5,r4,r4
   123d0:	003f6206 	br	1215c <_malloc_r+0x4fc>
   123d4:	01015504 	movi	r4,1364
   123d8:	20800436 	bltu	r4,r2,123ec <_malloc_r+0x78c>
   123dc:	3804d4ba 	srli	r2,r7,18
   123e0:	11001f04 	addi	r4,r2,124
   123e4:	210b883a 	add	r5,r4,r4
   123e8:	003f5c06 	br	1215c <_malloc_r+0x4fc>
   123ec:	01403f04 	movi	r5,252
   123f0:	01001f84 	movi	r4,126
   123f4:	003f5906 	br	1215c <_malloc_r+0x4fc>
   123f8:	98800117 	ldw	r2,4(r19)
   123fc:	003fa906 	br	122a4 <_malloc_r+0x644>
   12400:	6007883a 	mov	r3,r12
   12404:	003ea206 	br	11e90 <_malloc_r+0x230>

00012408 <memchr>:
   12408:	208000cc 	andi	r2,r4,3
   1240c:	280f883a 	mov	r7,r5
   12410:	10003526 	beq	r2,zero,124e8 <memchr+0xe0>
   12414:	30bfffc4 	addi	r2,r6,-1
   12418:	30001b26 	beq	r6,zero,12488 <memchr+0x80>
   1241c:	21800003 	ldbu	r6,0(r4)
   12420:	28c03fcc 	andi	r3,r5,255
   12424:	30c01a26 	beq	r6,r3,12490 <memchr+0x88>
   12428:	180d883a 	mov	r6,r3
   1242c:	00000406 	br	12440 <memchr+0x38>
   12430:	10001526 	beq	r2,zero,12488 <memchr+0x80>
   12434:	20c00003 	ldbu	r3,0(r4)
   12438:	10bfffc4 	addi	r2,r2,-1
   1243c:	19801426 	beq	r3,r6,12490 <memchr+0x88>
   12440:	21000044 	addi	r4,r4,1
   12444:	20c000cc 	andi	r3,r4,3
   12448:	183ff91e 	bne	r3,zero,12430 <memchr+0x28>
   1244c:	024000c4 	movi	r9,3
   12450:	48801136 	bltu	r9,r2,12498 <memchr+0x90>
   12454:	10000c26 	beq	r2,zero,12488 <memchr+0x80>
   12458:	20c00003 	ldbu	r3,0(r4)
   1245c:	29403fcc 	andi	r5,r5,255
   12460:	19400b26 	beq	r3,r5,12490 <memchr+0x88>
   12464:	20c00044 	addi	r3,r4,1
   12468:	2085883a 	add	r2,r4,r2
   1246c:	39803fcc 	andi	r6,r7,255
   12470:	00000306 	br	12480 <memchr+0x78>
   12474:	18c00044 	addi	r3,r3,1
   12478:	197fffc3 	ldbu	r5,-1(r3)
   1247c:	29800426 	beq	r5,r6,12490 <memchr+0x88>
   12480:	1809883a 	mov	r4,r3
   12484:	18bffb1e 	bne	r3,r2,12474 <memchr+0x6c>
   12488:	0005883a 	mov	r2,zero
   1248c:	f800283a 	ret
   12490:	2005883a 	mov	r2,r4
   12494:	f800283a 	ret
   12498:	28c03fcc 	andi	r3,r5,255
   1249c:	1810923a 	slli	r8,r3,8
   124a0:	02ffbff4 	movhi	r11,65279
   124a4:	02a02074 	movhi	r10,32897
   124a8:	40c6b03a 	or	r3,r8,r3
   124ac:	1810943a 	slli	r8,r3,16
   124b0:	5affbfc4 	addi	r11,r11,-257
   124b4:	52a02004 	addi	r10,r10,-32640
   124b8:	40d0b03a 	or	r8,r8,r3
   124bc:	20c00017 	ldw	r3,0(r4)
   124c0:	40c6f03a 	xor	r3,r8,r3
   124c4:	1acd883a 	add	r6,r3,r11
   124c8:	00c6303a 	nor	r3,zero,r3
   124cc:	30c6703a 	and	r3,r6,r3
   124d0:	1a86703a 	and	r3,r3,r10
   124d4:	183fdf1e 	bne	r3,zero,12454 <memchr+0x4c>
   124d8:	10bfff04 	addi	r2,r2,-4
   124dc:	21000104 	addi	r4,r4,4
   124e0:	48bff636 	bltu	r9,r2,124bc <memchr+0xb4>
   124e4:	003fdb06 	br	12454 <memchr+0x4c>
   124e8:	3005883a 	mov	r2,r6
   124ec:	003fd706 	br	1244c <memchr+0x44>

000124f0 <memcpy>:
   124f0:	deffff04 	addi	sp,sp,-4
   124f4:	dc000015 	stw	r16,0(sp)
   124f8:	00c003c4 	movi	r3,15
   124fc:	2005883a 	mov	r2,r4
   12500:	1980432e 	bgeu	r3,r6,12610 <memcpy+0x120>
   12504:	2146b03a 	or	r3,r4,r5
   12508:	18c000cc 	andi	r3,r3,3
   1250c:	1800421e 	bne	r3,zero,12618 <memcpy+0x128>
   12510:	343ffc04 	addi	r16,r6,-16
   12514:	8020d13a 	srli	r16,r16,4
   12518:	28c00104 	addi	r3,r5,4
   1251c:	23400104 	addi	r13,r4,4
   12520:	801e913a 	slli	r15,r16,4
   12524:	2b000204 	addi	r12,r5,8
   12528:	22c00204 	addi	r11,r4,8
   1252c:	7bc00504 	addi	r15,r15,20
   12530:	2a800304 	addi	r10,r5,12
   12534:	22400304 	addi	r9,r4,12
   12538:	2bdf883a 	add	r15,r5,r15
   1253c:	2811883a 	mov	r8,r5
   12540:	200f883a 	mov	r7,r4
   12544:	41000017 	ldw	r4,0(r8)
   12548:	39c00404 	addi	r7,r7,16
   1254c:	18c00404 	addi	r3,r3,16
   12550:	393ffc15 	stw	r4,-16(r7)
   12554:	1bbffc17 	ldw	r14,-16(r3)
   12558:	6b400404 	addi	r13,r13,16
   1255c:	5ac00404 	addi	r11,r11,16
   12560:	6bbffc15 	stw	r14,-16(r13)
   12564:	63800017 	ldw	r14,0(r12)
   12568:	4a400404 	addi	r9,r9,16
   1256c:	42000404 	addi	r8,r8,16
   12570:	5bbffc15 	stw	r14,-16(r11)
   12574:	53800017 	ldw	r14,0(r10)
   12578:	63000404 	addi	r12,r12,16
   1257c:	52800404 	addi	r10,r10,16
   12580:	4bbffc15 	stw	r14,-16(r9)
   12584:	1bffef1e 	bne	r3,r15,12544 <memcpy+0x54>
   12588:	81c00044 	addi	r7,r16,1
   1258c:	380e913a 	slli	r7,r7,4
   12590:	310003cc 	andi	r4,r6,15
   12594:	02c000c4 	movi	r11,3
   12598:	11c7883a 	add	r3,r2,r7
   1259c:	29cb883a 	add	r5,r5,r7
   125a0:	59001f2e 	bgeu	r11,r4,12620 <memcpy+0x130>
   125a4:	1813883a 	mov	r9,r3
   125a8:	2811883a 	mov	r8,r5
   125ac:	200f883a 	mov	r7,r4
   125b0:	42800017 	ldw	r10,0(r8)
   125b4:	4a400104 	addi	r9,r9,4
   125b8:	39ffff04 	addi	r7,r7,-4
   125bc:	4abfff15 	stw	r10,-4(r9)
   125c0:	42000104 	addi	r8,r8,4
   125c4:	59fffa36 	bltu	r11,r7,125b0 <memcpy+0xc0>
   125c8:	213fff04 	addi	r4,r4,-4
   125cc:	2008d0ba 	srli	r4,r4,2
   125d0:	318000cc 	andi	r6,r6,3
   125d4:	21000044 	addi	r4,r4,1
   125d8:	2109883a 	add	r4,r4,r4
   125dc:	2109883a 	add	r4,r4,r4
   125e0:	1907883a 	add	r3,r3,r4
   125e4:	290b883a 	add	r5,r5,r4
   125e8:	30000626 	beq	r6,zero,12604 <memcpy+0x114>
   125ec:	198d883a 	add	r6,r3,r6
   125f0:	29c00003 	ldbu	r7,0(r5)
   125f4:	18c00044 	addi	r3,r3,1
   125f8:	29400044 	addi	r5,r5,1
   125fc:	19ffffc5 	stb	r7,-1(r3)
   12600:	19bffb1e 	bne	r3,r6,125f0 <memcpy+0x100>
   12604:	dc000017 	ldw	r16,0(sp)
   12608:	dec00104 	addi	sp,sp,4
   1260c:	f800283a 	ret
   12610:	2007883a 	mov	r3,r4
   12614:	003ff406 	br	125e8 <memcpy+0xf8>
   12618:	2007883a 	mov	r3,r4
   1261c:	003ff306 	br	125ec <memcpy+0xfc>
   12620:	200d883a 	mov	r6,r4
   12624:	003ff006 	br	125e8 <memcpy+0xf8>

00012628 <memmove>:
   12628:	2005883a 	mov	r2,r4
   1262c:	29000b2e 	bgeu	r5,r4,1265c <memmove+0x34>
   12630:	298f883a 	add	r7,r5,r6
   12634:	21c0092e 	bgeu	r4,r7,1265c <memmove+0x34>
   12638:	2187883a 	add	r3,r4,r6
   1263c:	198bc83a 	sub	r5,r3,r6
   12640:	30004b26 	beq	r6,zero,12770 <memmove+0x148>
   12644:	39ffffc4 	addi	r7,r7,-1
   12648:	39000003 	ldbu	r4,0(r7)
   1264c:	18ffffc4 	addi	r3,r3,-1
   12650:	19000005 	stb	r4,0(r3)
   12654:	197ffb1e 	bne	r3,r5,12644 <memmove+0x1c>
   12658:	f800283a 	ret
   1265c:	00c003c4 	movi	r3,15
   12660:	1980412e 	bgeu	r3,r6,12768 <memmove+0x140>
   12664:	1146b03a 	or	r3,r2,r5
   12668:	18c000cc 	andi	r3,r3,3
   1266c:	1800411e 	bne	r3,zero,12774 <memmove+0x14c>
   12670:	33fffc04 	addi	r15,r6,-16
   12674:	781ed13a 	srli	r15,r15,4
   12678:	28c00104 	addi	r3,r5,4
   1267c:	13400104 	addi	r13,r2,4
   12680:	781c913a 	slli	r14,r15,4
   12684:	2b000204 	addi	r12,r5,8
   12688:	12c00204 	addi	r11,r2,8
   1268c:	73800504 	addi	r14,r14,20
   12690:	2a800304 	addi	r10,r5,12
   12694:	12400304 	addi	r9,r2,12
   12698:	2b9d883a 	add	r14,r5,r14
   1269c:	2811883a 	mov	r8,r5
   126a0:	100f883a 	mov	r7,r2
   126a4:	41000017 	ldw	r4,0(r8)
   126a8:	39c00404 	addi	r7,r7,16
   126ac:	18c00404 	addi	r3,r3,16
   126b0:	393ffc15 	stw	r4,-16(r7)
   126b4:	193ffc17 	ldw	r4,-16(r3)
   126b8:	6b400404 	addi	r13,r13,16
   126bc:	5ac00404 	addi	r11,r11,16
   126c0:	693ffc15 	stw	r4,-16(r13)
   126c4:	61000017 	ldw	r4,0(r12)
   126c8:	4a400404 	addi	r9,r9,16
   126cc:	42000404 	addi	r8,r8,16
   126d0:	593ffc15 	stw	r4,-16(r11)
   126d4:	51000017 	ldw	r4,0(r10)
   126d8:	63000404 	addi	r12,r12,16
   126dc:	52800404 	addi	r10,r10,16
   126e0:	493ffc15 	stw	r4,-16(r9)
   126e4:	1bbfef1e 	bne	r3,r14,126a4 <memmove+0x7c>
   126e8:	79000044 	addi	r4,r15,1
   126ec:	2008913a 	slli	r4,r4,4
   126f0:	328003cc 	andi	r10,r6,15
   126f4:	02c000c4 	movi	r11,3
   126f8:	1107883a 	add	r3,r2,r4
   126fc:	290b883a 	add	r5,r5,r4
   12700:	5a801e2e 	bgeu	r11,r10,1277c <memmove+0x154>
   12704:	1813883a 	mov	r9,r3
   12708:	2811883a 	mov	r8,r5
   1270c:	500f883a 	mov	r7,r10
   12710:	41000017 	ldw	r4,0(r8)
   12714:	4a400104 	addi	r9,r9,4
   12718:	39ffff04 	addi	r7,r7,-4
   1271c:	493fff15 	stw	r4,-4(r9)
   12720:	42000104 	addi	r8,r8,4
   12724:	59fffa36 	bltu	r11,r7,12710 <memmove+0xe8>
   12728:	513fff04 	addi	r4,r10,-4
   1272c:	2008d0ba 	srli	r4,r4,2
   12730:	318000cc 	andi	r6,r6,3
   12734:	21000044 	addi	r4,r4,1
   12738:	2109883a 	add	r4,r4,r4
   1273c:	2109883a 	add	r4,r4,r4
   12740:	1907883a 	add	r3,r3,r4
   12744:	290b883a 	add	r5,r5,r4
   12748:	30000926 	beq	r6,zero,12770 <memmove+0x148>
   1274c:	198d883a 	add	r6,r3,r6
   12750:	29c00003 	ldbu	r7,0(r5)
   12754:	18c00044 	addi	r3,r3,1
   12758:	29400044 	addi	r5,r5,1
   1275c:	19ffffc5 	stb	r7,-1(r3)
   12760:	19bffb1e 	bne	r3,r6,12750 <memmove+0x128>
   12764:	f800283a 	ret
   12768:	1007883a 	mov	r3,r2
   1276c:	003ff606 	br	12748 <memmove+0x120>
   12770:	f800283a 	ret
   12774:	1007883a 	mov	r3,r2
   12778:	003ff406 	br	1274c <memmove+0x124>
   1277c:	500d883a 	mov	r6,r10
   12780:	003ff106 	br	12748 <memmove+0x120>

00012784 <memset>:
   12784:	20c000cc 	andi	r3,r4,3
   12788:	2005883a 	mov	r2,r4
   1278c:	18004326 	beq	r3,zero,1289c <memset+0x118>
   12790:	31ffffc4 	addi	r7,r6,-1
   12794:	30004026 	beq	r6,zero,12898 <memset+0x114>
   12798:	2813883a 	mov	r9,r5
   1279c:	200d883a 	mov	r6,r4
   127a0:	2007883a 	mov	r3,r4
   127a4:	00000406 	br	127b8 <memset+0x34>
   127a8:	3a3fffc4 	addi	r8,r7,-1
   127ac:	31800044 	addi	r6,r6,1
   127b0:	38003926 	beq	r7,zero,12898 <memset+0x114>
   127b4:	400f883a 	mov	r7,r8
   127b8:	18c00044 	addi	r3,r3,1
   127bc:	32400005 	stb	r9,0(r6)
   127c0:	1a0000cc 	andi	r8,r3,3
   127c4:	403ff81e 	bne	r8,zero,127a8 <memset+0x24>
   127c8:	010000c4 	movi	r4,3
   127cc:	21c02d2e 	bgeu	r4,r7,12884 <memset+0x100>
   127d0:	29803fcc 	andi	r6,r5,255
   127d4:	3008923a 	slli	r4,r6,8
   127d8:	218cb03a 	or	r6,r4,r6
   127dc:	3008943a 	slli	r4,r6,16
   127e0:	218cb03a 	or	r6,r4,r6
   127e4:	010003c4 	movi	r4,15
   127e8:	21c0182e 	bgeu	r4,r7,1284c <memset+0xc8>
   127ec:	3b3ffc04 	addi	r12,r7,-16
   127f0:	6018d13a 	srli	r12,r12,4
   127f4:	1a000104 	addi	r8,r3,4
   127f8:	1ac00204 	addi	r11,r3,8
   127fc:	6008913a 	slli	r4,r12,4
   12800:	1a800304 	addi	r10,r3,12
   12804:	1813883a 	mov	r9,r3
   12808:	21000504 	addi	r4,r4,20
   1280c:	1909883a 	add	r4,r3,r4
   12810:	49800015 	stw	r6,0(r9)
   12814:	41800015 	stw	r6,0(r8)
   12818:	59800015 	stw	r6,0(r11)
   1281c:	51800015 	stw	r6,0(r10)
   12820:	42000404 	addi	r8,r8,16
   12824:	4a400404 	addi	r9,r9,16
   12828:	5ac00404 	addi	r11,r11,16
   1282c:	52800404 	addi	r10,r10,16
   12830:	413ff71e 	bne	r8,r4,12810 <memset+0x8c>
   12834:	63000044 	addi	r12,r12,1
   12838:	6018913a 	slli	r12,r12,4
   1283c:	39c003cc 	andi	r7,r7,15
   12840:	010000c4 	movi	r4,3
   12844:	1b07883a 	add	r3,r3,r12
   12848:	21c00e2e 	bgeu	r4,r7,12884 <memset+0x100>
   1284c:	1813883a 	mov	r9,r3
   12850:	3811883a 	mov	r8,r7
   12854:	010000c4 	movi	r4,3
   12858:	49800015 	stw	r6,0(r9)
   1285c:	423fff04 	addi	r8,r8,-4
   12860:	4a400104 	addi	r9,r9,4
   12864:	223ffc36 	bltu	r4,r8,12858 <memset+0xd4>
   12868:	393fff04 	addi	r4,r7,-4
   1286c:	2008d0ba 	srli	r4,r4,2
   12870:	39c000cc 	andi	r7,r7,3
   12874:	21000044 	addi	r4,r4,1
   12878:	2109883a 	add	r4,r4,r4
   1287c:	2109883a 	add	r4,r4,r4
   12880:	1907883a 	add	r3,r3,r4
   12884:	38000426 	beq	r7,zero,12898 <memset+0x114>
   12888:	19cf883a 	add	r7,r3,r7
   1288c:	19400005 	stb	r5,0(r3)
   12890:	18c00044 	addi	r3,r3,1
   12894:	19fffd1e 	bne	r3,r7,1288c <memset+0x108>
   12898:	f800283a 	ret
   1289c:	2007883a 	mov	r3,r4
   128a0:	300f883a 	mov	r7,r6
   128a4:	003fc806 	br	127c8 <memset+0x44>

000128a8 <_realloc_r>:
   128a8:	defff604 	addi	sp,sp,-40
   128ac:	dd000415 	stw	r20,16(sp)
   128b0:	dc400115 	stw	r17,4(sp)
   128b4:	dfc00915 	stw	ra,36(sp)
   128b8:	df000815 	stw	fp,32(sp)
   128bc:	ddc00715 	stw	r23,28(sp)
   128c0:	dd800615 	stw	r22,24(sp)
   128c4:	dd400515 	stw	r21,20(sp)
   128c8:	dcc00315 	stw	r19,12(sp)
   128cc:	dc800215 	stw	r18,8(sp)
   128d0:	dc000015 	stw	r16,0(sp)
   128d4:	2829883a 	mov	r20,r5
   128d8:	3023883a 	mov	r17,r6
   128dc:	2800ad26 	beq	r5,zero,12b94 <_realloc_r+0x2ec>
   128e0:	2025883a 	mov	r18,r4
   128e4:	00139a40 	call	139a4 <__malloc_lock>
   128e8:	a0ffff17 	ldw	r3,-4(r20)
   128ec:	043fff04 	movi	r16,-4
   128f0:	890002c4 	addi	r4,r17,11
   128f4:	01c00584 	movi	r7,22
   128f8:	a57ffe04 	addi	r21,r20,-8
   128fc:	1c20703a 	and	r16,r3,r16
   12900:	39001d2e 	bgeu	r7,r4,12978 <_realloc_r+0xd0>
   12904:	05bffe04 	movi	r22,-8
   12908:	25ac703a 	and	r22,r4,r22
   1290c:	b00f883a 	mov	r7,r22
   12910:	b0006516 	blt	r22,zero,12aa8 <_realloc_r+0x200>
   12914:	b4406436 	bltu	r22,r17,12aa8 <_realloc_r+0x200>
   12918:	81c01a0e 	bge	r16,r7,12984 <_realloc_r+0xdc>
   1291c:	07000074 	movhi	fp,1
   12920:	e71aae04 	addi	fp,fp,27320
   12924:	e1400217 	ldw	r5,8(fp)
   12928:	ac11883a 	add	r8,r21,r16
   1292c:	2a006226 	beq	r5,r8,12ab8 <_realloc_r+0x210>
   12930:	41800117 	ldw	r6,4(r8)
   12934:	027fff84 	movi	r9,-2
   12938:	3252703a 	and	r9,r6,r9
   1293c:	4253883a 	add	r9,r8,r9
   12940:	49000117 	ldw	r4,4(r9)
   12944:	2100004c 	andi	r4,r4,1
   12948:	2000281e 	bne	r4,zero,129ec <_realloc_r+0x144>
   1294c:	00bfff04 	movi	r2,-4
   12950:	3084703a 	and	r2,r6,r2
   12954:	1409883a 	add	r4,r2,r16
   12958:	21c05e16 	blt	r4,r7,12ad4 <_realloc_r+0x22c>
   1295c:	40800317 	ldw	r2,12(r8)
   12960:	41400217 	ldw	r5,8(r8)
   12964:	a023883a 	mov	r17,r20
   12968:	2021883a 	mov	r16,r4
   1296c:	28800315 	stw	r2,12(r5)
   12970:	11400215 	stw	r5,8(r2)
   12974:	00000406 	br	12988 <_realloc_r+0xe0>
   12978:	01c00404 	movi	r7,16
   1297c:	382d883a 	mov	r22,r7
   12980:	003fe406 	br	12914 <_realloc_r+0x6c>
   12984:	a023883a 	mov	r17,r20
   12988:	858fc83a 	sub	r7,r16,r22
   1298c:	008003c4 	movi	r2,15
   12990:	18c0004c 	andi	r3,r3,1
   12994:	11c07236 	bltu	r2,r7,12b60 <_realloc_r+0x2b8>
   12998:	1c06b03a 	or	r3,r3,r16
   1299c:	a8c00115 	stw	r3,4(r21)
   129a0:	ac21883a 	add	r16,r21,r16
   129a4:	80800117 	ldw	r2,4(r16)
   129a8:	10800054 	ori	r2,r2,1
   129ac:	80800115 	stw	r2,4(r16)
   129b0:	9009883a 	mov	r4,r18
   129b4:	00139c40 	call	139c4 <__malloc_unlock>
   129b8:	8805883a 	mov	r2,r17
   129bc:	dfc00917 	ldw	ra,36(sp)
   129c0:	df000817 	ldw	fp,32(sp)
   129c4:	ddc00717 	ldw	r23,28(sp)
   129c8:	dd800617 	ldw	r22,24(sp)
   129cc:	dd400517 	ldw	r21,20(sp)
   129d0:	dd000417 	ldw	r20,16(sp)
   129d4:	dcc00317 	ldw	r19,12(sp)
   129d8:	dc800217 	ldw	r18,8(sp)
   129dc:	dc400117 	ldw	r17,4(sp)
   129e0:	dc000017 	ldw	r16,0(sp)
   129e4:	dec00a04 	addi	sp,sp,40
   129e8:	f800283a 	ret
   129ec:	18c0004c 	andi	r3,r3,1
   129f0:	1800081e 	bne	r3,zero,12a14 <_realloc_r+0x16c>
   129f4:	a4fffe17 	ldw	r19,-8(r20)
   129f8:	00bfff04 	movi	r2,-4
   129fc:	ace7c83a 	sub	r19,r21,r19
   12a00:	98c00117 	ldw	r3,4(r19)
   12a04:	1886703a 	and	r3,r3,r2
   12a08:	98000226 	beq	r19,zero,12a14 <_realloc_r+0x16c>
   12a0c:	1c2f883a 	add	r23,r3,r16
   12a10:	b9c06d0e 	bge	r23,r7,12bc8 <_realloc_r+0x320>
   12a14:	880b883a 	mov	r5,r17
   12a18:	9009883a 	mov	r4,r18
   12a1c:	0011c600 	call	11c60 <_malloc_r>
   12a20:	1023883a 	mov	r17,r2
   12a24:	1000ef26 	beq	r2,zero,12de4 <_realloc_r+0x53c>
   12a28:	a0ffff17 	ldw	r3,-4(r20)
   12a2c:	113ffe04 	addi	r4,r2,-8
   12a30:	00bfff84 	movi	r2,-2
   12a34:	1884703a 	and	r2,r3,r2
   12a38:	a885883a 	add	r2,r21,r2
   12a3c:	2080bf26 	beq	r4,r2,12d3c <_realloc_r+0x494>
   12a40:	81bfff04 	addi	r6,r16,-4
   12a44:	00800904 	movi	r2,36
   12a48:	11808936 	bltu	r2,r6,12c70 <_realloc_r+0x3c8>
   12a4c:	00c004c4 	movi	r3,19
   12a50:	19806c2e 	bgeu	r3,r6,12c04 <_realloc_r+0x35c>
   12a54:	a0c00017 	ldw	r3,0(r20)
   12a58:	88c00015 	stw	r3,0(r17)
   12a5c:	a0c00117 	ldw	r3,4(r20)
   12a60:	88c00115 	stw	r3,4(r17)
   12a64:	00c006c4 	movi	r3,27
   12a68:	1980ac36 	bltu	r3,r6,12d1c <_realloc_r+0x474>
   12a6c:	88800204 	addi	r2,r17,8
   12a70:	a0c00204 	addi	r3,r20,8
   12a74:	19000017 	ldw	r4,0(r3)
   12a78:	11000015 	stw	r4,0(r2)
   12a7c:	19000117 	ldw	r4,4(r3)
   12a80:	11000115 	stw	r4,4(r2)
   12a84:	18c00217 	ldw	r3,8(r3)
   12a88:	10c00215 	stw	r3,8(r2)
   12a8c:	a00b883a 	mov	r5,r20
   12a90:	9009883a 	mov	r4,r18
   12a94:	00111700 	call	11170 <_free_r>
   12a98:	9009883a 	mov	r4,r18
   12a9c:	00139c40 	call	139c4 <__malloc_unlock>
   12aa0:	8805883a 	mov	r2,r17
   12aa4:	003fc506 	br	129bc <_realloc_r+0x114>
   12aa8:	00800304 	movi	r2,12
   12aac:	90800015 	stw	r2,0(r18)
   12ab0:	0005883a 	mov	r2,zero
   12ab4:	003fc106 	br	129bc <_realloc_r+0x114>
   12ab8:	29800117 	ldw	r6,4(r5)
   12abc:	00bfff04 	movi	r2,-4
   12ac0:	b1000404 	addi	r4,r22,16
   12ac4:	3084703a 	and	r2,r6,r2
   12ac8:	140d883a 	add	r6,r2,r16
   12acc:	31005b0e 	bge	r6,r4,12c3c <_realloc_r+0x394>
   12ad0:	2811883a 	mov	r8,r5
   12ad4:	18c0004c 	andi	r3,r3,1
   12ad8:	183fce1e 	bne	r3,zero,12a14 <_realloc_r+0x16c>
   12adc:	a4fffe17 	ldw	r19,-8(r20)
   12ae0:	00ffff04 	movi	r3,-4
   12ae4:	ace7c83a 	sub	r19,r21,r19
   12ae8:	99000117 	ldw	r4,4(r19)
   12aec:	20c6703a 	and	r3,r4,r3
   12af0:	403fc526 	beq	r8,zero,12a08 <_realloc_r+0x160>
   12af4:	1c2f883a 	add	r23,r3,r16
   12af8:	b8af883a 	add	r23,r23,r2
   12afc:	41406026 	beq	r8,r5,12c80 <_realloc_r+0x3d8>
   12b00:	b9ffc116 	blt	r23,r7,12a08 <_realloc_r+0x160>
   12b04:	40c00217 	ldw	r3,8(r8)
   12b08:	40800317 	ldw	r2,12(r8)
   12b0c:	81bfff04 	addi	r6,r16,-4
   12b10:	01000904 	movi	r4,36
   12b14:	18800315 	stw	r2,12(r3)
   12b18:	10c00215 	stw	r3,8(r2)
   12b1c:	99400217 	ldw	r5,8(r19)
   12b20:	98c00317 	ldw	r3,12(r19)
   12b24:	9c400204 	addi	r17,r19,8
   12b28:	28c00315 	stw	r3,12(r5)
   12b2c:	19400215 	stw	r5,8(r3)
   12b30:	21802d36 	bltu	r4,r6,12be8 <_realloc_r+0x340>
   12b34:	008004c4 	movi	r2,19
   12b38:	1180352e 	bgeu	r2,r6,12c10 <_realloc_r+0x368>
   12b3c:	a0800017 	ldw	r2,0(r20)
   12b40:	98800215 	stw	r2,8(r19)
   12b44:	a0800117 	ldw	r2,4(r20)
   12b48:	98800315 	stw	r2,12(r19)
   12b4c:	008006c4 	movi	r2,27
   12b50:	11808036 	bltu	r2,r6,12d54 <_realloc_r+0x4ac>
   12b54:	98c00404 	addi	r3,r19,16
   12b58:	a5000204 	addi	r20,r20,8
   12b5c:	00002d06 	br	12c14 <_realloc_r+0x36c>
   12b60:	1d86b03a 	or	r3,r3,r22
   12b64:	ad8b883a 	add	r5,r21,r22
   12b68:	a8c00115 	stw	r3,4(r21)
   12b6c:	38800054 	ori	r2,r7,1
   12b70:	28800115 	stw	r2,4(r5)
   12b74:	29cf883a 	add	r7,r5,r7
   12b78:	38800117 	ldw	r2,4(r7)
   12b7c:	9009883a 	mov	r4,r18
   12b80:	29400204 	addi	r5,r5,8
   12b84:	10800054 	ori	r2,r2,1
   12b88:	38800115 	stw	r2,4(r7)
   12b8c:	00111700 	call	11170 <_free_r>
   12b90:	003f8706 	br	129b0 <_realloc_r+0x108>
   12b94:	300b883a 	mov	r5,r6
   12b98:	dfc00917 	ldw	ra,36(sp)
   12b9c:	df000817 	ldw	fp,32(sp)
   12ba0:	ddc00717 	ldw	r23,28(sp)
   12ba4:	dd800617 	ldw	r22,24(sp)
   12ba8:	dd400517 	ldw	r21,20(sp)
   12bac:	dd000417 	ldw	r20,16(sp)
   12bb0:	dcc00317 	ldw	r19,12(sp)
   12bb4:	dc800217 	ldw	r18,8(sp)
   12bb8:	dc400117 	ldw	r17,4(sp)
   12bbc:	dc000017 	ldw	r16,0(sp)
   12bc0:	dec00a04 	addi	sp,sp,40
   12bc4:	0011c601 	jmpi	11c60 <_malloc_r>
   12bc8:	98800317 	ldw	r2,12(r19)
   12bcc:	98c00217 	ldw	r3,8(r19)
   12bd0:	81bfff04 	addi	r6,r16,-4
   12bd4:	01000904 	movi	r4,36
   12bd8:	18800315 	stw	r2,12(r3)
   12bdc:	10c00215 	stw	r3,8(r2)
   12be0:	9c400204 	addi	r17,r19,8
   12be4:	21bfd32e 	bgeu	r4,r6,12b34 <_realloc_r+0x28c>
   12be8:	8809883a 	mov	r4,r17
   12bec:	a00b883a 	mov	r5,r20
   12bf0:	00126280 	call	12628 <memmove>
   12bf4:	98c00117 	ldw	r3,4(r19)
   12bf8:	b821883a 	mov	r16,r23
   12bfc:	982b883a 	mov	r21,r19
   12c00:	003f6106 	br	12988 <_realloc_r+0xe0>
   12c04:	8805883a 	mov	r2,r17
   12c08:	a007883a 	mov	r3,r20
   12c0c:	003f9906 	br	12a74 <_realloc_r+0x1cc>
   12c10:	8807883a 	mov	r3,r17
   12c14:	a0800017 	ldw	r2,0(r20)
   12c18:	b821883a 	mov	r16,r23
   12c1c:	982b883a 	mov	r21,r19
   12c20:	18800015 	stw	r2,0(r3)
   12c24:	a0800117 	ldw	r2,4(r20)
   12c28:	18800115 	stw	r2,4(r3)
   12c2c:	a0800217 	ldw	r2,8(r20)
   12c30:	18800215 	stw	r2,8(r3)
   12c34:	98c00117 	ldw	r3,4(r19)
   12c38:	003f5306 	br	12988 <_realloc_r+0xe0>
   12c3c:	adab883a 	add	r21,r21,r22
   12c40:	3585c83a 	sub	r2,r6,r22
   12c44:	e5400215 	stw	r21,8(fp)
   12c48:	10800054 	ori	r2,r2,1
   12c4c:	a8800115 	stw	r2,4(r21)
   12c50:	a0bfff17 	ldw	r2,-4(r20)
   12c54:	9009883a 	mov	r4,r18
   12c58:	1080004c 	andi	r2,r2,1
   12c5c:	b0acb03a 	or	r22,r22,r2
   12c60:	a5bfff15 	stw	r22,-4(r20)
   12c64:	00139c40 	call	139c4 <__malloc_unlock>
   12c68:	a005883a 	mov	r2,r20
   12c6c:	003f5306 	br	129bc <_realloc_r+0x114>
   12c70:	8809883a 	mov	r4,r17
   12c74:	a00b883a 	mov	r5,r20
   12c78:	00126280 	call	12628 <memmove>
   12c7c:	003f8306 	br	12a8c <_realloc_r+0x1e4>
   12c80:	b0800404 	addi	r2,r22,16
   12c84:	b8bf6016 	blt	r23,r2,12a08 <_realloc_r+0x160>
   12c88:	98800317 	ldw	r2,12(r19)
   12c8c:	98c00217 	ldw	r3,8(r19)
   12c90:	81bfff04 	addi	r6,r16,-4
   12c94:	01000904 	movi	r4,36
   12c98:	18800315 	stw	r2,12(r3)
   12c9c:	10c00215 	stw	r3,8(r2)
   12ca0:	9c400204 	addi	r17,r19,8
   12ca4:	21804336 	bltu	r4,r6,12db4 <_realloc_r+0x50c>
   12ca8:	008004c4 	movi	r2,19
   12cac:	11803f2e 	bgeu	r2,r6,12dac <_realloc_r+0x504>
   12cb0:	a0800017 	ldw	r2,0(r20)
   12cb4:	98800215 	stw	r2,8(r19)
   12cb8:	a0800117 	ldw	r2,4(r20)
   12cbc:	98800315 	stw	r2,12(r19)
   12cc0:	008006c4 	movi	r2,27
   12cc4:	11803f36 	bltu	r2,r6,12dc4 <_realloc_r+0x51c>
   12cc8:	98800404 	addi	r2,r19,16
   12ccc:	a5000204 	addi	r20,r20,8
   12cd0:	a0c00017 	ldw	r3,0(r20)
   12cd4:	10c00015 	stw	r3,0(r2)
   12cd8:	a0c00117 	ldw	r3,4(r20)
   12cdc:	10c00115 	stw	r3,4(r2)
   12ce0:	a0c00217 	ldw	r3,8(r20)
   12ce4:	10c00215 	stw	r3,8(r2)
   12ce8:	9d87883a 	add	r3,r19,r22
   12cec:	bd85c83a 	sub	r2,r23,r22
   12cf0:	e0c00215 	stw	r3,8(fp)
   12cf4:	10800054 	ori	r2,r2,1
   12cf8:	18800115 	stw	r2,4(r3)
   12cfc:	98800117 	ldw	r2,4(r19)
   12d00:	9009883a 	mov	r4,r18
   12d04:	1080004c 	andi	r2,r2,1
   12d08:	b0acb03a 	or	r22,r22,r2
   12d0c:	9d800115 	stw	r22,4(r19)
   12d10:	00139c40 	call	139c4 <__malloc_unlock>
   12d14:	8805883a 	mov	r2,r17
   12d18:	003f2806 	br	129bc <_realloc_r+0x114>
   12d1c:	a0c00217 	ldw	r3,8(r20)
   12d20:	88c00215 	stw	r3,8(r17)
   12d24:	a0c00317 	ldw	r3,12(r20)
   12d28:	88c00315 	stw	r3,12(r17)
   12d2c:	30801126 	beq	r6,r2,12d74 <_realloc_r+0x4cc>
   12d30:	88800404 	addi	r2,r17,16
   12d34:	a0c00404 	addi	r3,r20,16
   12d38:	003f4e06 	br	12a74 <_realloc_r+0x1cc>
   12d3c:	893fff17 	ldw	r4,-4(r17)
   12d40:	00bfff04 	movi	r2,-4
   12d44:	a023883a 	mov	r17,r20
   12d48:	2084703a 	and	r2,r4,r2
   12d4c:	80a1883a 	add	r16,r16,r2
   12d50:	003f0d06 	br	12988 <_realloc_r+0xe0>
   12d54:	a0800217 	ldw	r2,8(r20)
   12d58:	98800415 	stw	r2,16(r19)
   12d5c:	a0800317 	ldw	r2,12(r20)
   12d60:	98800515 	stw	r2,20(r19)
   12d64:	31000a26 	beq	r6,r4,12d90 <_realloc_r+0x4e8>
   12d68:	98c00604 	addi	r3,r19,24
   12d6c:	a5000404 	addi	r20,r20,16
   12d70:	003fa806 	br	12c14 <_realloc_r+0x36c>
   12d74:	a1000417 	ldw	r4,16(r20)
   12d78:	88800604 	addi	r2,r17,24
   12d7c:	a0c00604 	addi	r3,r20,24
   12d80:	89000415 	stw	r4,16(r17)
   12d84:	a1000517 	ldw	r4,20(r20)
   12d88:	89000515 	stw	r4,20(r17)
   12d8c:	003f3906 	br	12a74 <_realloc_r+0x1cc>
   12d90:	a0800417 	ldw	r2,16(r20)
   12d94:	a5000604 	addi	r20,r20,24
   12d98:	98c00804 	addi	r3,r19,32
   12d9c:	98800615 	stw	r2,24(r19)
   12da0:	a0bfff17 	ldw	r2,-4(r20)
   12da4:	98800715 	stw	r2,28(r19)
   12da8:	003f9a06 	br	12c14 <_realloc_r+0x36c>
   12dac:	8805883a 	mov	r2,r17
   12db0:	003fc706 	br	12cd0 <_realloc_r+0x428>
   12db4:	8809883a 	mov	r4,r17
   12db8:	a00b883a 	mov	r5,r20
   12dbc:	00126280 	call	12628 <memmove>
   12dc0:	003fc906 	br	12ce8 <_realloc_r+0x440>
   12dc4:	a0800217 	ldw	r2,8(r20)
   12dc8:	98800415 	stw	r2,16(r19)
   12dcc:	a0800317 	ldw	r2,12(r20)
   12dd0:	98800515 	stw	r2,20(r19)
   12dd4:	31000726 	beq	r6,r4,12df4 <_realloc_r+0x54c>
   12dd8:	98800604 	addi	r2,r19,24
   12ddc:	a5000404 	addi	r20,r20,16
   12de0:	003fbb06 	br	12cd0 <_realloc_r+0x428>
   12de4:	9009883a 	mov	r4,r18
   12de8:	00139c40 	call	139c4 <__malloc_unlock>
   12dec:	0005883a 	mov	r2,zero
   12df0:	003ef206 	br	129bc <_realloc_r+0x114>
   12df4:	a0c00417 	ldw	r3,16(r20)
   12df8:	a5000604 	addi	r20,r20,24
   12dfc:	98800804 	addi	r2,r19,32
   12e00:	98c00615 	stw	r3,24(r19)
   12e04:	a0ffff17 	ldw	r3,-4(r20)
   12e08:	98c00715 	stw	r3,28(r19)
   12e0c:	003fb006 	br	12cd0 <_realloc_r+0x428>

00012e10 <_sbrk_r>:
   12e10:	defffd04 	addi	sp,sp,-12
   12e14:	dc000015 	stw	r16,0(sp)
   12e18:	040000b4 	movhi	r16,2
   12e1c:	dc400115 	stw	r17,4(sp)
   12e20:	84274004 	addi	r16,r16,-25344
   12e24:	2023883a 	mov	r17,r4
   12e28:	2809883a 	mov	r4,r5
   12e2c:	dfc00215 	stw	ra,8(sp)
   12e30:	80000015 	stw	zero,0(r16)
   12e34:	0013b900 	call	13b90 <sbrk>
   12e38:	00ffffc4 	movi	r3,-1
   12e3c:	10c00526 	beq	r2,r3,12e54 <_sbrk_r+0x44>
   12e40:	dfc00217 	ldw	ra,8(sp)
   12e44:	dc400117 	ldw	r17,4(sp)
   12e48:	dc000017 	ldw	r16,0(sp)
   12e4c:	dec00304 	addi	sp,sp,12
   12e50:	f800283a 	ret
   12e54:	80c00017 	ldw	r3,0(r16)
   12e58:	183ff926 	beq	r3,zero,12e40 <_sbrk_r+0x30>
   12e5c:	88c00015 	stw	r3,0(r17)
   12e60:	003ff706 	br	12e40 <_sbrk_r+0x30>

00012e64 <__sread>:
   12e64:	defffe04 	addi	sp,sp,-8
   12e68:	dc000015 	stw	r16,0(sp)
   12e6c:	2821883a 	mov	r16,r5
   12e70:	2940038f 	ldh	r5,14(r5)
   12e74:	dfc00115 	stw	ra,4(sp)
   12e78:	001325c0 	call	1325c <_read_r>
   12e7c:	10000716 	blt	r2,zero,12e9c <__sread+0x38>
   12e80:	80c01417 	ldw	r3,80(r16)
   12e84:	1887883a 	add	r3,r3,r2
   12e88:	80c01415 	stw	r3,80(r16)
   12e8c:	dfc00117 	ldw	ra,4(sp)
   12e90:	dc000017 	ldw	r16,0(sp)
   12e94:	dec00204 	addi	sp,sp,8
   12e98:	f800283a 	ret
   12e9c:	80c0030b 	ldhu	r3,12(r16)
   12ea0:	18fbffcc 	andi	r3,r3,61439
   12ea4:	80c0030d 	sth	r3,12(r16)
   12ea8:	dfc00117 	ldw	ra,4(sp)
   12eac:	dc000017 	ldw	r16,0(sp)
   12eb0:	dec00204 	addi	sp,sp,8
   12eb4:	f800283a 	ret

00012eb8 <__seofread>:
   12eb8:	0005883a 	mov	r2,zero
   12ebc:	f800283a 	ret

00012ec0 <__swrite>:
   12ec0:	2880030b 	ldhu	r2,12(r5)
   12ec4:	defffb04 	addi	sp,sp,-20
   12ec8:	dcc00315 	stw	r19,12(sp)
   12ecc:	dc800215 	stw	r18,8(sp)
   12ed0:	dc400115 	stw	r17,4(sp)
   12ed4:	dc000015 	stw	r16,0(sp)
   12ed8:	dfc00415 	stw	ra,16(sp)
   12edc:	10c0400c 	andi	r3,r2,256
   12ee0:	2821883a 	mov	r16,r5
   12ee4:	2027883a 	mov	r19,r4
   12ee8:	3025883a 	mov	r18,r6
   12eec:	3823883a 	mov	r17,r7
   12ef0:	18000526 	beq	r3,zero,12f08 <__swrite+0x48>
   12ef4:	2940038f 	ldh	r5,14(r5)
   12ef8:	000d883a 	mov	r6,zero
   12efc:	01c00084 	movi	r7,2
   12f00:	00132000 	call	13200 <_lseek_r>
   12f04:	8080030b 	ldhu	r2,12(r16)
   12f08:	8140038f 	ldh	r5,14(r16)
   12f0c:	10bbffcc 	andi	r2,r2,61439
   12f10:	9809883a 	mov	r4,r19
   12f14:	900d883a 	mov	r6,r18
   12f18:	880f883a 	mov	r7,r17
   12f1c:	8080030d 	sth	r2,12(r16)
   12f20:	dfc00417 	ldw	ra,16(sp)
   12f24:	dcc00317 	ldw	r19,12(sp)
   12f28:	dc800217 	ldw	r18,8(sp)
   12f2c:	dc400117 	ldw	r17,4(sp)
   12f30:	dc000017 	ldw	r16,0(sp)
   12f34:	dec00504 	addi	sp,sp,20
   12f38:	0012fa01 	jmpi	12fa0 <_write_r>

00012f3c <__sseek>:
   12f3c:	defffe04 	addi	sp,sp,-8
   12f40:	dc000015 	stw	r16,0(sp)
   12f44:	2821883a 	mov	r16,r5
   12f48:	2940038f 	ldh	r5,14(r5)
   12f4c:	dfc00115 	stw	ra,4(sp)
   12f50:	00132000 	call	13200 <_lseek_r>
   12f54:	00ffffc4 	movi	r3,-1
   12f58:	10c00826 	beq	r2,r3,12f7c <__sseek+0x40>
   12f5c:	80c0030b 	ldhu	r3,12(r16)
   12f60:	80801415 	stw	r2,80(r16)
   12f64:	18c40014 	ori	r3,r3,4096
   12f68:	80c0030d 	sth	r3,12(r16)
   12f6c:	dfc00117 	ldw	ra,4(sp)
   12f70:	dc000017 	ldw	r16,0(sp)
   12f74:	dec00204 	addi	sp,sp,8
   12f78:	f800283a 	ret
   12f7c:	80c0030b 	ldhu	r3,12(r16)
   12f80:	18fbffcc 	andi	r3,r3,61439
   12f84:	80c0030d 	sth	r3,12(r16)
   12f88:	dfc00117 	ldw	ra,4(sp)
   12f8c:	dc000017 	ldw	r16,0(sp)
   12f90:	dec00204 	addi	sp,sp,8
   12f94:	f800283a 	ret

00012f98 <__sclose>:
   12f98:	2940038f 	ldh	r5,14(r5)
   12f9c:	0012ffc1 	jmpi	12ffc <_close_r>

00012fa0 <_write_r>:
   12fa0:	defffd04 	addi	sp,sp,-12
   12fa4:	dc000015 	stw	r16,0(sp)
   12fa8:	040000b4 	movhi	r16,2
   12fac:	dc400115 	stw	r17,4(sp)
   12fb0:	84274004 	addi	r16,r16,-25344
   12fb4:	2023883a 	mov	r17,r4
   12fb8:	2809883a 	mov	r4,r5
   12fbc:	300b883a 	mov	r5,r6
   12fc0:	380d883a 	mov	r6,r7
   12fc4:	dfc00215 	stw	ra,8(sp)
   12fc8:	80000015 	stw	zero,0(r16)
   12fcc:	0013cc00 	call	13cc0 <write>
   12fd0:	00ffffc4 	movi	r3,-1
   12fd4:	10c00526 	beq	r2,r3,12fec <_write_r+0x4c>
   12fd8:	dfc00217 	ldw	ra,8(sp)
   12fdc:	dc400117 	ldw	r17,4(sp)
   12fe0:	dc000017 	ldw	r16,0(sp)
   12fe4:	dec00304 	addi	sp,sp,12
   12fe8:	f800283a 	ret
   12fec:	80c00017 	ldw	r3,0(r16)
   12ff0:	183ff926 	beq	r3,zero,12fd8 <_write_r+0x38>
   12ff4:	88c00015 	stw	r3,0(r17)
   12ff8:	003ff706 	br	12fd8 <_write_r+0x38>

00012ffc <_close_r>:
   12ffc:	defffd04 	addi	sp,sp,-12
   13000:	dc000015 	stw	r16,0(sp)
   13004:	040000b4 	movhi	r16,2
   13008:	dc400115 	stw	r17,4(sp)
   1300c:	84274004 	addi	r16,r16,-25344
   13010:	2023883a 	mov	r17,r4
   13014:	2809883a 	mov	r4,r5
   13018:	dfc00215 	stw	ra,8(sp)
   1301c:	80000015 	stw	zero,0(r16)
   13020:	00134340 	call	13434 <close>
   13024:	00ffffc4 	movi	r3,-1
   13028:	10c00526 	beq	r2,r3,13040 <_close_r+0x44>
   1302c:	dfc00217 	ldw	ra,8(sp)
   13030:	dc400117 	ldw	r17,4(sp)
   13034:	dc000017 	ldw	r16,0(sp)
   13038:	dec00304 	addi	sp,sp,12
   1303c:	f800283a 	ret
   13040:	80c00017 	ldw	r3,0(r16)
   13044:	183ff926 	beq	r3,zero,1302c <_close_r+0x30>
   13048:	88c00015 	stw	r3,0(r17)
   1304c:	003ff706 	br	1302c <_close_r+0x30>

00013050 <_fclose_r>:
   13050:	28003926 	beq	r5,zero,13138 <_fclose_r+0xe8>
   13054:	defffc04 	addi	sp,sp,-16
   13058:	dc400115 	stw	r17,4(sp)
   1305c:	dc000015 	stw	r16,0(sp)
   13060:	dfc00315 	stw	ra,12(sp)
   13064:	dc800215 	stw	r18,8(sp)
   13068:	2023883a 	mov	r17,r4
   1306c:	2821883a 	mov	r16,r5
   13070:	20000226 	beq	r4,zero,1307c <_fclose_r+0x2c>
   13074:	20800e17 	ldw	r2,56(r4)
   13078:	10002726 	beq	r2,zero,13118 <_fclose_r+0xc8>
   1307c:	8080030f 	ldh	r2,12(r16)
   13080:	1000071e 	bne	r2,zero,130a0 <_fclose_r+0x50>
   13084:	0005883a 	mov	r2,zero
   13088:	dfc00317 	ldw	ra,12(sp)
   1308c:	dc800217 	ldw	r18,8(sp)
   13090:	dc400117 	ldw	r17,4(sp)
   13094:	dc000017 	ldw	r16,0(sp)
   13098:	dec00404 	addi	sp,sp,16
   1309c:	f800283a 	ret
   130a0:	8809883a 	mov	r4,r17
   130a4:	800b883a 	mov	r5,r16
   130a8:	0010a180 	call	10a18 <__sflush_r>
   130ac:	1025883a 	mov	r18,r2
   130b0:	80800b17 	ldw	r2,44(r16)
   130b4:	10000426 	beq	r2,zero,130c8 <_fclose_r+0x78>
   130b8:	81400717 	ldw	r5,28(r16)
   130bc:	8809883a 	mov	r4,r17
   130c0:	103ee83a 	callr	r2
   130c4:	10001616 	blt	r2,zero,13120 <_fclose_r+0xd0>
   130c8:	8080030b 	ldhu	r2,12(r16)
   130cc:	1080200c 	andi	r2,r2,128
   130d0:	1000151e 	bne	r2,zero,13128 <_fclose_r+0xd8>
   130d4:	81400c17 	ldw	r5,48(r16)
   130d8:	28000526 	beq	r5,zero,130f0 <_fclose_r+0xa0>
   130dc:	80801004 	addi	r2,r16,64
   130e0:	28800226 	beq	r5,r2,130ec <_fclose_r+0x9c>
   130e4:	8809883a 	mov	r4,r17
   130e8:	00111700 	call	11170 <_free_r>
   130ec:	80000c15 	stw	zero,48(r16)
   130f0:	81401117 	ldw	r5,68(r16)
   130f4:	28000326 	beq	r5,zero,13104 <_fclose_r+0xb4>
   130f8:	8809883a 	mov	r4,r17
   130fc:	00111700 	call	11170 <_free_r>
   13100:	80001115 	stw	zero,68(r16)
   13104:	001100c0 	call	1100c <__sfp_lock_acquire>
   13108:	8000030d 	sth	zero,12(r16)
   1310c:	00110100 	call	11010 <__sfp_lock_release>
   13110:	9005883a 	mov	r2,r18
   13114:	003fdc06 	br	13088 <_fclose_r+0x38>
   13118:	0010ffc0 	call	10ffc <__sinit>
   1311c:	003fd706 	br	1307c <_fclose_r+0x2c>
   13120:	04bfffc4 	movi	r18,-1
   13124:	003fe806 	br	130c8 <_fclose_r+0x78>
   13128:	81400417 	ldw	r5,16(r16)
   1312c:	8809883a 	mov	r4,r17
   13130:	00111700 	call	11170 <_free_r>
   13134:	003fe706 	br	130d4 <_fclose_r+0x84>
   13138:	0005883a 	mov	r2,zero
   1313c:	f800283a 	ret

00013140 <fclose>:
   13140:	008000b4 	movhi	r2,2
   13144:	10a06404 	addi	r2,r2,-32368
   13148:	200b883a 	mov	r5,r4
   1314c:	11000017 	ldw	r4,0(r2)
   13150:	00130501 	jmpi	13050 <_fclose_r>

00013154 <_fstat_r>:
   13154:	defffd04 	addi	sp,sp,-12
   13158:	dc000015 	stw	r16,0(sp)
   1315c:	040000b4 	movhi	r16,2
   13160:	dc400115 	stw	r17,4(sp)
   13164:	84274004 	addi	r16,r16,-25344
   13168:	2023883a 	mov	r17,r4
   1316c:	2809883a 	mov	r4,r5
   13170:	300b883a 	mov	r5,r6
   13174:	dfc00215 	stw	ra,8(sp)
   13178:	80000015 	stw	zero,0(r16)
   1317c:	00135800 	call	13580 <fstat>
   13180:	00ffffc4 	movi	r3,-1
   13184:	10c00526 	beq	r2,r3,1319c <_fstat_r+0x48>
   13188:	dfc00217 	ldw	ra,8(sp)
   1318c:	dc400117 	ldw	r17,4(sp)
   13190:	dc000017 	ldw	r16,0(sp)
   13194:	dec00304 	addi	sp,sp,12
   13198:	f800283a 	ret
   1319c:	80c00017 	ldw	r3,0(r16)
   131a0:	183ff926 	beq	r3,zero,13188 <_fstat_r+0x34>
   131a4:	88c00015 	stw	r3,0(r17)
   131a8:	003ff706 	br	13188 <_fstat_r+0x34>

000131ac <_isatty_r>:
   131ac:	defffd04 	addi	sp,sp,-12
   131b0:	dc000015 	stw	r16,0(sp)
   131b4:	040000b4 	movhi	r16,2
   131b8:	dc400115 	stw	r17,4(sp)
   131bc:	84274004 	addi	r16,r16,-25344
   131c0:	2023883a 	mov	r17,r4
   131c4:	2809883a 	mov	r4,r5
   131c8:	dfc00215 	stw	ra,8(sp)
   131cc:	80000015 	stw	zero,0(r16)
   131d0:	00136800 	call	13680 <isatty>
   131d4:	00ffffc4 	movi	r3,-1
   131d8:	10c00526 	beq	r2,r3,131f0 <_isatty_r+0x44>
   131dc:	dfc00217 	ldw	ra,8(sp)
   131e0:	dc400117 	ldw	r17,4(sp)
   131e4:	dc000017 	ldw	r16,0(sp)
   131e8:	dec00304 	addi	sp,sp,12
   131ec:	f800283a 	ret
   131f0:	80c00017 	ldw	r3,0(r16)
   131f4:	183ff926 	beq	r3,zero,131dc <_isatty_r+0x30>
   131f8:	88c00015 	stw	r3,0(r17)
   131fc:	003ff706 	br	131dc <_isatty_r+0x30>

00013200 <_lseek_r>:
   13200:	defffd04 	addi	sp,sp,-12
   13204:	dc000015 	stw	r16,0(sp)
   13208:	040000b4 	movhi	r16,2
   1320c:	dc400115 	stw	r17,4(sp)
   13210:	84274004 	addi	r16,r16,-25344
   13214:	2023883a 	mov	r17,r4
   13218:	2809883a 	mov	r4,r5
   1321c:	300b883a 	mov	r5,r6
   13220:	380d883a 	mov	r6,r7
   13224:	dfc00215 	stw	ra,8(sp)
   13228:	80000015 	stw	zero,0(r16)
   1322c:	00138580 	call	13858 <lseek>
   13230:	00ffffc4 	movi	r3,-1
   13234:	10c00526 	beq	r2,r3,1324c <_lseek_r+0x4c>
   13238:	dfc00217 	ldw	ra,8(sp)
   1323c:	dc400117 	ldw	r17,4(sp)
   13240:	dc000017 	ldw	r16,0(sp)
   13244:	dec00304 	addi	sp,sp,12
   13248:	f800283a 	ret
   1324c:	80c00017 	ldw	r3,0(r16)
   13250:	183ff926 	beq	r3,zero,13238 <_lseek_r+0x38>
   13254:	88c00015 	stw	r3,0(r17)
   13258:	003ff706 	br	13238 <_lseek_r+0x38>

0001325c <_read_r>:
   1325c:	defffd04 	addi	sp,sp,-12
   13260:	dc000015 	stw	r16,0(sp)
   13264:	040000b4 	movhi	r16,2
   13268:	dc400115 	stw	r17,4(sp)
   1326c:	84274004 	addi	r16,r16,-25344
   13270:	2023883a 	mov	r17,r4
   13274:	2809883a 	mov	r4,r5
   13278:	300b883a 	mov	r5,r6
   1327c:	380d883a 	mov	r6,r7
   13280:	dfc00215 	stw	ra,8(sp)
   13284:	80000015 	stw	zero,0(r16)
   13288:	0013a340 	call	13a34 <read>
   1328c:	00ffffc4 	movi	r3,-1
   13290:	10c00526 	beq	r2,r3,132a8 <_read_r+0x4c>
   13294:	dfc00217 	ldw	ra,8(sp)
   13298:	dc400117 	ldw	r17,4(sp)
   1329c:	dc000017 	ldw	r16,0(sp)
   132a0:	dec00304 	addi	sp,sp,12
   132a4:	f800283a 	ret
   132a8:	80c00017 	ldw	r3,0(r16)
   132ac:	183ff926 	beq	r3,zero,13294 <_read_r+0x38>
   132b0:	88c00015 	stw	r3,0(r17)
   132b4:	003ff706 	br	13294 <_read_r+0x38>

000132b8 <udivmodsi4>:
   132b8:	2900182e 	bgeu	r5,r4,1331c <udivmodsi4+0x64>
   132bc:	28001716 	blt	r5,zero,1331c <udivmodsi4+0x64>
   132c0:	00800804 	movi	r2,32
   132c4:	00c00044 	movi	r3,1
   132c8:	00000206 	br	132d4 <udivmodsi4+0x1c>
   132cc:	10001126 	beq	r2,zero,13314 <udivmodsi4+0x5c>
   132d0:	28000516 	blt	r5,zero,132e8 <udivmodsi4+0x30>
   132d4:	294b883a 	add	r5,r5,r5
   132d8:	10bfffc4 	addi	r2,r2,-1
   132dc:	18c7883a 	add	r3,r3,r3
   132e0:	293ffa36 	bltu	r5,r4,132cc <udivmodsi4+0x14>
   132e4:	18000b26 	beq	r3,zero,13314 <udivmodsi4+0x5c>
   132e8:	0005883a 	mov	r2,zero
   132ec:	21400236 	bltu	r4,r5,132f8 <udivmodsi4+0x40>
   132f0:	2149c83a 	sub	r4,r4,r5
   132f4:	10c4b03a 	or	r2,r2,r3
   132f8:	1806d07a 	srli	r3,r3,1
   132fc:	280ad07a 	srli	r5,r5,1
   13300:	183ffa1e 	bne	r3,zero,132ec <udivmodsi4+0x34>
   13304:	3000011e 	bne	r6,zero,1330c <udivmodsi4+0x54>
   13308:	f800283a 	ret
   1330c:	2005883a 	mov	r2,r4
   13310:	f800283a 	ret
   13314:	0005883a 	mov	r2,zero
   13318:	003ffa06 	br	13304 <udivmodsi4+0x4c>
   1331c:	00c00044 	movi	r3,1
   13320:	003ff106 	br	132e8 <udivmodsi4+0x30>

00013324 <__divsi3>:
   13324:	defffe04 	addi	sp,sp,-8
   13328:	dfc00115 	stw	ra,4(sp)
   1332c:	dc000015 	stw	r16,0(sp)
   13330:	20000b16 	blt	r4,zero,13360 <__divsi3+0x3c>
   13334:	0021883a 	mov	r16,zero
   13338:	28000c16 	blt	r5,zero,1336c <__divsi3+0x48>
   1333c:	000d883a 	mov	r6,zero
   13340:	00132b80 	call	132b8 <udivmodsi4>
   13344:	0407c83a 	sub	r3,zero,r16
   13348:	1884f03a 	xor	r2,r3,r2
   1334c:	1405883a 	add	r2,r2,r16
   13350:	dfc00117 	ldw	ra,4(sp)
   13354:	dc000017 	ldw	r16,0(sp)
   13358:	dec00204 	addi	sp,sp,8
   1335c:	f800283a 	ret
   13360:	0109c83a 	sub	r4,zero,r4
   13364:	04000044 	movi	r16,1
   13368:	283ff40e 	bge	r5,zero,1333c <__divsi3+0x18>
   1336c:	014bc83a 	sub	r5,zero,r5
   13370:	8400005c 	xori	r16,r16,1
   13374:	003ff106 	br	1333c <__divsi3+0x18>

00013378 <__modsi3>:
   13378:	defffd04 	addi	sp,sp,-12
   1337c:	dfc00215 	stw	ra,8(sp)
   13380:	dc400115 	stw	r17,4(sp)
   13384:	dc000015 	stw	r16,0(sp)
   13388:	20000c16 	blt	r4,zero,133bc <__modsi3+0x44>
   1338c:	0023883a 	mov	r17,zero
   13390:	0021883a 	mov	r16,zero
   13394:	28000d16 	blt	r5,zero,133cc <__modsi3+0x54>
   13398:	01800044 	movi	r6,1
   1339c:	00132b80 	call	132b8 <udivmodsi4>
   133a0:	1404f03a 	xor	r2,r2,r16
   133a4:	8885883a 	add	r2,r17,r2
   133a8:	dfc00217 	ldw	ra,8(sp)
   133ac:	dc400117 	ldw	r17,4(sp)
   133b0:	dc000017 	ldw	r16,0(sp)
   133b4:	dec00304 	addi	sp,sp,12
   133b8:	f800283a 	ret
   133bc:	0109c83a 	sub	r4,zero,r4
   133c0:	04400044 	movi	r17,1
   133c4:	043fffc4 	movi	r16,-1
   133c8:	283ff30e 	bge	r5,zero,13398 <__modsi3+0x20>
   133cc:	014bc83a 	sub	r5,zero,r5
   133d0:	003ff106 	br	13398 <__modsi3+0x20>

000133d4 <__udivsi3>:
   133d4:	000d883a 	mov	r6,zero
   133d8:	00132b81 	jmpi	132b8 <udivmodsi4>

000133dc <__umodsi3>:
   133dc:	01800044 	movi	r6,1
   133e0:	00132b81 	jmpi	132b8 <udivmodsi4>

000133e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133e4:	defffe04 	addi	sp,sp,-8
   133e8:	dfc00115 	stw	ra,4(sp)
   133ec:	df000015 	stw	fp,0(sp)
   133f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133f4:	008000b4 	movhi	r2,2
   133f8:	10a06c04 	addi	r2,r2,-32336
   133fc:	10800017 	ldw	r2,0(r2)
   13400:	10000526 	beq	r2,zero,13418 <alt_get_errno+0x34>
   13404:	008000b4 	movhi	r2,2
   13408:	10a06c04 	addi	r2,r2,-32336
   1340c:	10800017 	ldw	r2,0(r2)
   13410:	103ee83a 	callr	r2
   13414:	00000206 	br	13420 <alt_get_errno+0x3c>
   13418:	008000b4 	movhi	r2,2
   1341c:	10a74004 	addi	r2,r2,-25344
}
   13420:	e037883a 	mov	sp,fp
   13424:	dfc00117 	ldw	ra,4(sp)
   13428:	df000017 	ldw	fp,0(sp)
   1342c:	dec00204 	addi	sp,sp,8
   13430:	f800283a 	ret

00013434 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13434:	defffb04 	addi	sp,sp,-20
   13438:	dfc00415 	stw	ra,16(sp)
   1343c:	df000315 	stw	fp,12(sp)
   13440:	df000304 	addi	fp,sp,12
   13444:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13448:	e0bfff17 	ldw	r2,-4(fp)
   1344c:	10000616 	blt	r2,zero,13468 <close+0x34>
   13450:	e0bfff17 	ldw	r2,-4(fp)
   13454:	10c00324 	muli	r3,r2,12
   13458:	00800074 	movhi	r2,1
   1345c:	109bba04 	addi	r2,r2,28392
   13460:	1885883a 	add	r2,r3,r2
   13464:	00000106 	br	1346c <close+0x38>
   13468:	0005883a 	mov	r2,zero
   1346c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13470:	e0bffd17 	ldw	r2,-12(fp)
   13474:	10001926 	beq	r2,zero,134dc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13478:	e0bffd17 	ldw	r2,-12(fp)
   1347c:	10800017 	ldw	r2,0(r2)
   13480:	10800417 	ldw	r2,16(r2)
   13484:	10000626 	beq	r2,zero,134a0 <close+0x6c>
   13488:	e0bffd17 	ldw	r2,-12(fp)
   1348c:	10800017 	ldw	r2,0(r2)
   13490:	10800417 	ldw	r2,16(r2)
   13494:	e13ffd17 	ldw	r4,-12(fp)
   13498:	103ee83a 	callr	r2
   1349c:	00000106 	br	134a4 <close+0x70>
   134a0:	0005883a 	mov	r2,zero
   134a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   134a8:	e13fff17 	ldw	r4,-4(fp)
   134ac:	0013b300 	call	13b30 <alt_release_fd>
    if (rval < 0)
   134b0:	e0bffe17 	ldw	r2,-8(fp)
   134b4:	1000070e 	bge	r2,zero,134d4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   134b8:	00133e40 	call	133e4 <alt_get_errno>
   134bc:	1007883a 	mov	r3,r2
   134c0:	e0bffe17 	ldw	r2,-8(fp)
   134c4:	0085c83a 	sub	r2,zero,r2
   134c8:	18800015 	stw	r2,0(r3)
      return -1;
   134cc:	00bfffc4 	movi	r2,-1
   134d0:	00000706 	br	134f0 <close+0xbc>
    }
    return 0;
   134d4:	0005883a 	mov	r2,zero
   134d8:	00000506 	br	134f0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   134dc:	00133e40 	call	133e4 <alt_get_errno>
   134e0:	1007883a 	mov	r3,r2
   134e4:	00801444 	movi	r2,81
   134e8:	18800015 	stw	r2,0(r3)
    return -1;
   134ec:	00bfffc4 	movi	r2,-1
  }
}
   134f0:	e037883a 	mov	sp,fp
   134f4:	dfc00117 	ldw	ra,4(sp)
   134f8:	df000017 	ldw	fp,0(sp)
   134fc:	dec00204 	addi	sp,sp,8
   13500:	f800283a 	ret

00013504 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13504:	defffc04 	addi	sp,sp,-16
   13508:	df000315 	stw	fp,12(sp)
   1350c:	df000304 	addi	fp,sp,12
   13510:	e13ffd15 	stw	r4,-12(fp)
   13514:	e17ffe15 	stw	r5,-8(fp)
   13518:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1351c:	e0bfff17 	ldw	r2,-4(fp)
}
   13520:	e037883a 	mov	sp,fp
   13524:	df000017 	ldw	fp,0(sp)
   13528:	dec00104 	addi	sp,sp,4
   1352c:	f800283a 	ret

00013530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13530:	defffe04 	addi	sp,sp,-8
   13534:	dfc00115 	stw	ra,4(sp)
   13538:	df000015 	stw	fp,0(sp)
   1353c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13540:	008000b4 	movhi	r2,2
   13544:	10a06c04 	addi	r2,r2,-32336
   13548:	10800017 	ldw	r2,0(r2)
   1354c:	10000526 	beq	r2,zero,13564 <alt_get_errno+0x34>
   13550:	008000b4 	movhi	r2,2
   13554:	10a06c04 	addi	r2,r2,-32336
   13558:	10800017 	ldw	r2,0(r2)
   1355c:	103ee83a 	callr	r2
   13560:	00000206 	br	1356c <alt_get_errno+0x3c>
   13564:	008000b4 	movhi	r2,2
   13568:	10a74004 	addi	r2,r2,-25344
}
   1356c:	e037883a 	mov	sp,fp
   13570:	dfc00117 	ldw	ra,4(sp)
   13574:	df000017 	ldw	fp,0(sp)
   13578:	dec00204 	addi	sp,sp,8
   1357c:	f800283a 	ret

00013580 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13580:	defffb04 	addi	sp,sp,-20
   13584:	dfc00415 	stw	ra,16(sp)
   13588:	df000315 	stw	fp,12(sp)
   1358c:	df000304 	addi	fp,sp,12
   13590:	e13ffe15 	stw	r4,-8(fp)
   13594:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13598:	e0bffe17 	ldw	r2,-8(fp)
   1359c:	10000616 	blt	r2,zero,135b8 <fstat+0x38>
   135a0:	e0bffe17 	ldw	r2,-8(fp)
   135a4:	10c00324 	muli	r3,r2,12
   135a8:	00800074 	movhi	r2,1
   135ac:	109bba04 	addi	r2,r2,28392
   135b0:	1885883a 	add	r2,r3,r2
   135b4:	00000106 	br	135bc <fstat+0x3c>
   135b8:	0005883a 	mov	r2,zero
   135bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   135c0:	e0bffd17 	ldw	r2,-12(fp)
   135c4:	10001026 	beq	r2,zero,13608 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   135c8:	e0bffd17 	ldw	r2,-12(fp)
   135cc:	10800017 	ldw	r2,0(r2)
   135d0:	10800817 	ldw	r2,32(r2)
   135d4:	10000726 	beq	r2,zero,135f4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   135d8:	e0bffd17 	ldw	r2,-12(fp)
   135dc:	10800017 	ldw	r2,0(r2)
   135e0:	10800817 	ldw	r2,32(r2)
   135e4:	e13ffd17 	ldw	r4,-12(fp)
   135e8:	e17fff17 	ldw	r5,-4(fp)
   135ec:	103ee83a 	callr	r2
   135f0:	00000a06 	br	1361c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   135f4:	e0bfff17 	ldw	r2,-4(fp)
   135f8:	00c80004 	movi	r3,8192
   135fc:	10c00115 	stw	r3,4(r2)
      return 0;
   13600:	0005883a 	mov	r2,zero
   13604:	00000506 	br	1361c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13608:	00135300 	call	13530 <alt_get_errno>
   1360c:	1007883a 	mov	r3,r2
   13610:	00801444 	movi	r2,81
   13614:	18800015 	stw	r2,0(r3)
    return -1;
   13618:	00bfffc4 	movi	r2,-1
  }
}
   1361c:	e037883a 	mov	sp,fp
   13620:	dfc00117 	ldw	ra,4(sp)
   13624:	df000017 	ldw	fp,0(sp)
   13628:	dec00204 	addi	sp,sp,8
   1362c:	f800283a 	ret

00013630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13630:	defffe04 	addi	sp,sp,-8
   13634:	dfc00115 	stw	ra,4(sp)
   13638:	df000015 	stw	fp,0(sp)
   1363c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13640:	008000b4 	movhi	r2,2
   13644:	10a06c04 	addi	r2,r2,-32336
   13648:	10800017 	ldw	r2,0(r2)
   1364c:	10000526 	beq	r2,zero,13664 <alt_get_errno+0x34>
   13650:	008000b4 	movhi	r2,2
   13654:	10a06c04 	addi	r2,r2,-32336
   13658:	10800017 	ldw	r2,0(r2)
   1365c:	103ee83a 	callr	r2
   13660:	00000206 	br	1366c <alt_get_errno+0x3c>
   13664:	008000b4 	movhi	r2,2
   13668:	10a74004 	addi	r2,r2,-25344
}
   1366c:	e037883a 	mov	sp,fp
   13670:	dfc00117 	ldw	ra,4(sp)
   13674:	df000017 	ldw	fp,0(sp)
   13678:	dec00204 	addi	sp,sp,8
   1367c:	f800283a 	ret

00013680 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13680:	deffed04 	addi	sp,sp,-76
   13684:	dfc01215 	stw	ra,72(sp)
   13688:	df001115 	stw	fp,68(sp)
   1368c:	df001104 	addi	fp,sp,68
   13690:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13694:	e0bfff17 	ldw	r2,-4(fp)
   13698:	10000616 	blt	r2,zero,136b4 <isatty+0x34>
   1369c:	e0bfff17 	ldw	r2,-4(fp)
   136a0:	10c00324 	muli	r3,r2,12
   136a4:	00800074 	movhi	r2,1
   136a8:	109bba04 	addi	r2,r2,28392
   136ac:	1885883a 	add	r2,r3,r2
   136b0:	00000106 	br	136b8 <isatty+0x38>
   136b4:	0005883a 	mov	r2,zero
   136b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   136bc:	e0bfef17 	ldw	r2,-68(fp)
   136c0:	10000e26 	beq	r2,zero,136fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   136c4:	e0bfef17 	ldw	r2,-68(fp)
   136c8:	10800017 	ldw	r2,0(r2)
   136cc:	10800817 	ldw	r2,32(r2)
   136d0:	1000021e 	bne	r2,zero,136dc <isatty+0x5c>
    {
      return 1;
   136d4:	00800044 	movi	r2,1
   136d8:	00000d06 	br	13710 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   136dc:	e0bff004 	addi	r2,fp,-64
   136e0:	e13fff17 	ldw	r4,-4(fp)
   136e4:	100b883a 	mov	r5,r2
   136e8:	00135800 	call	13580 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   136ec:	e0bff117 	ldw	r2,-60(fp)
   136f0:	10880020 	cmpeqi	r2,r2,8192
   136f4:	10803fcc 	andi	r2,r2,255
   136f8:	00000506 	br	13710 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   136fc:	00136300 	call	13630 <alt_get_errno>
   13700:	1007883a 	mov	r3,r2
   13704:	00801444 	movi	r2,81
   13708:	18800015 	stw	r2,0(r3)
    return 0;
   1370c:	0005883a 	mov	r2,zero
  }
}
   13710:	e037883a 	mov	sp,fp
   13714:	dfc00117 	ldw	ra,4(sp)
   13718:	df000017 	ldw	fp,0(sp)
   1371c:	dec00204 	addi	sp,sp,8
   13720:	f800283a 	ret

00013724 <alt_load_section>:
   13724:	defffc04 	addi	sp,sp,-16
   13728:	df000315 	stw	fp,12(sp)
   1372c:	df000304 	addi	fp,sp,12
   13730:	e13ffd15 	stw	r4,-12(fp)
   13734:	e17ffe15 	stw	r5,-8(fp)
   13738:	e1bfff15 	stw	r6,-4(fp)
   1373c:	e0fffe17 	ldw	r3,-8(fp)
   13740:	e0bffd17 	ldw	r2,-12(fp)
   13744:	18800c26 	beq	r3,r2,13778 <alt_load_section+0x54>
   13748:	00000806 	br	1376c <alt_load_section+0x48>
   1374c:	e0bffe17 	ldw	r2,-8(fp)
   13750:	10c00104 	addi	r3,r2,4
   13754:	e0fffe15 	stw	r3,-8(fp)
   13758:	e0fffd17 	ldw	r3,-12(fp)
   1375c:	19000104 	addi	r4,r3,4
   13760:	e13ffd15 	stw	r4,-12(fp)
   13764:	18c00017 	ldw	r3,0(r3)
   13768:	10c00015 	stw	r3,0(r2)
   1376c:	e0fffe17 	ldw	r3,-8(fp)
   13770:	e0bfff17 	ldw	r2,-4(fp)
   13774:	18bff51e 	bne	r3,r2,1374c <alt_load_section+0x28>
   13778:	e037883a 	mov	sp,fp
   1377c:	df000017 	ldw	fp,0(sp)
   13780:	dec00104 	addi	sp,sp,4
   13784:	f800283a 	ret

00013788 <alt_load>:
   13788:	defffe04 	addi	sp,sp,-8
   1378c:	dfc00115 	stw	ra,4(sp)
   13790:	df000015 	stw	fp,0(sp)
   13794:	d839883a 	mov	fp,sp
   13798:	010000b4 	movhi	r4,2
   1379c:	21207104 	addi	r4,r4,-32316
   137a0:	01400074 	movhi	r5,1
   137a4:	2959a504 	addi	r5,r5,26260
   137a8:	018000b4 	movhi	r6,2
   137ac:	31a07104 	addi	r6,r6,-32316
   137b0:	00137240 	call	13724 <alt_load_section>
   137b4:	01000074 	movhi	r4,1
   137b8:	21000804 	addi	r4,r4,32
   137bc:	01400074 	movhi	r5,1
   137c0:	29400804 	addi	r5,r5,32
   137c4:	01800074 	movhi	r6,1
   137c8:	31809004 	addi	r6,r6,576
   137cc:	00137240 	call	13724 <alt_load_section>
   137d0:	01000074 	movhi	r4,1
   137d4:	21197704 	addi	r4,r4,26076
   137d8:	01400074 	movhi	r5,1
   137dc:	29597704 	addi	r5,r5,26076
   137e0:	01800074 	movhi	r6,1
   137e4:	3199a504 	addi	r6,r6,26260
   137e8:	00137240 	call	13724 <alt_load_section>
   137ec:	00154600 	call	15460 <alt_dcache_flush_all>
   137f0:	00156500 	call	15650 <alt_icache_flush_all>
   137f4:	e037883a 	mov	sp,fp
   137f8:	dfc00117 	ldw	ra,4(sp)
   137fc:	df000017 	ldw	fp,0(sp)
   13800:	dec00204 	addi	sp,sp,8
   13804:	f800283a 	ret

00013808 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13808:	defffe04 	addi	sp,sp,-8
   1380c:	dfc00115 	stw	ra,4(sp)
   13810:	df000015 	stw	fp,0(sp)
   13814:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13818:	008000b4 	movhi	r2,2
   1381c:	10a06c04 	addi	r2,r2,-32336
   13820:	10800017 	ldw	r2,0(r2)
   13824:	10000526 	beq	r2,zero,1383c <alt_get_errno+0x34>
   13828:	008000b4 	movhi	r2,2
   1382c:	10a06c04 	addi	r2,r2,-32336
   13830:	10800017 	ldw	r2,0(r2)
   13834:	103ee83a 	callr	r2
   13838:	00000206 	br	13844 <alt_get_errno+0x3c>
   1383c:	008000b4 	movhi	r2,2
   13840:	10a74004 	addi	r2,r2,-25344
}
   13844:	e037883a 	mov	sp,fp
   13848:	dfc00117 	ldw	ra,4(sp)
   1384c:	df000017 	ldw	fp,0(sp)
   13850:	dec00204 	addi	sp,sp,8
   13854:	f800283a 	ret

00013858 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13858:	defff904 	addi	sp,sp,-28
   1385c:	dfc00615 	stw	ra,24(sp)
   13860:	df000515 	stw	fp,20(sp)
   13864:	df000504 	addi	fp,sp,20
   13868:	e13ffd15 	stw	r4,-12(fp)
   1386c:	e17ffe15 	stw	r5,-8(fp)
   13870:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13874:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13878:	e0bffd17 	ldw	r2,-12(fp)
   1387c:	10000616 	blt	r2,zero,13898 <lseek+0x40>
   13880:	e0bffd17 	ldw	r2,-12(fp)
   13884:	10c00324 	muli	r3,r2,12
   13888:	00800074 	movhi	r2,1
   1388c:	109bba04 	addi	r2,r2,28392
   13890:	1885883a 	add	r2,r3,r2
   13894:	00000106 	br	1389c <lseek+0x44>
   13898:	0005883a 	mov	r2,zero
   1389c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   138a0:	e0bffc17 	ldw	r2,-16(fp)
   138a4:	10001026 	beq	r2,zero,138e8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   138a8:	e0bffc17 	ldw	r2,-16(fp)
   138ac:	10800017 	ldw	r2,0(r2)
   138b0:	10800717 	ldw	r2,28(r2)
   138b4:	10000926 	beq	r2,zero,138dc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   138b8:	e0bffc17 	ldw	r2,-16(fp)
   138bc:	10800017 	ldw	r2,0(r2)
   138c0:	10800717 	ldw	r2,28(r2)
   138c4:	e13ffc17 	ldw	r4,-16(fp)
   138c8:	e17ffe17 	ldw	r5,-8(fp)
   138cc:	e1bfff17 	ldw	r6,-4(fp)
   138d0:	103ee83a 	callr	r2
   138d4:	e0bffb15 	stw	r2,-20(fp)
   138d8:	00000506 	br	138f0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   138dc:	00bfde84 	movi	r2,-134
   138e0:	e0bffb15 	stw	r2,-20(fp)
   138e4:	00000206 	br	138f0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   138e8:	00bfebc4 	movi	r2,-81
   138ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   138f0:	e0bffb17 	ldw	r2,-20(fp)
   138f4:	1000070e 	bge	r2,zero,13914 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   138f8:	00138080 	call	13808 <alt_get_errno>
   138fc:	1007883a 	mov	r3,r2
   13900:	e0bffb17 	ldw	r2,-20(fp)
   13904:	0085c83a 	sub	r2,zero,r2
   13908:	18800015 	stw	r2,0(r3)
    rc = -1;
   1390c:	00bfffc4 	movi	r2,-1
   13910:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13914:	e0bffb17 	ldw	r2,-20(fp)
}
   13918:	e037883a 	mov	sp,fp
   1391c:	dfc00117 	ldw	ra,4(sp)
   13920:	df000017 	ldw	fp,0(sp)
   13924:	dec00204 	addi	sp,sp,8
   13928:	f800283a 	ret

0001392c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1392c:	defffd04 	addi	sp,sp,-12
   13930:	dfc00215 	stw	ra,8(sp)
   13934:	df000115 	stw	fp,4(sp)
   13938:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1393c:	0009883a 	mov	r4,zero
   13940:	0013df00 	call	13df0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13944:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13948:	0013e240 	call	13e24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1394c:	01000074 	movhi	r4,1
   13950:	21199704 	addi	r4,r4,26204
   13954:	01400074 	movhi	r5,1
   13958:	29599704 	addi	r5,r5,26204
   1395c:	01800074 	movhi	r6,1
   13960:	31999a04 	addi	r6,r6,26216
   13964:	0015a100 	call	15a10 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13968:	00155980 	call	15598 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1396c:	01000074 	movhi	r4,1
   13970:	21157d04 	addi	r4,r4,22004
   13974:	00162380 	call	16238 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13978:	d126de17 	ldw	r4,-25736(gp)
   1397c:	d0e6df17 	ldw	r3,-25732(gp)
   13980:	d0a6e017 	ldw	r2,-25728(gp)
   13984:	180b883a 	mov	r5,r3
   13988:	100d883a 	mov	r6,r2
   1398c:	001028c0 	call	1028c <main>
   13990:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13994:	01000044 	movi	r4,1
   13998:	00134340 	call	13434 <close>
  exit (result);
   1399c:	e13fff17 	ldw	r4,-4(fp)
   139a0:	001624c0 	call	1624c <exit>

000139a4 <__malloc_lock>:
   139a4:	defffe04 	addi	sp,sp,-8
   139a8:	df000115 	stw	fp,4(sp)
   139ac:	df000104 	addi	fp,sp,4
   139b0:	e13fff15 	stw	r4,-4(fp)
   139b4:	e037883a 	mov	sp,fp
   139b8:	df000017 	ldw	fp,0(sp)
   139bc:	dec00104 	addi	sp,sp,4
   139c0:	f800283a 	ret

000139c4 <__malloc_unlock>:
   139c4:	defffe04 	addi	sp,sp,-8
   139c8:	df000115 	stw	fp,4(sp)
   139cc:	df000104 	addi	fp,sp,4
   139d0:	e13fff15 	stw	r4,-4(fp)
   139d4:	e037883a 	mov	sp,fp
   139d8:	df000017 	ldw	fp,0(sp)
   139dc:	dec00104 	addi	sp,sp,4
   139e0:	f800283a 	ret

000139e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139e4:	defffe04 	addi	sp,sp,-8
   139e8:	dfc00115 	stw	ra,4(sp)
   139ec:	df000015 	stw	fp,0(sp)
   139f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   139f4:	008000b4 	movhi	r2,2
   139f8:	10a06c04 	addi	r2,r2,-32336
   139fc:	10800017 	ldw	r2,0(r2)
   13a00:	10000526 	beq	r2,zero,13a18 <alt_get_errno+0x34>
   13a04:	008000b4 	movhi	r2,2
   13a08:	10a06c04 	addi	r2,r2,-32336
   13a0c:	10800017 	ldw	r2,0(r2)
   13a10:	103ee83a 	callr	r2
   13a14:	00000206 	br	13a20 <alt_get_errno+0x3c>
   13a18:	008000b4 	movhi	r2,2
   13a1c:	10a74004 	addi	r2,r2,-25344
}
   13a20:	e037883a 	mov	sp,fp
   13a24:	dfc00117 	ldw	ra,4(sp)
   13a28:	df000017 	ldw	fp,0(sp)
   13a2c:	dec00204 	addi	sp,sp,8
   13a30:	f800283a 	ret

00013a34 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13a34:	defff904 	addi	sp,sp,-28
   13a38:	dfc00615 	stw	ra,24(sp)
   13a3c:	df000515 	stw	fp,20(sp)
   13a40:	df000504 	addi	fp,sp,20
   13a44:	e13ffd15 	stw	r4,-12(fp)
   13a48:	e17ffe15 	stw	r5,-8(fp)
   13a4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a50:	e0bffd17 	ldw	r2,-12(fp)
   13a54:	10000616 	blt	r2,zero,13a70 <read+0x3c>
   13a58:	e0bffd17 	ldw	r2,-12(fp)
   13a5c:	10c00324 	muli	r3,r2,12
   13a60:	00800074 	movhi	r2,1
   13a64:	109bba04 	addi	r2,r2,28392
   13a68:	1885883a 	add	r2,r3,r2
   13a6c:	00000106 	br	13a74 <read+0x40>
   13a70:	0005883a 	mov	r2,zero
   13a74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13a78:	e0bffb17 	ldw	r2,-20(fp)
   13a7c:	10002226 	beq	r2,zero,13b08 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13a80:	e0bffb17 	ldw	r2,-20(fp)
   13a84:	10800217 	ldw	r2,8(r2)
   13a88:	108000cc 	andi	r2,r2,3
   13a8c:	10800060 	cmpeqi	r2,r2,1
   13a90:	1000181e 	bne	r2,zero,13af4 <read+0xc0>
        (fd->dev->read))
   13a94:	e0bffb17 	ldw	r2,-20(fp)
   13a98:	10800017 	ldw	r2,0(r2)
   13a9c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13aa0:	10001426 	beq	r2,zero,13af4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13aa4:	e0bffb17 	ldw	r2,-20(fp)
   13aa8:	10800017 	ldw	r2,0(r2)
   13aac:	10800517 	ldw	r2,20(r2)
   13ab0:	e0ffff17 	ldw	r3,-4(fp)
   13ab4:	e13ffb17 	ldw	r4,-20(fp)
   13ab8:	e17ffe17 	ldw	r5,-8(fp)
   13abc:	180d883a 	mov	r6,r3
   13ac0:	103ee83a 	callr	r2
   13ac4:	e0bffc15 	stw	r2,-16(fp)
   13ac8:	e0bffc17 	ldw	r2,-16(fp)
   13acc:	1000070e 	bge	r2,zero,13aec <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13ad0:	00139e40 	call	139e4 <alt_get_errno>
   13ad4:	1007883a 	mov	r3,r2
   13ad8:	e0bffc17 	ldw	r2,-16(fp)
   13adc:	0085c83a 	sub	r2,zero,r2
   13ae0:	18800015 	stw	r2,0(r3)
          return -1;
   13ae4:	00bfffc4 	movi	r2,-1
   13ae8:	00000c06 	br	13b1c <read+0xe8>
        }
        return rval;
   13aec:	e0bffc17 	ldw	r2,-16(fp)
   13af0:	00000a06 	br	13b1c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13af4:	00139e40 	call	139e4 <alt_get_errno>
   13af8:	1007883a 	mov	r3,r2
   13afc:	00800344 	movi	r2,13
   13b00:	18800015 	stw	r2,0(r3)
   13b04:	00000406 	br	13b18 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13b08:	00139e40 	call	139e4 <alt_get_errno>
   13b0c:	1007883a 	mov	r3,r2
   13b10:	00801444 	movi	r2,81
   13b14:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13b18:	00bfffc4 	movi	r2,-1
}
   13b1c:	e037883a 	mov	sp,fp
   13b20:	dfc00117 	ldw	ra,4(sp)
   13b24:	df000017 	ldw	fp,0(sp)
   13b28:	dec00204 	addi	sp,sp,8
   13b2c:	f800283a 	ret

00013b30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13b30:	defffe04 	addi	sp,sp,-8
   13b34:	df000115 	stw	fp,4(sp)
   13b38:	df000104 	addi	fp,sp,4
   13b3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13b40:	e0bfff17 	ldw	r2,-4(fp)
   13b44:	108000d0 	cmplti	r2,r2,3
   13b48:	10000d1e 	bne	r2,zero,13b80 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13b4c:	00800074 	movhi	r2,1
   13b50:	109bba04 	addi	r2,r2,28392
   13b54:	e0ffff17 	ldw	r3,-4(fp)
   13b58:	18c00324 	muli	r3,r3,12
   13b5c:	18c00204 	addi	r3,r3,8
   13b60:	10c5883a 	add	r2,r2,r3
   13b64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13b68:	00800074 	movhi	r2,1
   13b6c:	109bba04 	addi	r2,r2,28392
   13b70:	e0ffff17 	ldw	r3,-4(fp)
   13b74:	18c00324 	muli	r3,r3,12
   13b78:	10c5883a 	add	r2,r2,r3
   13b7c:	10000015 	stw	zero,0(r2)
  }
}
   13b80:	e037883a 	mov	sp,fp
   13b84:	df000017 	ldw	fp,0(sp)
   13b88:	dec00104 	addi	sp,sp,4
   13b8c:	f800283a 	ret

00013b90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13b90:	defff904 	addi	sp,sp,-28
   13b94:	df000615 	stw	fp,24(sp)
   13b98:	df000604 	addi	fp,sp,24
   13b9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ba0:	0005303a 	rdctl	r2,status
   13ba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ba8:	e0fffc17 	ldw	r3,-16(fp)
   13bac:	00bfff84 	movi	r2,-2
   13bb0:	1884703a 	and	r2,r3,r2
   13bb4:	1001703a 	wrctl	status,r2
  
  return context;
   13bb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13bbc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13bc0:	d0a00a17 	ldw	r2,-32728(gp)
   13bc4:	10c000c4 	addi	r3,r2,3
   13bc8:	00bfff04 	movi	r2,-4
   13bcc:	1884703a 	and	r2,r3,r2
   13bd0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13bd4:	d0e00a17 	ldw	r3,-32728(gp)
   13bd8:	e0bfff17 	ldw	r2,-4(fp)
   13bdc:	1887883a 	add	r3,r3,r2
   13be0:	008000b4 	movhi	r2,2
   13be4:	10a80004 	addi	r2,r2,-24576
   13be8:	10c0062e 	bgeu	r2,r3,13c04 <sbrk+0x74>
   13bec:	e0bffa17 	ldw	r2,-24(fp)
   13bf0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bf4:	e0bffd17 	ldw	r2,-12(fp)
   13bf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13bfc:	00bfffc4 	movi	r2,-1
   13c00:	00000b06 	br	13c30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13c04:	d0a00a17 	ldw	r2,-32728(gp)
   13c08:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   13c0c:	d0e00a17 	ldw	r3,-32728(gp)
   13c10:	e0bfff17 	ldw	r2,-4(fp)
   13c14:	1885883a 	add	r2,r3,r2
   13c18:	d0a00a15 	stw	r2,-32728(gp)
   13c1c:	e0bffa17 	ldw	r2,-24(fp)
   13c20:	e0bffe15 	stw	r2,-8(fp)
   13c24:	e0bffe17 	ldw	r2,-8(fp)
   13c28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13c2c:	e0bffb17 	ldw	r2,-20(fp)
} 
   13c30:	e037883a 	mov	sp,fp
   13c34:	df000017 	ldw	fp,0(sp)
   13c38:	dec00104 	addi	sp,sp,4
   13c3c:	f800283a 	ret

00013c40 <usleep>:
   13c40:	defffd04 	addi	sp,sp,-12
   13c44:	dfc00215 	stw	ra,8(sp)
   13c48:	df000115 	stw	fp,4(sp)
   13c4c:	df000104 	addi	fp,sp,4
   13c50:	e13fff15 	stw	r4,-4(fp)
   13c54:	e13fff17 	ldw	r4,-4(fp)
   13c58:	00153080 	call	15308 <alt_busy_sleep>
   13c5c:	e037883a 	mov	sp,fp
   13c60:	dfc00117 	ldw	ra,4(sp)
   13c64:	df000017 	ldw	fp,0(sp)
   13c68:	dec00204 	addi	sp,sp,8
   13c6c:	f800283a 	ret

00013c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c70:	defffe04 	addi	sp,sp,-8
   13c74:	dfc00115 	stw	ra,4(sp)
   13c78:	df000015 	stw	fp,0(sp)
   13c7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13c80:	008000b4 	movhi	r2,2
   13c84:	10a06c04 	addi	r2,r2,-32336
   13c88:	10800017 	ldw	r2,0(r2)
   13c8c:	10000526 	beq	r2,zero,13ca4 <alt_get_errno+0x34>
   13c90:	008000b4 	movhi	r2,2
   13c94:	10a06c04 	addi	r2,r2,-32336
   13c98:	10800017 	ldw	r2,0(r2)
   13c9c:	103ee83a 	callr	r2
   13ca0:	00000206 	br	13cac <alt_get_errno+0x3c>
   13ca4:	008000b4 	movhi	r2,2
   13ca8:	10a74004 	addi	r2,r2,-25344
}
   13cac:	e037883a 	mov	sp,fp
   13cb0:	dfc00117 	ldw	ra,4(sp)
   13cb4:	df000017 	ldw	fp,0(sp)
   13cb8:	dec00204 	addi	sp,sp,8
   13cbc:	f800283a 	ret

00013cc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13cc0:	defff904 	addi	sp,sp,-28
   13cc4:	dfc00615 	stw	ra,24(sp)
   13cc8:	df000515 	stw	fp,20(sp)
   13ccc:	df000504 	addi	fp,sp,20
   13cd0:	e13ffd15 	stw	r4,-12(fp)
   13cd4:	e17ffe15 	stw	r5,-8(fp)
   13cd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13cdc:	e0bffd17 	ldw	r2,-12(fp)
   13ce0:	10000616 	blt	r2,zero,13cfc <write+0x3c>
   13ce4:	e0bffd17 	ldw	r2,-12(fp)
   13ce8:	10c00324 	muli	r3,r2,12
   13cec:	00800074 	movhi	r2,1
   13cf0:	109bba04 	addi	r2,r2,28392
   13cf4:	1885883a 	add	r2,r3,r2
   13cf8:	00000106 	br	13d00 <write+0x40>
   13cfc:	0005883a 	mov	r2,zero
   13d00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13d04:	e0bffb17 	ldw	r2,-20(fp)
   13d08:	10002126 	beq	r2,zero,13d90 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13d0c:	e0bffb17 	ldw	r2,-20(fp)
   13d10:	10800217 	ldw	r2,8(r2)
   13d14:	108000cc 	andi	r2,r2,3
   13d18:	10001826 	beq	r2,zero,13d7c <write+0xbc>
   13d1c:	e0bffb17 	ldw	r2,-20(fp)
   13d20:	10800017 	ldw	r2,0(r2)
   13d24:	10800617 	ldw	r2,24(r2)
   13d28:	10001426 	beq	r2,zero,13d7c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13d2c:	e0bffb17 	ldw	r2,-20(fp)
   13d30:	10800017 	ldw	r2,0(r2)
   13d34:	10800617 	ldw	r2,24(r2)
   13d38:	e0ffff17 	ldw	r3,-4(fp)
   13d3c:	e13ffb17 	ldw	r4,-20(fp)
   13d40:	e17ffe17 	ldw	r5,-8(fp)
   13d44:	180d883a 	mov	r6,r3
   13d48:	103ee83a 	callr	r2
   13d4c:	e0bffc15 	stw	r2,-16(fp)
   13d50:	e0bffc17 	ldw	r2,-16(fp)
   13d54:	1000070e 	bge	r2,zero,13d74 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13d58:	0013c700 	call	13c70 <alt_get_errno>
   13d5c:	1007883a 	mov	r3,r2
   13d60:	e0bffc17 	ldw	r2,-16(fp)
   13d64:	0085c83a 	sub	r2,zero,r2
   13d68:	18800015 	stw	r2,0(r3)
        return -1;
   13d6c:	00bfffc4 	movi	r2,-1
   13d70:	00000c06 	br	13da4 <write+0xe4>
      }
      return rval;
   13d74:	e0bffc17 	ldw	r2,-16(fp)
   13d78:	00000a06 	br	13da4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13d7c:	0013c700 	call	13c70 <alt_get_errno>
   13d80:	1007883a 	mov	r3,r2
   13d84:	00800344 	movi	r2,13
   13d88:	18800015 	stw	r2,0(r3)
   13d8c:	00000406 	br	13da0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13d90:	0013c700 	call	13c70 <alt_get_errno>
   13d94:	1007883a 	mov	r3,r2
   13d98:	00801444 	movi	r2,81
   13d9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13da0:	00bfffc4 	movi	r2,-1
}
   13da4:	e037883a 	mov	sp,fp
   13da8:	dfc00117 	ldw	ra,4(sp)
   13dac:	df000017 	ldw	fp,0(sp)
   13db0:	dec00204 	addi	sp,sp,8
   13db4:	f800283a 	ret

00013db8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13db8:	defffd04 	addi	sp,sp,-12
   13dbc:	dfc00215 	stw	ra,8(sp)
   13dc0:	df000115 	stw	fp,4(sp)
   13dc4:	df000104 	addi	fp,sp,4
   13dc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13dcc:	e13fff17 	ldw	r4,-4(fp)
   13dd0:	014000b4 	movhi	r5,2
   13dd4:	29606904 	addi	r5,r5,-32348
   13dd8:	00154f40 	call	154f4 <alt_dev_llist_insert>
}
   13ddc:	e037883a 	mov	sp,fp
   13de0:	dfc00117 	ldw	ra,4(sp)
   13de4:	df000017 	ldw	fp,0(sp)
   13de8:	dec00204 	addi	sp,sp,8
   13dec:	f800283a 	ret

00013df0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13df0:	defffd04 	addi	sp,sp,-12
   13df4:	dfc00215 	stw	ra,8(sp)
   13df8:	df000115 	stw	fp,4(sp)
   13dfc:	df000104 	addi	fp,sp,4
   13e00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   13e04:	0015e980 	call	15e98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13e08:	00800044 	movi	r2,1
   13e0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13e10:	e037883a 	mov	sp,fp
   13e14:	dfc00117 	ldw	ra,4(sp)
   13e18:	df000017 	ldw	fp,0(sp)
   13e1c:	dec00204 	addi	sp,sp,8
   13e20:	f800283a 	ret

00013e24 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13e24:	defffe04 	addi	sp,sp,-8
   13e28:	dfc00115 	stw	ra,4(sp)
   13e2c:	df000015 	stw	fp,0(sp)
   13e30:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13e34:	01000074 	movhi	r4,1
   13e38:	211c2404 	addi	r4,r4,28816
   13e3c:	000b883a 	mov	r5,zero
   13e40:	000d883a 	mov	r6,zero
   13e44:	0013ff00 	call	13ff0 <altera_avalon_jtag_uart_init>
   13e48:	01000074 	movhi	r4,1
   13e4c:	211c1a04 	addi	r4,r4,28776
   13e50:	0013db80 	call	13db8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   13e54:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
   13e58:	010000b4 	movhi	r4,2
   13e5c:	21203c04 	addi	r4,r4,-32528
   13e60:	000b883a 	mov	r5,zero
   13e64:	01800044 	movi	r6,1
   13e68:	00149e80 	call	149e8 <altera_avalon_uart_init>
   13e6c:	010000b4 	movhi	r4,2
   13e70:	21203204 	addi	r4,r4,-32568
   13e74:	0013db80 	call	13db8 <alt_dev_reg>
}
   13e78:	e037883a 	mov	sp,fp
   13e7c:	dfc00117 	ldw	ra,4(sp)
   13e80:	df000017 	ldw	fp,0(sp)
   13e84:	dec00204 	addi	sp,sp,8
   13e88:	f800283a 	ret

00013e8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13e8c:	defffa04 	addi	sp,sp,-24
   13e90:	dfc00515 	stw	ra,20(sp)
   13e94:	df000415 	stw	fp,16(sp)
   13e98:	df000404 	addi	fp,sp,16
   13e9c:	e13ffd15 	stw	r4,-12(fp)
   13ea0:	e17ffe15 	stw	r5,-8(fp)
   13ea4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13ea8:	e0bffd17 	ldw	r2,-12(fp)
   13eac:	10800017 	ldw	r2,0(r2)
   13eb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13eb4:	e0bffc17 	ldw	r2,-16(fp)
   13eb8:	10c00a04 	addi	r3,r2,40
   13ebc:	e0bffd17 	ldw	r2,-12(fp)
   13ec0:	10800217 	ldw	r2,8(r2)
   13ec4:	1809883a 	mov	r4,r3
   13ec8:	e17ffe17 	ldw	r5,-8(fp)
   13ecc:	e1bfff17 	ldw	r6,-4(fp)
   13ed0:	100f883a 	mov	r7,r2
   13ed4:	00144b40 	call	144b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13ed8:	e037883a 	mov	sp,fp
   13edc:	dfc00117 	ldw	ra,4(sp)
   13ee0:	df000017 	ldw	fp,0(sp)
   13ee4:	dec00204 	addi	sp,sp,8
   13ee8:	f800283a 	ret

00013eec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13eec:	defffa04 	addi	sp,sp,-24
   13ef0:	dfc00515 	stw	ra,20(sp)
   13ef4:	df000415 	stw	fp,16(sp)
   13ef8:	df000404 	addi	fp,sp,16
   13efc:	e13ffd15 	stw	r4,-12(fp)
   13f00:	e17ffe15 	stw	r5,-8(fp)
   13f04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13f08:	e0bffd17 	ldw	r2,-12(fp)
   13f0c:	10800017 	ldw	r2,0(r2)
   13f10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13f14:	e0bffc17 	ldw	r2,-16(fp)
   13f18:	10c00a04 	addi	r3,r2,40
   13f1c:	e0bffd17 	ldw	r2,-12(fp)
   13f20:	10800217 	ldw	r2,8(r2)
   13f24:	1809883a 	mov	r4,r3
   13f28:	e17ffe17 	ldw	r5,-8(fp)
   13f2c:	e1bfff17 	ldw	r6,-4(fp)
   13f30:	100f883a 	mov	r7,r2
   13f34:	00146c00 	call	146c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13f38:	e037883a 	mov	sp,fp
   13f3c:	dfc00117 	ldw	ra,4(sp)
   13f40:	df000017 	ldw	fp,0(sp)
   13f44:	dec00204 	addi	sp,sp,8
   13f48:	f800283a 	ret

00013f4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13f4c:	defffc04 	addi	sp,sp,-16
   13f50:	dfc00315 	stw	ra,12(sp)
   13f54:	df000215 	stw	fp,8(sp)
   13f58:	df000204 	addi	fp,sp,8
   13f5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13f60:	e0bfff17 	ldw	r2,-4(fp)
   13f64:	10800017 	ldw	r2,0(r2)
   13f68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13f6c:	e0bffe17 	ldw	r2,-8(fp)
   13f70:	10c00a04 	addi	r3,r2,40
   13f74:	e0bfff17 	ldw	r2,-4(fp)
   13f78:	10800217 	ldw	r2,8(r2)
   13f7c:	1809883a 	mov	r4,r3
   13f80:	100b883a 	mov	r5,r2
   13f84:	00143600 	call	14360 <altera_avalon_jtag_uart_close>
}
   13f88:	e037883a 	mov	sp,fp
   13f8c:	dfc00117 	ldw	ra,4(sp)
   13f90:	df000017 	ldw	fp,0(sp)
   13f94:	dec00204 	addi	sp,sp,8
   13f98:	f800283a 	ret

00013f9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13f9c:	defffa04 	addi	sp,sp,-24
   13fa0:	dfc00515 	stw	ra,20(sp)
   13fa4:	df000415 	stw	fp,16(sp)
   13fa8:	df000404 	addi	fp,sp,16
   13fac:	e13ffd15 	stw	r4,-12(fp)
   13fb0:	e17ffe15 	stw	r5,-8(fp)
   13fb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13fb8:	e0bffd17 	ldw	r2,-12(fp)
   13fbc:	10800017 	ldw	r2,0(r2)
   13fc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13fc4:	e0bffc17 	ldw	r2,-16(fp)
   13fc8:	10800a04 	addi	r2,r2,40
   13fcc:	1009883a 	mov	r4,r2
   13fd0:	e17ffe17 	ldw	r5,-8(fp)
   13fd4:	e1bfff17 	ldw	r6,-4(fp)
   13fd8:	00143c80 	call	143c8 <altera_avalon_jtag_uart_ioctl>
}
   13fdc:	e037883a 	mov	sp,fp
   13fe0:	dfc00117 	ldw	ra,4(sp)
   13fe4:	df000017 	ldw	fp,0(sp)
   13fe8:	dec00204 	addi	sp,sp,8
   13fec:	f800283a 	ret

00013ff0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13ff0:	defffa04 	addi	sp,sp,-24
   13ff4:	dfc00515 	stw	ra,20(sp)
   13ff8:	df000415 	stw	fp,16(sp)
   13ffc:	df000404 	addi	fp,sp,16
   14000:	e13ffd15 	stw	r4,-12(fp)
   14004:	e17ffe15 	stw	r5,-8(fp)
   14008:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1400c:	e0bffd17 	ldw	r2,-12(fp)
   14010:	00c00044 	movi	r3,1
   14014:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14018:	e0bffd17 	ldw	r2,-12(fp)
   1401c:	10800017 	ldw	r2,0(r2)
   14020:	10800104 	addi	r2,r2,4
   14024:	1007883a 	mov	r3,r2
   14028:	e0bffd17 	ldw	r2,-12(fp)
   1402c:	10800817 	ldw	r2,32(r2)
   14030:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14034:	e0fffe17 	ldw	r3,-8(fp)
   14038:	e0bfff17 	ldw	r2,-4(fp)
   1403c:	d8000015 	stw	zero,0(sp)
   14040:	1809883a 	mov	r4,r3
   14044:	100b883a 	mov	r5,r2
   14048:	01800074 	movhi	r6,1
   1404c:	31902d04 	addi	r6,r6,16564
   14050:	e1fffd17 	ldw	r7,-12(fp)
   14054:	00156800 	call	15680 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14058:	e0bffd17 	ldw	r2,-12(fp)
   1405c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14060:	e0bffd17 	ldw	r2,-12(fp)
   14064:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14068:	008000b4 	movhi	r2,2
   1406c:	10a74504 	addi	r2,r2,-25324
   14070:	10800017 	ldw	r2,0(r2)
   14074:	1809883a 	mov	r4,r3
   14078:	100b883a 	mov	r5,r2
   1407c:	01800074 	movhi	r6,1
   14080:	3190ae04 	addi	r6,r6,17080
   14084:	e1fffd17 	ldw	r7,-12(fp)
   14088:	00151c80 	call	151c8 <alt_alarm_start>
   1408c:	1000040e 	bge	r2,zero,140a0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14090:	e0fffd17 	ldw	r3,-12(fp)
   14094:	00a00034 	movhi	r2,32768
   14098:	10bfffc4 	addi	r2,r2,-1
   1409c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   140a0:	e037883a 	mov	sp,fp
   140a4:	dfc00117 	ldw	ra,4(sp)
   140a8:	df000017 	ldw	fp,0(sp)
   140ac:	dec00204 	addi	sp,sp,8
   140b0:	f800283a 	ret

000140b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   140b4:	defff804 	addi	sp,sp,-32
   140b8:	df000715 	stw	fp,28(sp)
   140bc:	df000704 	addi	fp,sp,28
   140c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   140c4:	e0bfff17 	ldw	r2,-4(fp)
   140c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   140cc:	e0bffb17 	ldw	r2,-20(fp)
   140d0:	10800017 	ldw	r2,0(r2)
   140d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   140d8:	e0bffc17 	ldw	r2,-16(fp)
   140dc:	10800104 	addi	r2,r2,4
   140e0:	10800037 	ldwio	r2,0(r2)
   140e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   140e8:	e0bffd17 	ldw	r2,-12(fp)
   140ec:	1080c00c 	andi	r2,r2,768
   140f0:	1000011e 	bne	r2,zero,140f8 <altera_avalon_jtag_uart_irq+0x44>
      break;
   140f4:	00006c06 	br	142a8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   140f8:	e0bffd17 	ldw	r2,-12(fp)
   140fc:	1080400c 	andi	r2,r2,256
   14100:	10003426 	beq	r2,zero,141d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14104:	00800074 	movhi	r2,1
   14108:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1410c:	e0bffb17 	ldw	r2,-20(fp)
   14110:	10800a17 	ldw	r2,40(r2)
   14114:	10800044 	addi	r2,r2,1
   14118:	1081ffcc 	andi	r2,r2,2047
   1411c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   14120:	e0bffb17 	ldw	r2,-20(fp)
   14124:	10c00b17 	ldw	r3,44(r2)
   14128:	e0bffe17 	ldw	r2,-8(fp)
   1412c:	1880011e 	bne	r3,r2,14134 <altera_avalon_jtag_uart_irq+0x80>
          break;
   14130:	00001606 	br	1418c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14134:	e0bffc17 	ldw	r2,-16(fp)
   14138:	10800037 	ldwio	r2,0(r2)
   1413c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14140:	e0bff917 	ldw	r2,-28(fp)
   14144:	10a0000c 	andi	r2,r2,32768
   14148:	1000011e 	bne	r2,zero,14150 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   1414c:	00000f06 	br	1418c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14150:	e0bffb17 	ldw	r2,-20(fp)
   14154:	10800a17 	ldw	r2,40(r2)
   14158:	e0fff917 	ldw	r3,-28(fp)
   1415c:	1809883a 	mov	r4,r3
   14160:	e0fffb17 	ldw	r3,-20(fp)
   14164:	1885883a 	add	r2,r3,r2
   14168:	10800e04 	addi	r2,r2,56
   1416c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14170:	e0bffb17 	ldw	r2,-20(fp)
   14174:	10800a17 	ldw	r2,40(r2)
   14178:	10800044 	addi	r2,r2,1
   1417c:	10c1ffcc 	andi	r3,r2,2047
   14180:	e0bffb17 	ldw	r2,-20(fp)
   14184:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   14188:	003fe006 	br	1410c <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1418c:	e0bff917 	ldw	r2,-28(fp)
   14190:	10bfffec 	andhi	r2,r2,65535
   14194:	10000f26 	beq	r2,zero,141d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14198:	e0bffb17 	ldw	r2,-20(fp)
   1419c:	10c00817 	ldw	r3,32(r2)
   141a0:	00bfff84 	movi	r2,-2
   141a4:	1886703a 	and	r3,r3,r2
   141a8:	e0bffb17 	ldw	r2,-20(fp)
   141ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   141b0:	e0bffc17 	ldw	r2,-16(fp)
   141b4:	10800104 	addi	r2,r2,4
   141b8:	1007883a 	mov	r3,r2
   141bc:	e0bffb17 	ldw	r2,-20(fp)
   141c0:	10800817 	ldw	r2,32(r2)
   141c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   141c8:	e0bffc17 	ldw	r2,-16(fp)
   141cc:	10800104 	addi	r2,r2,4
   141d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   141d4:	e0bffd17 	ldw	r2,-12(fp)
   141d8:	1080800c 	andi	r2,r2,512
   141dc:	10003126 	beq	r2,zero,142a4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   141e0:	e0bffd17 	ldw	r2,-12(fp)
   141e4:	1004d43a 	srli	r2,r2,16
   141e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   141ec:	00001406 	br	14240 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   141f0:	e0bffc17 	ldw	r2,-16(fp)
   141f4:	e0fffb17 	ldw	r3,-20(fp)
   141f8:	18c00d17 	ldw	r3,52(r3)
   141fc:	e13ffb17 	ldw	r4,-20(fp)
   14200:	20c7883a 	add	r3,r4,r3
   14204:	18c20e04 	addi	r3,r3,2104
   14208:	18c00003 	ldbu	r3,0(r3)
   1420c:	18c03fcc 	andi	r3,r3,255
   14210:	18c0201c 	xori	r3,r3,128
   14214:	18ffe004 	addi	r3,r3,-128
   14218:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1421c:	e0bffb17 	ldw	r2,-20(fp)
   14220:	10800d17 	ldw	r2,52(r2)
   14224:	10800044 	addi	r2,r2,1
   14228:	10c1ffcc 	andi	r3,r2,2047
   1422c:	e0bffb17 	ldw	r2,-20(fp)
   14230:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14234:	e0bffa17 	ldw	r2,-24(fp)
   14238:	10bfffc4 	addi	r2,r2,-1
   1423c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14240:	e0bffa17 	ldw	r2,-24(fp)
   14244:	10000526 	beq	r2,zero,1425c <altera_avalon_jtag_uart_irq+0x1a8>
   14248:	e0bffb17 	ldw	r2,-20(fp)
   1424c:	10c00d17 	ldw	r3,52(r2)
   14250:	e0bffb17 	ldw	r2,-20(fp)
   14254:	10800c17 	ldw	r2,48(r2)
   14258:	18bfe51e 	bne	r3,r2,141f0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1425c:	e0bffa17 	ldw	r2,-24(fp)
   14260:	10001026 	beq	r2,zero,142a4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14264:	e0bffb17 	ldw	r2,-20(fp)
   14268:	10c00817 	ldw	r3,32(r2)
   1426c:	00bfff44 	movi	r2,-3
   14270:	1886703a 	and	r3,r3,r2
   14274:	e0bffb17 	ldw	r2,-20(fp)
   14278:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1427c:	e0bffb17 	ldw	r2,-20(fp)
   14280:	10800017 	ldw	r2,0(r2)
   14284:	10800104 	addi	r2,r2,4
   14288:	1007883a 	mov	r3,r2
   1428c:	e0bffb17 	ldw	r2,-20(fp)
   14290:	10800817 	ldw	r2,32(r2)
   14294:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14298:	e0bffc17 	ldw	r2,-16(fp)
   1429c:	10800104 	addi	r2,r2,4
   142a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   142a4:	003f8c06 	br	140d8 <altera_avalon_jtag_uart_irq+0x24>
}
   142a8:	e037883a 	mov	sp,fp
   142ac:	df000017 	ldw	fp,0(sp)
   142b0:	dec00104 	addi	sp,sp,4
   142b4:	f800283a 	ret

000142b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   142b8:	defff804 	addi	sp,sp,-32
   142bc:	df000715 	stw	fp,28(sp)
   142c0:	df000704 	addi	fp,sp,28
   142c4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   142c8:	e0bffb17 	ldw	r2,-20(fp)
   142cc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   142d0:	e0bff917 	ldw	r2,-28(fp)
   142d4:	10800017 	ldw	r2,0(r2)
   142d8:	10800104 	addi	r2,r2,4
   142dc:	10800037 	ldwio	r2,0(r2)
   142e0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   142e4:	e0bffa17 	ldw	r2,-24(fp)
   142e8:	1081000c 	andi	r2,r2,1024
   142ec:	10000b26 	beq	r2,zero,1431c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   142f0:	e0bff917 	ldw	r2,-28(fp)
   142f4:	10800017 	ldw	r2,0(r2)
   142f8:	10800104 	addi	r2,r2,4
   142fc:	1007883a 	mov	r3,r2
   14300:	e0bff917 	ldw	r2,-28(fp)
   14304:	10800817 	ldw	r2,32(r2)
   14308:	10810014 	ori	r2,r2,1024
   1430c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14310:	e0bff917 	ldw	r2,-28(fp)
   14314:	10000915 	stw	zero,36(r2)
   14318:	00000a06 	br	14344 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1431c:	e0bff917 	ldw	r2,-28(fp)
   14320:	10c00917 	ldw	r3,36(r2)
   14324:	00a00034 	movhi	r2,32768
   14328:	10bfff04 	addi	r2,r2,-4
   1432c:	10c00536 	bltu	r2,r3,14344 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14330:	e0bff917 	ldw	r2,-28(fp)
   14334:	10800917 	ldw	r2,36(r2)
   14338:	10c00044 	addi	r3,r2,1
   1433c:	e0bff917 	ldw	r2,-28(fp)
   14340:	10c00915 	stw	r3,36(r2)
   14344:	008000b4 	movhi	r2,2
   14348:	10a74504 	addi	r2,r2,-25324
   1434c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14350:	e037883a 	mov	sp,fp
   14354:	df000017 	ldw	fp,0(sp)
   14358:	dec00104 	addi	sp,sp,4
   1435c:	f800283a 	ret

00014360 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14360:	defffd04 	addi	sp,sp,-12
   14364:	df000215 	stw	fp,8(sp)
   14368:	df000204 	addi	fp,sp,8
   1436c:	e13ffe15 	stw	r4,-8(fp)
   14370:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14374:	00000506 	br	1438c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14378:	e0bfff17 	ldw	r2,-4(fp)
   1437c:	1090000c 	andi	r2,r2,16384
   14380:	10000226 	beq	r2,zero,1438c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14384:	00bffd44 	movi	r2,-11
   14388:	00000b06 	br	143b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1438c:	e0bffe17 	ldw	r2,-8(fp)
   14390:	10c00d17 	ldw	r3,52(r2)
   14394:	e0bffe17 	ldw	r2,-8(fp)
   14398:	10800c17 	ldw	r2,48(r2)
   1439c:	18800526 	beq	r3,r2,143b4 <altera_avalon_jtag_uart_close+0x54>
   143a0:	e0bffe17 	ldw	r2,-8(fp)
   143a4:	10c00917 	ldw	r3,36(r2)
   143a8:	e0bffe17 	ldw	r2,-8(fp)
   143ac:	10800117 	ldw	r2,4(r2)
   143b0:	18bff136 	bltu	r3,r2,14378 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   143b4:	0005883a 	mov	r2,zero
}
   143b8:	e037883a 	mov	sp,fp
   143bc:	df000017 	ldw	fp,0(sp)
   143c0:	dec00104 	addi	sp,sp,4
   143c4:	f800283a 	ret

000143c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   143c8:	defffa04 	addi	sp,sp,-24
   143cc:	df000515 	stw	fp,20(sp)
   143d0:	df000504 	addi	fp,sp,20
   143d4:	e13ffd15 	stw	r4,-12(fp)
   143d8:	e17ffe15 	stw	r5,-8(fp)
   143dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   143e0:	00bff9c4 	movi	r2,-25
   143e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   143e8:	e0bffe17 	ldw	r2,-8(fp)
   143ec:	10da8060 	cmpeqi	r3,r2,27137
   143f0:	1800031e 	bne	r3,zero,14400 <altera_avalon_jtag_uart_ioctl+0x38>
   143f4:	109a80a0 	cmpeqi	r2,r2,27138
   143f8:	1000191e 	bne	r2,zero,14460 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   143fc:	00002806 	br	144a0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14400:	e0bffd17 	ldw	r2,-12(fp)
   14404:	10c00117 	ldw	r3,4(r2)
   14408:	00a00034 	movhi	r2,32768
   1440c:	10bfffc4 	addi	r2,r2,-1
   14410:	18801226 	beq	r3,r2,1445c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   14414:	e0bfff17 	ldw	r2,-4(fp)
   14418:	10800017 	ldw	r2,0(r2)
   1441c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14420:	e0bffc17 	ldw	r2,-16(fp)
   14424:	10800090 	cmplti	r2,r2,2
   14428:	1000061e 	bne	r2,zero,14444 <altera_avalon_jtag_uart_ioctl+0x7c>
   1442c:	e0fffc17 	ldw	r3,-16(fp)
   14430:	00a00034 	movhi	r2,32768
   14434:	10bfffc4 	addi	r2,r2,-1
   14438:	18800226 	beq	r3,r2,14444 <altera_avalon_jtag_uart_ioctl+0x7c>
   1443c:	e0bffc17 	ldw	r2,-16(fp)
   14440:	00000206 	br	1444c <altera_avalon_jtag_uart_ioctl+0x84>
   14444:	00a00034 	movhi	r2,32768
   14448:	10bfff84 	addi	r2,r2,-2
   1444c:	e0fffd17 	ldw	r3,-12(fp)
   14450:	18800115 	stw	r2,4(r3)
      rc = 0;
   14454:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14458:	00001106 	br	144a0 <altera_avalon_jtag_uart_ioctl+0xd8>
   1445c:	00001006 	br	144a0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   14460:	e0bffd17 	ldw	r2,-12(fp)
   14464:	10c00117 	ldw	r3,4(r2)
   14468:	00a00034 	movhi	r2,32768
   1446c:	10bfffc4 	addi	r2,r2,-1
   14470:	18800a26 	beq	r3,r2,1449c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14474:	e0bffd17 	ldw	r2,-12(fp)
   14478:	10c00917 	ldw	r3,36(r2)
   1447c:	e0bffd17 	ldw	r2,-12(fp)
   14480:	10800117 	ldw	r2,4(r2)
   14484:	1885803a 	cmpltu	r2,r3,r2
   14488:	10c03fcc 	andi	r3,r2,255
   1448c:	e0bfff17 	ldw	r2,-4(fp)
   14490:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14494:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14498:	00000006 	br	1449c <altera_avalon_jtag_uart_ioctl+0xd4>
   1449c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   144a0:	e0bffb17 	ldw	r2,-20(fp)
}
   144a4:	e037883a 	mov	sp,fp
   144a8:	df000017 	ldw	fp,0(sp)
   144ac:	dec00104 	addi	sp,sp,4
   144b0:	f800283a 	ret

000144b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   144b4:	defff304 	addi	sp,sp,-52
   144b8:	dfc00c15 	stw	ra,48(sp)
   144bc:	df000b15 	stw	fp,44(sp)
   144c0:	df000b04 	addi	fp,sp,44
   144c4:	e13ffc15 	stw	r4,-16(fp)
   144c8:	e17ffd15 	stw	r5,-12(fp)
   144cc:	e1bffe15 	stw	r6,-8(fp)
   144d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   144d4:	e0bffd17 	ldw	r2,-12(fp)
   144d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   144dc:	00004906 	br	14604 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   144e0:	e0bffc17 	ldw	r2,-16(fp)
   144e4:	10800a17 	ldw	r2,40(r2)
   144e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   144ec:	e0bffc17 	ldw	r2,-16(fp)
   144f0:	10800b17 	ldw	r2,44(r2)
   144f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   144f8:	e0fff717 	ldw	r3,-36(fp)
   144fc:	e0bff817 	ldw	r2,-32(fp)
   14500:	18800536 	bltu	r3,r2,14518 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14504:	e0fff717 	ldw	r3,-36(fp)
   14508:	e0bff817 	ldw	r2,-32(fp)
   1450c:	1885c83a 	sub	r2,r3,r2
   14510:	e0bff615 	stw	r2,-40(fp)
   14514:	00000406 	br	14528 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14518:	00c20004 	movi	r3,2048
   1451c:	e0bff817 	ldw	r2,-32(fp)
   14520:	1885c83a 	sub	r2,r3,r2
   14524:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14528:	e0bff617 	ldw	r2,-40(fp)
   1452c:	1000011e 	bne	r2,zero,14534 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   14530:	00001d06 	br	145a8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   14534:	e0fffe17 	ldw	r3,-8(fp)
   14538:	e0bff617 	ldw	r2,-40(fp)
   1453c:	1880022e 	bgeu	r3,r2,14548 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   14540:	e0bffe17 	ldw	r2,-8(fp)
   14544:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14548:	e0bff817 	ldw	r2,-32(fp)
   1454c:	10800e04 	addi	r2,r2,56
   14550:	e0fffc17 	ldw	r3,-16(fp)
   14554:	1885883a 	add	r2,r3,r2
   14558:	e13ff517 	ldw	r4,-44(fp)
   1455c:	100b883a 	mov	r5,r2
   14560:	e1bff617 	ldw	r6,-40(fp)
   14564:	00124f00 	call	124f0 <memcpy>
      ptr   += n;
   14568:	e0fff517 	ldw	r3,-44(fp)
   1456c:	e0bff617 	ldw	r2,-40(fp)
   14570:	1885883a 	add	r2,r3,r2
   14574:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14578:	e0fffe17 	ldw	r3,-8(fp)
   1457c:	e0bff617 	ldw	r2,-40(fp)
   14580:	1885c83a 	sub	r2,r3,r2
   14584:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14588:	e0fff817 	ldw	r3,-32(fp)
   1458c:	e0bff617 	ldw	r2,-40(fp)
   14590:	1885883a 	add	r2,r3,r2
   14594:	10c1ffcc 	andi	r3,r2,2047
   14598:	e0bffc17 	ldw	r2,-16(fp)
   1459c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   145a0:	e0bffe17 	ldw	r2,-8(fp)
   145a4:	00bfce16 	blt	zero,r2,144e0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   145a8:	e0fff517 	ldw	r3,-44(fp)
   145ac:	e0bffd17 	ldw	r2,-12(fp)
   145b0:	18800126 	beq	r3,r2,145b8 <altera_avalon_jtag_uart_read+0x104>
      break;
   145b4:	00001506 	br	1460c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   145b8:	e0bfff17 	ldw	r2,-4(fp)
   145bc:	1090000c 	andi	r2,r2,16384
   145c0:	10000126 	beq	r2,zero,145c8 <altera_avalon_jtag_uart_read+0x114>
      break;
   145c4:	00001106 	br	1460c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   145c8:	0001883a 	nop
   145cc:	e0bffc17 	ldw	r2,-16(fp)
   145d0:	10c00a17 	ldw	r3,40(r2)
   145d4:	e0bff717 	ldw	r2,-36(fp)
   145d8:	1880051e 	bne	r3,r2,145f0 <altera_avalon_jtag_uart_read+0x13c>
   145dc:	e0bffc17 	ldw	r2,-16(fp)
   145e0:	10c00917 	ldw	r3,36(r2)
   145e4:	e0bffc17 	ldw	r2,-16(fp)
   145e8:	10800117 	ldw	r2,4(r2)
   145ec:	18bff736 	bltu	r3,r2,145cc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   145f0:	e0bffc17 	ldw	r2,-16(fp)
   145f4:	10c00a17 	ldw	r3,40(r2)
   145f8:	e0bff717 	ldw	r2,-36(fp)
   145fc:	1880011e 	bne	r3,r2,14604 <altera_avalon_jtag_uart_read+0x150>
      break;
   14600:	00000206 	br	1460c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14604:	e0bffe17 	ldw	r2,-8(fp)
   14608:	00bfb516 	blt	zero,r2,144e0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1460c:	e0fff517 	ldw	r3,-44(fp)
   14610:	e0bffd17 	ldw	r2,-12(fp)
   14614:	18801826 	beq	r3,r2,14678 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14618:	0005303a 	rdctl	r2,status
   1461c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14620:	e0fffa17 	ldw	r3,-24(fp)
   14624:	00bfff84 	movi	r2,-2
   14628:	1884703a 	and	r2,r3,r2
   1462c:	1001703a 	wrctl	status,r2
  
  return context;
   14630:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14634:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14638:	e0bffc17 	ldw	r2,-16(fp)
   1463c:	10800817 	ldw	r2,32(r2)
   14640:	10c00054 	ori	r3,r2,1
   14644:	e0bffc17 	ldw	r2,-16(fp)
   14648:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1464c:	e0bffc17 	ldw	r2,-16(fp)
   14650:	10800017 	ldw	r2,0(r2)
   14654:	10800104 	addi	r2,r2,4
   14658:	1007883a 	mov	r3,r2
   1465c:	e0bffc17 	ldw	r2,-16(fp)
   14660:	10800817 	ldw	r2,32(r2)
   14664:	18800035 	stwio	r2,0(r3)
   14668:	e0bff917 	ldw	r2,-28(fp)
   1466c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14670:	e0bffb17 	ldw	r2,-20(fp)
   14674:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14678:	e0fff517 	ldw	r3,-44(fp)
   1467c:	e0bffd17 	ldw	r2,-12(fp)
   14680:	18800426 	beq	r3,r2,14694 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   14684:	e0fff517 	ldw	r3,-44(fp)
   14688:	e0bffd17 	ldw	r2,-12(fp)
   1468c:	1885c83a 	sub	r2,r3,r2
   14690:	00000606 	br	146ac <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   14694:	e0bfff17 	ldw	r2,-4(fp)
   14698:	1090000c 	andi	r2,r2,16384
   1469c:	10000226 	beq	r2,zero,146a8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   146a0:	00bffd44 	movi	r2,-11
   146a4:	00000106 	br	146ac <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   146a8:	00bffec4 	movi	r2,-5
}
   146ac:	e037883a 	mov	sp,fp
   146b0:	dfc00117 	ldw	ra,4(sp)
   146b4:	df000017 	ldw	fp,0(sp)
   146b8:	dec00204 	addi	sp,sp,8
   146bc:	f800283a 	ret

000146c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   146c0:	defff304 	addi	sp,sp,-52
   146c4:	dfc00c15 	stw	ra,48(sp)
   146c8:	df000b15 	stw	fp,44(sp)
   146cc:	df000b04 	addi	fp,sp,44
   146d0:	e13ffc15 	stw	r4,-16(fp)
   146d4:	e17ffd15 	stw	r5,-12(fp)
   146d8:	e1bffe15 	stw	r6,-8(fp)
   146dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   146e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   146e4:	e0bffd17 	ldw	r2,-12(fp)
   146e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   146ec:	00003806 	br	147d0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   146f0:	e0bffc17 	ldw	r2,-16(fp)
   146f4:	10800c17 	ldw	r2,48(r2)
   146f8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   146fc:	e0bffc17 	ldw	r2,-16(fp)
   14700:	10800d17 	ldw	r2,52(r2)
   14704:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14708:	e0fff817 	ldw	r3,-32(fp)
   1470c:	e0bff517 	ldw	r2,-44(fp)
   14710:	1880062e 	bgeu	r3,r2,1472c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14714:	e0fff517 	ldw	r3,-44(fp)
   14718:	e0bff817 	ldw	r2,-32(fp)
   1471c:	1885c83a 	sub	r2,r3,r2
   14720:	10bfffc4 	addi	r2,r2,-1
   14724:	e0bff615 	stw	r2,-40(fp)
   14728:	00000b06 	br	14758 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1472c:	e0bff517 	ldw	r2,-44(fp)
   14730:	10000526 	beq	r2,zero,14748 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14734:	00c20004 	movi	r3,2048
   14738:	e0bff817 	ldw	r2,-32(fp)
   1473c:	1885c83a 	sub	r2,r3,r2
   14740:	e0bff615 	stw	r2,-40(fp)
   14744:	00000406 	br	14758 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14748:	00c1ffc4 	movi	r3,2047
   1474c:	e0bff817 	ldw	r2,-32(fp)
   14750:	1885c83a 	sub	r2,r3,r2
   14754:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14758:	e0bff617 	ldw	r2,-40(fp)
   1475c:	1000011e 	bne	r2,zero,14764 <altera_avalon_jtag_uart_write+0xa4>
        break;
   14760:	00001d06 	br	147d8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   14764:	e0fffe17 	ldw	r3,-8(fp)
   14768:	e0bff617 	ldw	r2,-40(fp)
   1476c:	1880022e 	bgeu	r3,r2,14778 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   14770:	e0bffe17 	ldw	r2,-8(fp)
   14774:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14778:	e0bff817 	ldw	r2,-32(fp)
   1477c:	10820e04 	addi	r2,r2,2104
   14780:	e0fffc17 	ldw	r3,-16(fp)
   14784:	1885883a 	add	r2,r3,r2
   14788:	1009883a 	mov	r4,r2
   1478c:	e17ffd17 	ldw	r5,-12(fp)
   14790:	e1bff617 	ldw	r6,-40(fp)
   14794:	00124f00 	call	124f0 <memcpy>
      ptr   += n;
   14798:	e0fffd17 	ldw	r3,-12(fp)
   1479c:	e0bff617 	ldw	r2,-40(fp)
   147a0:	1885883a 	add	r2,r3,r2
   147a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   147a8:	e0fffe17 	ldw	r3,-8(fp)
   147ac:	e0bff617 	ldw	r2,-40(fp)
   147b0:	1885c83a 	sub	r2,r3,r2
   147b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   147b8:	e0fff817 	ldw	r3,-32(fp)
   147bc:	e0bff617 	ldw	r2,-40(fp)
   147c0:	1885883a 	add	r2,r3,r2
   147c4:	10c1ffcc 	andi	r3,r2,2047
   147c8:	e0bffc17 	ldw	r2,-16(fp)
   147cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   147d0:	e0bffe17 	ldw	r2,-8(fp)
   147d4:	00bfc616 	blt	zero,r2,146f0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147d8:	0005303a 	rdctl	r2,status
   147dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147e0:	e0fffa17 	ldw	r3,-24(fp)
   147e4:	00bfff84 	movi	r2,-2
   147e8:	1884703a 	and	r2,r3,r2
   147ec:	1001703a 	wrctl	status,r2
  
  return context;
   147f0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   147f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   147f8:	e0bffc17 	ldw	r2,-16(fp)
   147fc:	10800817 	ldw	r2,32(r2)
   14800:	10c00094 	ori	r3,r2,2
   14804:	e0bffc17 	ldw	r2,-16(fp)
   14808:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1480c:	e0bffc17 	ldw	r2,-16(fp)
   14810:	10800017 	ldw	r2,0(r2)
   14814:	10800104 	addi	r2,r2,4
   14818:	1007883a 	mov	r3,r2
   1481c:	e0bffc17 	ldw	r2,-16(fp)
   14820:	10800817 	ldw	r2,32(r2)
   14824:	18800035 	stwio	r2,0(r3)
   14828:	e0bff917 	ldw	r2,-28(fp)
   1482c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14830:	e0bffb17 	ldw	r2,-20(fp)
   14834:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14838:	e0bffe17 	ldw	r2,-8(fp)
   1483c:	0080120e 	bge	zero,r2,14888 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   14840:	e0bfff17 	ldw	r2,-4(fp)
   14844:	1090000c 	andi	r2,r2,16384
   14848:	10000126 	beq	r2,zero,14850 <altera_avalon_jtag_uart_write+0x190>
        break;
   1484c:	00001006 	br	14890 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14850:	0001883a 	nop
   14854:	e0bffc17 	ldw	r2,-16(fp)
   14858:	10c00d17 	ldw	r3,52(r2)
   1485c:	e0bff517 	ldw	r2,-44(fp)
   14860:	1880051e 	bne	r3,r2,14878 <altera_avalon_jtag_uart_write+0x1b8>
   14864:	e0bffc17 	ldw	r2,-16(fp)
   14868:	10c00917 	ldw	r3,36(r2)
   1486c:	e0bffc17 	ldw	r2,-16(fp)
   14870:	10800117 	ldw	r2,4(r2)
   14874:	18bff736 	bltu	r3,r2,14854 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14878:	e0bffc17 	ldw	r2,-16(fp)
   1487c:	10800917 	ldw	r2,36(r2)
   14880:	10000126 	beq	r2,zero,14888 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   14884:	00000206 	br	14890 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   14888:	e0bffe17 	ldw	r2,-8(fp)
   1488c:	00bf9716 	blt	zero,r2,146ec <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14890:	e0fffd17 	ldw	r3,-12(fp)
   14894:	e0bff717 	ldw	r2,-36(fp)
   14898:	18800426 	beq	r3,r2,148ac <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   1489c:	e0fffd17 	ldw	r3,-12(fp)
   148a0:	e0bff717 	ldw	r2,-36(fp)
   148a4:	1885c83a 	sub	r2,r3,r2
   148a8:	00000606 	br	148c4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   148ac:	e0bfff17 	ldw	r2,-4(fp)
   148b0:	1090000c 	andi	r2,r2,16384
   148b4:	10000226 	beq	r2,zero,148c0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   148b8:	00bffd44 	movi	r2,-11
   148bc:	00000106 	br	148c4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   148c0:	00bffec4 	movi	r2,-5
}
   148c4:	e037883a 	mov	sp,fp
   148c8:	dfc00117 	ldw	ra,4(sp)
   148cc:	df000017 	ldw	fp,0(sp)
   148d0:	dec00204 	addi	sp,sp,8
   148d4:	f800283a 	ret

000148d8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   148d8:	defffa04 	addi	sp,sp,-24
   148dc:	dfc00515 	stw	ra,20(sp)
   148e0:	df000415 	stw	fp,16(sp)
   148e4:	df000404 	addi	fp,sp,16
   148e8:	e13ffd15 	stw	r4,-12(fp)
   148ec:	e17ffe15 	stw	r5,-8(fp)
   148f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   148f4:	e0bffd17 	ldw	r2,-12(fp)
   148f8:	10800017 	ldw	r2,0(r2)
   148fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   14900:	e0bffc17 	ldw	r2,-16(fp)
   14904:	10c00a04 	addi	r3,r2,40
   14908:	e0bffd17 	ldw	r2,-12(fp)
   1490c:	10800217 	ldw	r2,8(r2)
   14910:	1809883a 	mov	r4,r3
   14914:	e17ffe17 	ldw	r5,-8(fp)
   14918:	e1bfff17 	ldw	r6,-4(fp)
   1491c:	100f883a 	mov	r7,r2
   14920:	0014df00 	call	14df0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   14924:	e037883a 	mov	sp,fp
   14928:	dfc00117 	ldw	ra,4(sp)
   1492c:	df000017 	ldw	fp,0(sp)
   14930:	dec00204 	addi	sp,sp,8
   14934:	f800283a 	ret

00014938 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14938:	defffa04 	addi	sp,sp,-24
   1493c:	dfc00515 	stw	ra,20(sp)
   14940:	df000415 	stw	fp,16(sp)
   14944:	df000404 	addi	fp,sp,16
   14948:	e13ffd15 	stw	r4,-12(fp)
   1494c:	e17ffe15 	stw	r5,-8(fp)
   14950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   14954:	e0bffd17 	ldw	r2,-12(fp)
   14958:	10800017 	ldw	r2,0(r2)
   1495c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   14960:	e0bffc17 	ldw	r2,-16(fp)
   14964:	10c00a04 	addi	r3,r2,40
   14968:	e0bffd17 	ldw	r2,-12(fp)
   1496c:	10800217 	ldw	r2,8(r2)
   14970:	1809883a 	mov	r4,r3
   14974:	e17ffe17 	ldw	r5,-8(fp)
   14978:	e1bfff17 	ldw	r6,-4(fp)
   1497c:	100f883a 	mov	r7,r2
   14980:	001501c0 	call	1501c <altera_avalon_uart_write>
      fd->fd_flags);
}
   14984:	e037883a 	mov	sp,fp
   14988:	dfc00117 	ldw	ra,4(sp)
   1498c:	df000017 	ldw	fp,0(sp)
   14990:	dec00204 	addi	sp,sp,8
   14994:	f800283a 	ret

00014998 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   14998:	defffc04 	addi	sp,sp,-16
   1499c:	dfc00315 	stw	ra,12(sp)
   149a0:	df000215 	stw	fp,8(sp)
   149a4:	df000204 	addi	fp,sp,8
   149a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   149ac:	e0bfff17 	ldw	r2,-4(fp)
   149b0:	10800017 	ldw	r2,0(r2)
   149b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   149b8:	e0bffe17 	ldw	r2,-8(fp)
   149bc:	10c00a04 	addi	r3,r2,40
   149c0:	e0bfff17 	ldw	r2,-4(fp)
   149c4:	10800217 	ldw	r2,8(r2)
   149c8:	1809883a 	mov	r4,r3
   149cc:	100b883a 	mov	r5,r2
   149d0:	0014d4c0 	call	14d4c <altera_avalon_uart_close>
}
   149d4:	e037883a 	mov	sp,fp
   149d8:	dfc00117 	ldw	ra,4(sp)
   149dc:	df000017 	ldw	fp,0(sp)
   149e0:	dec00204 	addi	sp,sp,8
   149e4:	f800283a 	ret

000149e8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   149e8:	defff804 	addi	sp,sp,-32
   149ec:	dfc00715 	stw	ra,28(sp)
   149f0:	df000615 	stw	fp,24(sp)
   149f4:	df000604 	addi	fp,sp,24
   149f8:	e13ffd15 	stw	r4,-12(fp)
   149fc:	e17ffe15 	stw	r5,-8(fp)
   14a00:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   14a04:	e0bffd17 	ldw	r2,-12(fp)
   14a08:	10800017 	ldw	r2,0(r2)
   14a0c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   14a10:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   14a14:	1000041e 	bne	r2,zero,14a28 <altera_avalon_uart_init+0x40>
   14a18:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   14a1c:	1000021e 	bne	r2,zero,14a28 <altera_avalon_uart_init+0x40>
   14a20:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   14a24:	10000226 	beq	r2,zero,14a30 <altera_avalon_uart_init+0x48>
   14a28:	00800044 	movi	r2,1
   14a2c:	00000106 	br	14a34 <altera_avalon_uart_init+0x4c>
   14a30:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   14a34:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   14a38:	e0bffc17 	ldw	r2,-16(fp)
   14a3c:	10000f1e 	bne	r2,zero,14a7c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   14a40:	e0bffd17 	ldw	r2,-12(fp)
   14a44:	00c32004 	movi	r3,3200
   14a48:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   14a4c:	e0bffb17 	ldw	r2,-20(fp)
   14a50:	10800304 	addi	r2,r2,12
   14a54:	e0fffd17 	ldw	r3,-12(fp)
   14a58:	18c00117 	ldw	r3,4(r3)
   14a5c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   14a60:	d8000015 	stw	zero,0(sp)
   14a64:	e13ffe17 	ldw	r4,-8(fp)
   14a68:	e17fff17 	ldw	r5,-4(fp)
   14a6c:	01800074 	movhi	r6,1
   14a70:	3192a404 	addi	r6,r6,19088
   14a74:	e1fffd17 	ldw	r7,-12(fp)
   14a78:	00156800 	call	15680 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   14a7c:	e037883a 	mov	sp,fp
   14a80:	dfc00117 	ldw	ra,4(sp)
   14a84:	df000017 	ldw	fp,0(sp)
   14a88:	dec00204 	addi	sp,sp,8
   14a8c:	f800283a 	ret

00014a90 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   14a90:	defffa04 	addi	sp,sp,-24
   14a94:	dfc00515 	stw	ra,20(sp)
   14a98:	df000415 	stw	fp,16(sp)
   14a9c:	df000404 	addi	fp,sp,16
   14aa0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   14aa4:	e0bfff17 	ldw	r2,-4(fp)
   14aa8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   14aac:	e0bffc17 	ldw	r2,-16(fp)
   14ab0:	10800017 	ldw	r2,0(r2)
   14ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   14ab8:	e0bffd17 	ldw	r2,-12(fp)
   14abc:	10800204 	addi	r2,r2,8
   14ac0:	10800037 	ldwio	r2,0(r2)
   14ac4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   14ac8:	e0bffd17 	ldw	r2,-12(fp)
   14acc:	10800204 	addi	r2,r2,8
   14ad0:	0007883a 	mov	r3,zero
   14ad4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   14ad8:	e0bffd17 	ldw	r2,-12(fp)
   14adc:	10800204 	addi	r2,r2,8
   14ae0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   14ae4:	e0bffe17 	ldw	r2,-8(fp)
   14ae8:	1080200c 	andi	r2,r2,128
   14aec:	10000326 	beq	r2,zero,14afc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   14af0:	e13ffc17 	ldw	r4,-16(fp)
   14af4:	e17ffe17 	ldw	r5,-8(fp)
   14af8:	0014b280 	call	14b28 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   14afc:	e0bffe17 	ldw	r2,-8(fp)
   14b00:	1081100c 	andi	r2,r2,1088
   14b04:	10000326 	beq	r2,zero,14b14 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   14b08:	e13ffc17 	ldw	r4,-16(fp)
   14b0c:	e17ffe17 	ldw	r5,-8(fp)
   14b10:	0014c080 	call	14c08 <altera_avalon_uart_txirq>
  }
  

}
   14b14:	e037883a 	mov	sp,fp
   14b18:	dfc00117 	ldw	ra,4(sp)
   14b1c:	df000017 	ldw	fp,0(sp)
   14b20:	dec00204 	addi	sp,sp,8
   14b24:	f800283a 	ret

00014b28 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   14b28:	defffc04 	addi	sp,sp,-16
   14b2c:	df000315 	stw	fp,12(sp)
   14b30:	df000304 	addi	fp,sp,12
   14b34:	e13ffe15 	stw	r4,-8(fp)
   14b38:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   14b3c:	e0bfff17 	ldw	r2,-4(fp)
   14b40:	108000cc 	andi	r2,r2,3
   14b44:	10000126 	beq	r2,zero,14b4c <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   14b48:	00002b06 	br	14bf8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   14b4c:	e0bffe17 	ldw	r2,-8(fp)
   14b50:	10800317 	ldw	r2,12(r2)
   14b54:	e0bffe17 	ldw	r2,-8(fp)
   14b58:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   14b5c:	e0bffe17 	ldw	r2,-8(fp)
   14b60:	10800317 	ldw	r2,12(r2)
   14b64:	10800044 	addi	r2,r2,1
   14b68:	10800fcc 	andi	r2,r2,63
   14b6c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   14b70:	e0bffe17 	ldw	r2,-8(fp)
   14b74:	10800317 	ldw	r2,12(r2)
   14b78:	e0fffe17 	ldw	r3,-8(fp)
   14b7c:	18c00017 	ldw	r3,0(r3)
   14b80:	18c00037 	ldwio	r3,0(r3)
   14b84:	1809883a 	mov	r4,r3
   14b88:	e0fffe17 	ldw	r3,-8(fp)
   14b8c:	1885883a 	add	r2,r3,r2
   14b90:	10800704 	addi	r2,r2,28
   14b94:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	e0fffd17 	ldw	r3,-12(fp)
   14ba0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   14ba4:	e0bffe17 	ldw	r2,-8(fp)
   14ba8:	10800317 	ldw	r2,12(r2)
   14bac:	10800044 	addi	r2,r2,1
   14bb0:	10800fcc 	andi	r2,r2,63
   14bb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   14bb8:	e0bffe17 	ldw	r2,-8(fp)
   14bbc:	10c00217 	ldw	r3,8(r2)
   14bc0:	e0bffd17 	ldw	r2,-12(fp)
   14bc4:	18800c1e 	bne	r3,r2,14bf8 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   14bc8:	e0bffe17 	ldw	r2,-8(fp)
   14bcc:	10c00117 	ldw	r3,4(r2)
   14bd0:	00bfdfc4 	movi	r2,-129
   14bd4:	1886703a 	and	r3,r3,r2
   14bd8:	e0bffe17 	ldw	r2,-8(fp)
   14bdc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   14be0:	e0bffe17 	ldw	r2,-8(fp)
   14be4:	10800017 	ldw	r2,0(r2)
   14be8:	10800304 	addi	r2,r2,12
   14bec:	e0fffe17 	ldw	r3,-8(fp)
   14bf0:	18c00117 	ldw	r3,4(r3)
   14bf4:	10c00035 	stwio	r3,0(r2)
  }   
}
   14bf8:	e037883a 	mov	sp,fp
   14bfc:	df000017 	ldw	fp,0(sp)
   14c00:	dec00104 	addi	sp,sp,4
   14c04:	f800283a 	ret

00014c08 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   14c08:	defffb04 	addi	sp,sp,-20
   14c0c:	df000415 	stw	fp,16(sp)
   14c10:	df000404 	addi	fp,sp,16
   14c14:	e13ffc15 	stw	r4,-16(fp)
   14c18:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   14c1c:	e0bffc17 	ldw	r2,-16(fp)
   14c20:	10c00417 	ldw	r3,16(r2)
   14c24:	e0bffc17 	ldw	r2,-16(fp)
   14c28:	10800517 	ldw	r2,20(r2)
   14c2c:	18803226 	beq	r3,r2,14cf8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   14c30:	e0bffc17 	ldw	r2,-16(fp)
   14c34:	10800617 	ldw	r2,24(r2)
   14c38:	1080008c 	andi	r2,r2,2
   14c3c:	10000326 	beq	r2,zero,14c4c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   14c40:	e0bffd17 	ldw	r2,-12(fp)
   14c44:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   14c48:	10001d26 	beq	r2,zero,14cc0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   14c4c:	e0bffc17 	ldw	r2,-16(fp)
   14c50:	10800417 	ldw	r2,16(r2)
   14c54:	e0bffc17 	ldw	r2,-16(fp)
   14c58:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   14c5c:	e0bffc17 	ldw	r2,-16(fp)
   14c60:	10800017 	ldw	r2,0(r2)
   14c64:	10800104 	addi	r2,r2,4
   14c68:	e0fffc17 	ldw	r3,-16(fp)
   14c6c:	18c00417 	ldw	r3,16(r3)
   14c70:	e13ffc17 	ldw	r4,-16(fp)
   14c74:	20c7883a 	add	r3,r4,r3
   14c78:	18c01704 	addi	r3,r3,92
   14c7c:	18c00003 	ldbu	r3,0(r3)
   14c80:	18c03fcc 	andi	r3,r3,255
   14c84:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   14c88:	e0bffc17 	ldw	r2,-16(fp)
   14c8c:	10800417 	ldw	r2,16(r2)
   14c90:	10800044 	addi	r2,r2,1
   14c94:	e0fffc17 	ldw	r3,-16(fp)
   14c98:	18800415 	stw	r2,16(r3)
   14c9c:	10c00fcc 	andi	r3,r2,63
   14ca0:	e0bffc17 	ldw	r2,-16(fp)
   14ca4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   14ca8:	e0bffc17 	ldw	r2,-16(fp)
   14cac:	10800117 	ldw	r2,4(r2)
   14cb0:	10c01014 	ori	r3,r2,64
   14cb4:	e0bffc17 	ldw	r2,-16(fp)
   14cb8:	10c00115 	stw	r3,4(r2)
   14cbc:	00000e06 	br	14cf8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   14cc0:	e0bffc17 	ldw	r2,-16(fp)
   14cc4:	10800017 	ldw	r2,0(r2)
   14cc8:	10800204 	addi	r2,r2,8
   14ccc:	10800037 	ldwio	r2,0(r2)
   14cd0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   14cd4:	e0bffd17 	ldw	r2,-12(fp)
   14cd8:	1082000c 	andi	r2,r2,2048
   14cdc:	1000061e 	bne	r2,zero,14cf8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   14ce0:	e0bffc17 	ldw	r2,-16(fp)
   14ce4:	10c00117 	ldw	r3,4(r2)
   14ce8:	00bfefc4 	movi	r2,-65
   14cec:	1886703a 	and	r3,r3,r2
   14cf0:	e0bffc17 	ldw	r2,-16(fp)
   14cf4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   14cf8:	e0bffc17 	ldw	r2,-16(fp)
   14cfc:	10c00417 	ldw	r3,16(r2)
   14d00:	e0bffc17 	ldw	r2,-16(fp)
   14d04:	10800517 	ldw	r2,20(r2)
   14d08:	1880061e 	bne	r3,r2,14d24 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   14d0c:	e0bffc17 	ldw	r2,-16(fp)
   14d10:	10c00117 	ldw	r3,4(r2)
   14d14:	00beefc4 	movi	r2,-1089
   14d18:	1886703a 	and	r3,r3,r2
   14d1c:	e0bffc17 	ldw	r2,-16(fp)
   14d20:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   14d24:	e0bffc17 	ldw	r2,-16(fp)
   14d28:	10800017 	ldw	r2,0(r2)
   14d2c:	10800304 	addi	r2,r2,12
   14d30:	e0fffc17 	ldw	r3,-16(fp)
   14d34:	18c00117 	ldw	r3,4(r3)
   14d38:	10c00035 	stwio	r3,0(r2)
}
   14d3c:	e037883a 	mov	sp,fp
   14d40:	df000017 	ldw	fp,0(sp)
   14d44:	dec00104 	addi	sp,sp,4
   14d48:	f800283a 	ret

00014d4c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   14d4c:	defffd04 	addi	sp,sp,-12
   14d50:	df000215 	stw	fp,8(sp)
   14d54:	df000204 	addi	fp,sp,8
   14d58:	e13ffe15 	stw	r4,-8(fp)
   14d5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   14d60:	00000506 	br	14d78 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14d64:	e0bfff17 	ldw	r2,-4(fp)
   14d68:	1090000c 	andi	r2,r2,16384
   14d6c:	10000226 	beq	r2,zero,14d78 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14d70:	00bffd44 	movi	r2,-11
   14d74:	00000606 	br	14d90 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   14d78:	e0bffe17 	ldw	r2,-8(fp)
   14d7c:	10c00417 	ldw	r3,16(r2)
   14d80:	e0bffe17 	ldw	r2,-8(fp)
   14d84:	10800517 	ldw	r2,20(r2)
   14d88:	18bff61e 	bne	r3,r2,14d64 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14d8c:	0005883a 	mov	r2,zero
}
   14d90:	e037883a 	mov	sp,fp
   14d94:	df000017 	ldw	fp,0(sp)
   14d98:	dec00104 	addi	sp,sp,4
   14d9c:	f800283a 	ret

00014da0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14da0:	defffe04 	addi	sp,sp,-8
   14da4:	dfc00115 	stw	ra,4(sp)
   14da8:	df000015 	stw	fp,0(sp)
   14dac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14db0:	008000b4 	movhi	r2,2
   14db4:	10a06c04 	addi	r2,r2,-32336
   14db8:	10800017 	ldw	r2,0(r2)
   14dbc:	10000526 	beq	r2,zero,14dd4 <alt_get_errno+0x34>
   14dc0:	008000b4 	movhi	r2,2
   14dc4:	10a06c04 	addi	r2,r2,-32336
   14dc8:	10800017 	ldw	r2,0(r2)
   14dcc:	103ee83a 	callr	r2
   14dd0:	00000206 	br	14ddc <alt_get_errno+0x3c>
   14dd4:	008000b4 	movhi	r2,2
   14dd8:	10a74004 	addi	r2,r2,-25344
}
   14ddc:	e037883a 	mov	sp,fp
   14de0:	dfc00117 	ldw	ra,4(sp)
   14de4:	df000017 	ldw	fp,0(sp)
   14de8:	dec00204 	addi	sp,sp,8
   14dec:	f800283a 	ret

00014df0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   14df0:	defff204 	addi	sp,sp,-56
   14df4:	dfc00d15 	stw	ra,52(sp)
   14df8:	df000c15 	stw	fp,48(sp)
   14dfc:	df000c04 	addi	fp,sp,48
   14e00:	e13ffc15 	stw	r4,-16(fp)
   14e04:	e17ffd15 	stw	r5,-12(fp)
   14e08:	e1bffe15 	stw	r6,-8(fp)
   14e0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   14e10:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   14e14:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   14e18:	e0bfff17 	ldw	r2,-4(fp)
   14e1c:	1090000c 	andi	r2,r2,16384
   14e20:	1005003a 	cmpeq	r2,r2,zero
   14e24:	10803fcc 	andi	r2,r2,255
   14e28:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   14e2c:	00001306 	br	14e7c <altera_avalon_uart_read+0x8c>
    {
      count++;
   14e30:	e0bff517 	ldw	r2,-44(fp)
   14e34:	10800044 	addi	r2,r2,1
   14e38:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   14e3c:	e0bffd17 	ldw	r2,-12(fp)
   14e40:	10c00044 	addi	r3,r2,1
   14e44:	e0fffd15 	stw	r3,-12(fp)
   14e48:	e0fffc17 	ldw	r3,-16(fp)
   14e4c:	18c00217 	ldw	r3,8(r3)
   14e50:	e13ffc17 	ldw	r4,-16(fp)
   14e54:	20c7883a 	add	r3,r4,r3
   14e58:	18c00704 	addi	r3,r3,28
   14e5c:	18c00003 	ldbu	r3,0(r3)
   14e60:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   14e64:	e0bffc17 	ldw	r2,-16(fp)
   14e68:	10800217 	ldw	r2,8(r2)
   14e6c:	10800044 	addi	r2,r2,1
   14e70:	10c00fcc 	andi	r3,r2,63
   14e74:	e0bffc17 	ldw	r2,-16(fp)
   14e78:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   14e7c:	e0fff517 	ldw	r3,-44(fp)
   14e80:	e0bffe17 	ldw	r2,-8(fp)
   14e84:	1880050e 	bge	r3,r2,14e9c <altera_avalon_uart_read+0xac>
   14e88:	e0bffc17 	ldw	r2,-16(fp)
   14e8c:	10c00217 	ldw	r3,8(r2)
   14e90:	e0bffc17 	ldw	r2,-16(fp)
   14e94:	10800317 	ldw	r2,12(r2)
   14e98:	18bfe51e 	bne	r3,r2,14e30 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   14e9c:	e0bff517 	ldw	r2,-44(fp)
   14ea0:	1000251e 	bne	r2,zero,14f38 <altera_avalon_uart_read+0x148>
   14ea4:	e0bffc17 	ldw	r2,-16(fp)
   14ea8:	10c00217 	ldw	r3,8(r2)
   14eac:	e0bffc17 	ldw	r2,-16(fp)
   14eb0:	10800317 	ldw	r2,12(r2)
   14eb4:	1880201e 	bne	r3,r2,14f38 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   14eb8:	e0bff617 	ldw	r2,-40(fp)
   14ebc:	1000071e 	bne	r2,zero,14edc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   14ec0:	0014da00 	call	14da0 <alt_get_errno>
   14ec4:	1007883a 	mov	r3,r2
   14ec8:	008002c4 	movi	r2,11
   14ecc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   14ed0:	00800044 	movi	r2,1
   14ed4:	e0bff405 	stb	r2,-48(fp)
        break;
   14ed8:	00001b06 	br	14f48 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14edc:	0005303a 	rdctl	r2,status
   14ee0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ee4:	e0fff817 	ldw	r3,-32(fp)
   14ee8:	00bfff84 	movi	r2,-2
   14eec:	1884703a 	and	r2,r3,r2
   14ef0:	1001703a 	wrctl	status,r2
  
  return context;
   14ef4:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   14ef8:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   14efc:	e0bffc17 	ldw	r2,-16(fp)
   14f00:	10800117 	ldw	r2,4(r2)
   14f04:	10c02014 	ori	r3,r2,128
   14f08:	e0bffc17 	ldw	r2,-16(fp)
   14f0c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   14f10:	e0bffc17 	ldw	r2,-16(fp)
   14f14:	10800017 	ldw	r2,0(r2)
   14f18:	10800304 	addi	r2,r2,12
   14f1c:	e0fffc17 	ldw	r3,-16(fp)
   14f20:	18c00117 	ldw	r3,4(r3)
   14f24:	10c00035 	stwio	r3,0(r2)
   14f28:	e0bff717 	ldw	r2,-36(fp)
   14f2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f30:	e0bff917 	ldw	r2,-28(fp)
   14f34:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   14f38:	e0bff517 	ldw	r2,-44(fp)
   14f3c:	1000021e 	bne	r2,zero,14f48 <altera_avalon_uart_read+0x158>
   14f40:	e0bffe17 	ldw	r2,-8(fp)
   14f44:	103fb91e 	bne	r2,zero,14e2c <altera_avalon_uart_read+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f48:	0005303a 	rdctl	r2,status
   14f4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f50:	e0fffa17 	ldw	r3,-24(fp)
   14f54:	00bfff84 	movi	r2,-2
   14f58:	1884703a 	and	r2,r3,r2
   14f5c:	1001703a 	wrctl	status,r2
  
  return context;
   14f60:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   14f64:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   14f68:	e0bffc17 	ldw	r2,-16(fp)
   14f6c:	10800117 	ldw	r2,4(r2)
   14f70:	10c02014 	ori	r3,r2,128
   14f74:	e0bffc17 	ldw	r2,-16(fp)
   14f78:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   14f7c:	e0bffc17 	ldw	r2,-16(fp)
   14f80:	10800017 	ldw	r2,0(r2)
   14f84:	10800304 	addi	r2,r2,12
   14f88:	e0fffc17 	ldw	r3,-16(fp)
   14f8c:	18c00117 	ldw	r3,4(r3)
   14f90:	10c00035 	stwio	r3,0(r2)
   14f94:	e0bff717 	ldw	r2,-36(fp)
   14f98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f9c:	e0bffb17 	ldw	r2,-20(fp)
   14fa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   14fa4:	e0bff403 	ldbu	r2,-48(fp)
   14fa8:	10000226 	beq	r2,zero,14fb4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   14fac:	00bffd44 	movi	r2,-11
   14fb0:	00000106 	br	14fb8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   14fb4:	e0bff517 	ldw	r2,-44(fp)
  }
}
   14fb8:	e037883a 	mov	sp,fp
   14fbc:	dfc00117 	ldw	ra,4(sp)
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00204 	addi	sp,sp,8
   14fc8:	f800283a 	ret

00014fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14fcc:	defffe04 	addi	sp,sp,-8
   14fd0:	dfc00115 	stw	ra,4(sp)
   14fd4:	df000015 	stw	fp,0(sp)
   14fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14fdc:	008000b4 	movhi	r2,2
   14fe0:	10a06c04 	addi	r2,r2,-32336
   14fe4:	10800017 	ldw	r2,0(r2)
   14fe8:	10000526 	beq	r2,zero,15000 <alt_get_errno+0x34>
   14fec:	008000b4 	movhi	r2,2
   14ff0:	10a06c04 	addi	r2,r2,-32336
   14ff4:	10800017 	ldw	r2,0(r2)
   14ff8:	103ee83a 	callr	r2
   14ffc:	00000206 	br	15008 <alt_get_errno+0x3c>
   15000:	008000b4 	movhi	r2,2
   15004:	10a74004 	addi	r2,r2,-25344
}
   15008:	e037883a 	mov	sp,fp
   1500c:	dfc00117 	ldw	ra,4(sp)
   15010:	df000017 	ldw	fp,0(sp)
   15014:	dec00204 	addi	sp,sp,8
   15018:	f800283a 	ret

0001501c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   1501c:	defff204 	addi	sp,sp,-56
   15020:	dfc00d15 	stw	ra,52(sp)
   15024:	df000c15 	stw	fp,48(sp)
   15028:	df000c04 	addi	fp,sp,48
   1502c:	e13ffc15 	stw	r4,-16(fp)
   15030:	e17ffd15 	stw	r5,-12(fp)
   15034:	e1bffe15 	stw	r6,-8(fp)
   15038:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   1503c:	e0bffe17 	ldw	r2,-8(fp)
   15040:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   15044:	e0bfff17 	ldw	r2,-4(fp)
   15048:	1090000c 	andi	r2,r2,16384
   1504c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   15050:	00003c06 	br	15144 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   15054:	e0bffc17 	ldw	r2,-16(fp)
   15058:	10800517 	ldw	r2,20(r2)
   1505c:	10800044 	addi	r2,r2,1
   15060:	10800fcc 	andi	r2,r2,63
   15064:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   15068:	e0bffc17 	ldw	r2,-16(fp)
   1506c:	10c00417 	ldw	r3,16(r2)
   15070:	e0bff617 	ldw	r2,-40(fp)
   15074:	1880221e 	bne	r3,r2,15100 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   15078:	e0bff517 	ldw	r2,-44(fp)
   1507c:	10000526 	beq	r2,zero,15094 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   15080:	0014fcc0 	call	14fcc <alt_get_errno>
   15084:	1007883a 	mov	r3,r2
   15088:	008002c4 	movi	r2,11
   1508c:	18800015 	stw	r2,0(r3)
        break;
   15090:	00002e06 	br	1514c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15094:	0005303a 	rdctl	r2,status
   15098:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1509c:	e0fff817 	ldw	r3,-32(fp)
   150a0:	00bfff84 	movi	r2,-2
   150a4:	1884703a 	and	r2,r3,r2
   150a8:	1001703a 	wrctl	status,r2
  
  return context;
   150ac:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   150b0:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   150b4:	e0bffc17 	ldw	r2,-16(fp)
   150b8:	10800117 	ldw	r2,4(r2)
   150bc:	10c11014 	ori	r3,r2,1088
   150c0:	e0bffc17 	ldw	r2,-16(fp)
   150c4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   150c8:	e0bffc17 	ldw	r2,-16(fp)
   150cc:	10800017 	ldw	r2,0(r2)
   150d0:	10800304 	addi	r2,r2,12
   150d4:	e0fffc17 	ldw	r3,-16(fp)
   150d8:	18c00117 	ldw	r3,4(r3)
   150dc:	10c00035 	stwio	r3,0(r2)
   150e0:	e0bff717 	ldw	r2,-36(fp)
   150e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150e8:	e0bff917 	ldw	r2,-28(fp)
   150ec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   150f0:	e0bffc17 	ldw	r2,-16(fp)
   150f4:	10c00417 	ldw	r3,16(r2)
   150f8:	e0bff617 	ldw	r2,-40(fp)
   150fc:	18bffc26 	beq	r3,r2,150f0 <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
   15100:	e0bff417 	ldw	r2,-48(fp)
   15104:	10bfffc4 	addi	r2,r2,-1
   15108:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   1510c:	e0bffc17 	ldw	r2,-16(fp)
   15110:	10c00517 	ldw	r3,20(r2)
   15114:	e0bffd17 	ldw	r2,-12(fp)
   15118:	11000044 	addi	r4,r2,1
   1511c:	e13ffd15 	stw	r4,-12(fp)
   15120:	10800003 	ldbu	r2,0(r2)
   15124:	1009883a 	mov	r4,r2
   15128:	e0bffc17 	ldw	r2,-16(fp)
   1512c:	10c5883a 	add	r2,r2,r3
   15130:	10801704 	addi	r2,r2,92
   15134:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   15138:	e0bffc17 	ldw	r2,-16(fp)
   1513c:	e0fff617 	ldw	r3,-40(fp)
   15140:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   15144:	e0bff417 	ldw	r2,-48(fp)
   15148:	103fc21e 	bne	r2,zero,15054 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1514c:	0005303a 	rdctl	r2,status
   15150:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15154:	e0fffa17 	ldw	r3,-24(fp)
   15158:	00bfff84 	movi	r2,-2
   1515c:	1884703a 	and	r2,r3,r2
   15160:	1001703a 	wrctl	status,r2
  
  return context;
   15164:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   15168:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1516c:	e0bffc17 	ldw	r2,-16(fp)
   15170:	10800117 	ldw	r2,4(r2)
   15174:	10c11014 	ori	r3,r2,1088
   15178:	e0bffc17 	ldw	r2,-16(fp)
   1517c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   15180:	e0bffc17 	ldw	r2,-16(fp)
   15184:	10800017 	ldw	r2,0(r2)
   15188:	10800304 	addi	r2,r2,12
   1518c:	e0fffc17 	ldw	r3,-16(fp)
   15190:	18c00117 	ldw	r3,4(r3)
   15194:	10c00035 	stwio	r3,0(r2)
   15198:	e0bff717 	ldw	r2,-36(fp)
   1519c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151a0:	e0bffb17 	ldw	r2,-20(fp)
   151a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   151a8:	e0fffe17 	ldw	r3,-8(fp)
   151ac:	e0bff417 	ldw	r2,-48(fp)
   151b0:	1885c83a 	sub	r2,r3,r2
}
   151b4:	e037883a 	mov	sp,fp
   151b8:	dfc00117 	ldw	ra,4(sp)
   151bc:	df000017 	ldw	fp,0(sp)
   151c0:	dec00204 	addi	sp,sp,8
   151c4:	f800283a 	ret

000151c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   151c8:	defff504 	addi	sp,sp,-44
   151cc:	df000a15 	stw	fp,40(sp)
   151d0:	df000a04 	addi	fp,sp,40
   151d4:	e13ffc15 	stw	r4,-16(fp)
   151d8:	e17ffd15 	stw	r5,-12(fp)
   151dc:	e1bffe15 	stw	r6,-8(fp)
   151e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   151e4:	e03ff615 	stw	zero,-40(fp)
   151e8:	008000b4 	movhi	r2,2
   151ec:	10a74504 	addi	r2,r2,-25324
   151f0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   151f4:	10003f26 	beq	r2,zero,152f4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   151f8:	e0bffc17 	ldw	r2,-16(fp)
   151fc:	10003b26 	beq	r2,zero,152ec <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   15200:	e0bffc17 	ldw	r2,-16(fp)
   15204:	e0fffe17 	ldw	r3,-8(fp)
   15208:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1520c:	e0bffc17 	ldw	r2,-16(fp)
   15210:	e0ffff17 	ldw	r3,-4(fp)
   15214:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15218:	0005303a 	rdctl	r2,status
   1521c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15220:	e0fff817 	ldw	r3,-32(fp)
   15224:	00bfff84 	movi	r2,-2
   15228:	1884703a 	and	r2,r3,r2
   1522c:	1001703a 	wrctl	status,r2
  
  return context;
   15230:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   15234:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15238:	008000b4 	movhi	r2,2
   1523c:	10a74604 	addi	r2,r2,-25320
   15240:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   15244:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15248:	e0fffd17 	ldw	r3,-12(fp)
   1524c:	e0bff617 	ldw	r2,-40(fp)
   15250:	1885883a 	add	r2,r3,r2
   15254:	10c00044 	addi	r3,r2,1
   15258:	e0bffc17 	ldw	r2,-16(fp)
   1525c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15260:	e0bffc17 	ldw	r2,-16(fp)
   15264:	10c00217 	ldw	r3,8(r2)
   15268:	e0bff617 	ldw	r2,-40(fp)
   1526c:	1880042e 	bgeu	r3,r2,15280 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   15270:	e0bffc17 	ldw	r2,-16(fp)
   15274:	00c00044 	movi	r3,1
   15278:	10c00405 	stb	r3,16(r2)
   1527c:	00000206 	br	15288 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   15280:	e0bffc17 	ldw	r2,-16(fp)
   15284:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15288:	e0fffc17 	ldw	r3,-16(fp)
   1528c:	008000b4 	movhi	r2,2
   15290:	10a06f04 	addi	r2,r2,-32324
   15294:	e0bff915 	stw	r2,-28(fp)
   15298:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1529c:	e0bffa17 	ldw	r2,-24(fp)
   152a0:	e0fff917 	ldw	r3,-28(fp)
   152a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   152a8:	e0bff917 	ldw	r2,-28(fp)
   152ac:	10c00017 	ldw	r3,0(r2)
   152b0:	e0bffa17 	ldw	r2,-24(fp)
   152b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   152b8:	e0bff917 	ldw	r2,-28(fp)
   152bc:	10800017 	ldw	r2,0(r2)
   152c0:	e0fffa17 	ldw	r3,-24(fp)
   152c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   152c8:	e0bff917 	ldw	r2,-28(fp)
   152cc:	e0fffa17 	ldw	r3,-24(fp)
   152d0:	10c00015 	stw	r3,0(r2)
   152d4:	e0bff717 	ldw	r2,-36(fp)
   152d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152dc:	e0bffb17 	ldw	r2,-20(fp)
   152e0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   152e4:	0005883a 	mov	r2,zero
   152e8:	00000306 	br	152f8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   152ec:	00bffa84 	movi	r2,-22
   152f0:	00000106 	br	152f8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   152f4:	00bfde84 	movi	r2,-134
  }
}
   152f8:	e037883a 	mov	sp,fp
   152fc:	df000017 	ldw	fp,0(sp)
   15300:	dec00104 	addi	sp,sp,4
   15304:	f800283a 	ret

00015308 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   15308:	defffa04 	addi	sp,sp,-24
   1530c:	dfc00515 	stw	ra,20(sp)
   15310:	df000415 	stw	fp,16(sp)
   15314:	df000404 	addi	fp,sp,16
   15318:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   1531c:	008000c4 	movi	r2,3
   15320:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   15324:	e0fffd17 	ldw	r3,-12(fp)
   15328:	008003f4 	movhi	r2,15
   1532c:	10909004 	addi	r2,r2,16960
   15330:	1885383a 	mul	r2,r3,r2
   15334:	0101c9f4 	movhi	r4,1831
   15338:	21038004 	addi	r4,r4,3584
   1533c:	100b883a 	mov	r5,r2
   15340:	00133d40 	call	133d4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   15344:	01200034 	movhi	r4,32768
   15348:	213fffc4 	addi	r4,r4,-1
   1534c:	100b883a 	mov	r5,r2
   15350:	00133d40 	call	133d4 <__udivsi3>
   15354:	e13fff17 	ldw	r4,-4(fp)
   15358:	100b883a 	mov	r5,r2
   1535c:	00133d40 	call	133d4 <__udivsi3>
   15360:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   15364:	e0bffe17 	ldw	r2,-8(fp)
   15368:	10002a26 	beq	r2,zero,15414 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1536c:	e03ffc15 	stw	zero,-16(fp)
   15370:	00001706 	br	153d0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   15374:	00a00034 	movhi	r2,32768
   15378:	10bfffc4 	addi	r2,r2,-1
   1537c:	10bfffc4 	addi	r2,r2,-1
   15380:	103ffe1e 	bne	r2,zero,1537c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   15384:	e0fffd17 	ldw	r3,-12(fp)
   15388:	008003f4 	movhi	r2,15
   1538c:	10909004 	addi	r2,r2,16960
   15390:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   15394:	0101c9f4 	movhi	r4,1831
   15398:	21038004 	addi	r4,r4,3584
   1539c:	100b883a 	mov	r5,r2
   153a0:	00133d40 	call	133d4 <__udivsi3>
   153a4:	01200034 	movhi	r4,32768
   153a8:	213fffc4 	addi	r4,r4,-1
   153ac:	100b883a 	mov	r5,r2
   153b0:	00133d40 	call	133d4 <__udivsi3>
   153b4:	1007883a 	mov	r3,r2
   153b8:	e0bfff17 	ldw	r2,-4(fp)
   153bc:	10c5c83a 	sub	r2,r2,r3
   153c0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   153c4:	e0bffc17 	ldw	r2,-16(fp)
   153c8:	10800044 	addi	r2,r2,1
   153cc:	e0bffc15 	stw	r2,-16(fp)
   153d0:	e0fffc17 	ldw	r3,-16(fp)
   153d4:	e0bffe17 	ldw	r2,-8(fp)
   153d8:	18bfe616 	blt	r3,r2,15374 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   153dc:	e0fffd17 	ldw	r3,-12(fp)
   153e0:	008003f4 	movhi	r2,15
   153e4:	10909004 	addi	r2,r2,16960
   153e8:	1885383a 	mul	r2,r3,r2
   153ec:	0101c9f4 	movhi	r4,1831
   153f0:	21038004 	addi	r4,r4,3584
   153f4:	100b883a 	mov	r5,r2
   153f8:	00133d40 	call	133d4 <__udivsi3>
   153fc:	1007883a 	mov	r3,r2
   15400:	e0bfff17 	ldw	r2,-4(fp)
   15404:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   15408:	10bfffc4 	addi	r2,r2,-1
   1540c:	103ffe1e 	bne	r2,zero,15408 <alt_busy_sleep+0x100>
   15410:	00000d06 	br	15448 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   15414:	e0fffd17 	ldw	r3,-12(fp)
   15418:	008003f4 	movhi	r2,15
   1541c:	10909004 	addi	r2,r2,16960
   15420:	1885383a 	mul	r2,r3,r2
   15424:	0101c9f4 	movhi	r4,1831
   15428:	21038004 	addi	r4,r4,3584
   1542c:	100b883a 	mov	r5,r2
   15430:	00133d40 	call	133d4 <__udivsi3>
   15434:	1007883a 	mov	r3,r2
   15438:	e0bfff17 	ldw	r2,-4(fp)
   1543c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   15440:	10bfffc4 	addi	r2,r2,-1
   15444:	00bffe16 	blt	zero,r2,15440 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   15448:	0005883a 	mov	r2,zero
}
   1544c:	e037883a 	mov	sp,fp
   15450:	dfc00117 	ldw	ra,4(sp)
   15454:	df000017 	ldw	fp,0(sp)
   15458:	dec00204 	addi	sp,sp,8
   1545c:	f800283a 	ret

00015460 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15460:	defffe04 	addi	sp,sp,-8
   15464:	df000115 	stw	fp,4(sp)
   15468:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1546c:	e03fff15 	stw	zero,-4(fp)
   15470:	00000506 	br	15488 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   15474:	e0bfff17 	ldw	r2,-4(fp)
   15478:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1547c:	e0bfff17 	ldw	r2,-4(fp)
   15480:	10800804 	addi	r2,r2,32
   15484:	e0bfff15 	stw	r2,-4(fp)
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	10820030 	cmpltui	r2,r2,2048
   15490:	103ff81e 	bne	r2,zero,15474 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15494:	e037883a 	mov	sp,fp
   15498:	df000017 	ldw	fp,0(sp)
   1549c:	dec00104 	addi	sp,sp,4
   154a0:	f800283a 	ret

000154a4 <alt_get_errno>:
   154a4:	defffe04 	addi	sp,sp,-8
   154a8:	dfc00115 	stw	ra,4(sp)
   154ac:	df000015 	stw	fp,0(sp)
   154b0:	d839883a 	mov	fp,sp
   154b4:	008000b4 	movhi	r2,2
   154b8:	10a06c04 	addi	r2,r2,-32336
   154bc:	10800017 	ldw	r2,0(r2)
   154c0:	10000526 	beq	r2,zero,154d8 <alt_get_errno+0x34>
   154c4:	008000b4 	movhi	r2,2
   154c8:	10a06c04 	addi	r2,r2,-32336
   154cc:	10800017 	ldw	r2,0(r2)
   154d0:	103ee83a 	callr	r2
   154d4:	00000206 	br	154e0 <alt_get_errno+0x3c>
   154d8:	008000b4 	movhi	r2,2
   154dc:	10a74004 	addi	r2,r2,-25344
   154e0:	e037883a 	mov	sp,fp
   154e4:	dfc00117 	ldw	ra,4(sp)
   154e8:	df000017 	ldw	fp,0(sp)
   154ec:	dec00204 	addi	sp,sp,8
   154f0:	f800283a 	ret

000154f4 <alt_dev_llist_insert>:
   154f4:	defffa04 	addi	sp,sp,-24
   154f8:	dfc00515 	stw	ra,20(sp)
   154fc:	df000415 	stw	fp,16(sp)
   15500:	df000404 	addi	fp,sp,16
   15504:	e13ffe15 	stw	r4,-8(fp)
   15508:	e17fff15 	stw	r5,-4(fp)
   1550c:	e0bffe17 	ldw	r2,-8(fp)
   15510:	10000326 	beq	r2,zero,15520 <alt_dev_llist_insert+0x2c>
   15514:	e0bffe17 	ldw	r2,-8(fp)
   15518:	10800217 	ldw	r2,8(r2)
   1551c:	1000061e 	bne	r2,zero,15538 <alt_dev_llist_insert+0x44>
   15520:	00154a40 	call	154a4 <alt_get_errno>
   15524:	1007883a 	mov	r3,r2
   15528:	00800584 	movi	r2,22
   1552c:	18800015 	stw	r2,0(r3)
   15530:	00bffa84 	movi	r2,-22
   15534:	00001306 	br	15584 <alt_dev_llist_insert+0x90>
   15538:	e0bffe17 	ldw	r2,-8(fp)
   1553c:	e0ffff17 	ldw	r3,-4(fp)
   15540:	e0fffc15 	stw	r3,-16(fp)
   15544:	e0bffd15 	stw	r2,-12(fp)
   15548:	e0bffd17 	ldw	r2,-12(fp)
   1554c:	e0fffc17 	ldw	r3,-16(fp)
   15550:	10c00115 	stw	r3,4(r2)
   15554:	e0bffc17 	ldw	r2,-16(fp)
   15558:	10c00017 	ldw	r3,0(r2)
   1555c:	e0bffd17 	ldw	r2,-12(fp)
   15560:	10c00015 	stw	r3,0(r2)
   15564:	e0bffc17 	ldw	r2,-16(fp)
   15568:	10800017 	ldw	r2,0(r2)
   1556c:	e0fffd17 	ldw	r3,-12(fp)
   15570:	10c00115 	stw	r3,4(r2)
   15574:	e0bffc17 	ldw	r2,-16(fp)
   15578:	e0fffd17 	ldw	r3,-12(fp)
   1557c:	10c00015 	stw	r3,0(r2)
   15580:	0005883a 	mov	r2,zero
   15584:	e037883a 	mov	sp,fp
   15588:	dfc00117 	ldw	ra,4(sp)
   1558c:	df000017 	ldw	fp,0(sp)
   15590:	dec00204 	addi	sp,sp,8
   15594:	f800283a 	ret

00015598 <_do_ctors>:
   15598:	defffd04 	addi	sp,sp,-12
   1559c:	dfc00215 	stw	ra,8(sp)
   155a0:	df000115 	stw	fp,4(sp)
   155a4:	df000104 	addi	fp,sp,4
   155a8:	00800074 	movhi	r2,1
   155ac:	10997604 	addi	r2,r2,26072
   155b0:	e0bfff15 	stw	r2,-4(fp)
   155b4:	00000606 	br	155d0 <_do_ctors+0x38>
   155b8:	e0bfff17 	ldw	r2,-4(fp)
   155bc:	10800017 	ldw	r2,0(r2)
   155c0:	103ee83a 	callr	r2
   155c4:	e0bfff17 	ldw	r2,-4(fp)
   155c8:	10bfff04 	addi	r2,r2,-4
   155cc:	e0bfff15 	stw	r2,-4(fp)
   155d0:	e0ffff17 	ldw	r3,-4(fp)
   155d4:	00800074 	movhi	r2,1
   155d8:	10997704 	addi	r2,r2,26076
   155dc:	18bff62e 	bgeu	r3,r2,155b8 <_do_ctors+0x20>
   155e0:	e037883a 	mov	sp,fp
   155e4:	dfc00117 	ldw	ra,4(sp)
   155e8:	df000017 	ldw	fp,0(sp)
   155ec:	dec00204 	addi	sp,sp,8
   155f0:	f800283a 	ret

000155f4 <_do_dtors>:
   155f4:	defffd04 	addi	sp,sp,-12
   155f8:	dfc00215 	stw	ra,8(sp)
   155fc:	df000115 	stw	fp,4(sp)
   15600:	df000104 	addi	fp,sp,4
   15604:	00800074 	movhi	r2,1
   15608:	10997604 	addi	r2,r2,26072
   1560c:	e0bfff15 	stw	r2,-4(fp)
   15610:	00000606 	br	1562c <_do_dtors+0x38>
   15614:	e0bfff17 	ldw	r2,-4(fp)
   15618:	10800017 	ldw	r2,0(r2)
   1561c:	103ee83a 	callr	r2
   15620:	e0bfff17 	ldw	r2,-4(fp)
   15624:	10bfff04 	addi	r2,r2,-4
   15628:	e0bfff15 	stw	r2,-4(fp)
   1562c:	e0ffff17 	ldw	r3,-4(fp)
   15630:	00800074 	movhi	r2,1
   15634:	10997704 	addi	r2,r2,26076
   15638:	18bff62e 	bgeu	r3,r2,15614 <_do_dtors+0x20>
   1563c:	e037883a 	mov	sp,fp
   15640:	dfc00117 	ldw	ra,4(sp)
   15644:	df000017 	ldw	fp,0(sp)
   15648:	dec00204 	addi	sp,sp,8
   1564c:	f800283a 	ret

00015650 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15650:	defffe04 	addi	sp,sp,-8
   15654:	dfc00115 	stw	ra,4(sp)
   15658:	df000015 	stw	fp,0(sp)
   1565c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   15660:	0009883a 	mov	r4,zero
   15664:	01440004 	movi	r5,4096
   15668:	00161100 	call	16110 <alt_icache_flush>
#endif
}
   1566c:	e037883a 	mov	sp,fp
   15670:	dfc00117 	ldw	ra,4(sp)
   15674:	df000017 	ldw	fp,0(sp)
   15678:	dec00204 	addi	sp,sp,8
   1567c:	f800283a 	ret

00015680 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15680:	defff904 	addi	sp,sp,-28
   15684:	dfc00615 	stw	ra,24(sp)
   15688:	df000515 	stw	fp,20(sp)
   1568c:	df000504 	addi	fp,sp,20
   15690:	e13ffc15 	stw	r4,-16(fp)
   15694:	e17ffd15 	stw	r5,-12(fp)
   15698:	e1bffe15 	stw	r6,-8(fp)
   1569c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   156a0:	e0800217 	ldw	r2,8(fp)
   156a4:	d8800015 	stw	r2,0(sp)
   156a8:	e13ffc17 	ldw	r4,-16(fp)
   156ac:	e17ffd17 	ldw	r5,-12(fp)
   156b0:	e1bffe17 	ldw	r6,-8(fp)
   156b4:	e1ffff17 	ldw	r7,-4(fp)
   156b8:	00158600 	call	15860 <alt_iic_isr_register>
}  
   156bc:	e037883a 	mov	sp,fp
   156c0:	dfc00117 	ldw	ra,4(sp)
   156c4:	df000017 	ldw	fp,0(sp)
   156c8:	dec00204 	addi	sp,sp,8
   156cc:	f800283a 	ret

000156d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   156d0:	defff904 	addi	sp,sp,-28
   156d4:	df000615 	stw	fp,24(sp)
   156d8:	df000604 	addi	fp,sp,24
   156dc:	e13ffe15 	stw	r4,-8(fp)
   156e0:	e17fff15 	stw	r5,-4(fp)
   156e4:	e0bfff17 	ldw	r2,-4(fp)
   156e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156ec:	0005303a 	rdctl	r2,status
   156f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156f4:	e0fffb17 	ldw	r3,-20(fp)
   156f8:	00bfff84 	movi	r2,-2
   156fc:	1884703a 	and	r2,r3,r2
   15700:	1001703a 	wrctl	status,r2
  
  return context;
   15704:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15708:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1570c:	e0bffa17 	ldw	r2,-24(fp)
   15710:	00c00044 	movi	r3,1
   15714:	1884983a 	sll	r2,r3,r2
   15718:	1007883a 	mov	r3,r2
   1571c:	008000b4 	movhi	r2,2
   15720:	10a74404 	addi	r2,r2,-25328
   15724:	10800017 	ldw	r2,0(r2)
   15728:	1886b03a 	or	r3,r3,r2
   1572c:	008000b4 	movhi	r2,2
   15730:	10a74404 	addi	r2,r2,-25328
   15734:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15738:	008000b4 	movhi	r2,2
   1573c:	10a74404 	addi	r2,r2,-25328
   15740:	10800017 	ldw	r2,0(r2)
   15744:	100170fa 	wrctl	ienable,r2
   15748:	e0bffc17 	ldw	r2,-16(fp)
   1574c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15750:	e0bffd17 	ldw	r2,-12(fp)
   15754:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15758:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1575c:	0001883a 	nop
}
   15760:	e037883a 	mov	sp,fp
   15764:	df000017 	ldw	fp,0(sp)
   15768:	dec00104 	addi	sp,sp,4
   1576c:	f800283a 	ret

00015770 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15770:	defff904 	addi	sp,sp,-28
   15774:	df000615 	stw	fp,24(sp)
   15778:	df000604 	addi	fp,sp,24
   1577c:	e13ffe15 	stw	r4,-8(fp)
   15780:	e17fff15 	stw	r5,-4(fp)
   15784:	e0bfff17 	ldw	r2,-4(fp)
   15788:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1578c:	0005303a 	rdctl	r2,status
   15790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15794:	e0fffb17 	ldw	r3,-20(fp)
   15798:	00bfff84 	movi	r2,-2
   1579c:	1884703a 	and	r2,r3,r2
   157a0:	1001703a 	wrctl	status,r2
  
  return context;
   157a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   157a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   157ac:	e0bffa17 	ldw	r2,-24(fp)
   157b0:	00c00044 	movi	r3,1
   157b4:	1884983a 	sll	r2,r3,r2
   157b8:	0084303a 	nor	r2,zero,r2
   157bc:	1007883a 	mov	r3,r2
   157c0:	008000b4 	movhi	r2,2
   157c4:	10a74404 	addi	r2,r2,-25328
   157c8:	10800017 	ldw	r2,0(r2)
   157cc:	1886703a 	and	r3,r3,r2
   157d0:	008000b4 	movhi	r2,2
   157d4:	10a74404 	addi	r2,r2,-25328
   157d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   157dc:	008000b4 	movhi	r2,2
   157e0:	10a74404 	addi	r2,r2,-25328
   157e4:	10800017 	ldw	r2,0(r2)
   157e8:	100170fa 	wrctl	ienable,r2
   157ec:	e0bffc17 	ldw	r2,-16(fp)
   157f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157f4:	e0bffd17 	ldw	r2,-12(fp)
   157f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   157fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   15800:	0001883a 	nop
}
   15804:	e037883a 	mov	sp,fp
   15808:	df000017 	ldw	fp,0(sp)
   1580c:	dec00104 	addi	sp,sp,4
   15810:	f800283a 	ret

00015814 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   15814:	defffc04 	addi	sp,sp,-16
   15818:	df000315 	stw	fp,12(sp)
   1581c:	df000304 	addi	fp,sp,12
   15820:	e13ffe15 	stw	r4,-8(fp)
   15824:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   15828:	000530fa 	rdctl	r2,ienable
   1582c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   15830:	e0bfff17 	ldw	r2,-4(fp)
   15834:	00c00044 	movi	r3,1
   15838:	1884983a 	sll	r2,r3,r2
   1583c:	1007883a 	mov	r3,r2
   15840:	e0bffd17 	ldw	r2,-12(fp)
   15844:	1884703a 	and	r2,r3,r2
   15848:	1004c03a 	cmpne	r2,r2,zero
   1584c:	10803fcc 	andi	r2,r2,255
}
   15850:	e037883a 	mov	sp,fp
   15854:	df000017 	ldw	fp,0(sp)
   15858:	dec00104 	addi	sp,sp,4
   1585c:	f800283a 	ret

00015860 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15860:	defff504 	addi	sp,sp,-44
   15864:	dfc00a15 	stw	ra,40(sp)
   15868:	df000915 	stw	fp,36(sp)
   1586c:	df000904 	addi	fp,sp,36
   15870:	e13ffc15 	stw	r4,-16(fp)
   15874:	e17ffd15 	stw	r5,-12(fp)
   15878:	e1bffe15 	stw	r6,-8(fp)
   1587c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   15880:	00bffa84 	movi	r2,-22
   15884:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   15888:	e0bffd17 	ldw	r2,-12(fp)
   1588c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15890:	e0bff817 	ldw	r2,-32(fp)
   15894:	10800808 	cmpgei	r2,r2,32
   15898:	1000271e 	bne	r2,zero,15938 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1589c:	0005303a 	rdctl	r2,status
   158a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158a4:	e0fffa17 	ldw	r3,-24(fp)
   158a8:	00bfff84 	movi	r2,-2
   158ac:	1884703a 	and	r2,r3,r2
   158b0:	1001703a 	wrctl	status,r2
  
  return context;
   158b4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   158b8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   158bc:	008000b4 	movhi	r2,2
   158c0:	10a75204 	addi	r2,r2,-25272
   158c4:	e0fff817 	ldw	r3,-32(fp)
   158c8:	180690fa 	slli	r3,r3,3
   158cc:	10c5883a 	add	r2,r2,r3
   158d0:	e0fffe17 	ldw	r3,-8(fp)
   158d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   158d8:	008000b4 	movhi	r2,2
   158dc:	10a75204 	addi	r2,r2,-25272
   158e0:	e0fff817 	ldw	r3,-32(fp)
   158e4:	180690fa 	slli	r3,r3,3
   158e8:	18c00104 	addi	r3,r3,4
   158ec:	10c5883a 	add	r2,r2,r3
   158f0:	e0ffff17 	ldw	r3,-4(fp)
   158f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   158f8:	e0bffe17 	ldw	r2,-8(fp)
   158fc:	10000526 	beq	r2,zero,15914 <alt_iic_isr_register+0xb4>
   15900:	e0bff817 	ldw	r2,-32(fp)
   15904:	e13ffc17 	ldw	r4,-16(fp)
   15908:	100b883a 	mov	r5,r2
   1590c:	00156d00 	call	156d0 <alt_ic_irq_enable>
   15910:	00000406 	br	15924 <alt_iic_isr_register+0xc4>
   15914:	e0bff817 	ldw	r2,-32(fp)
   15918:	e13ffc17 	ldw	r4,-16(fp)
   1591c:	100b883a 	mov	r5,r2
   15920:	00157700 	call	15770 <alt_ic_irq_disable>
   15924:	e0bff715 	stw	r2,-36(fp)
   15928:	e0bff917 	ldw	r2,-28(fp)
   1592c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15930:	e0bffb17 	ldw	r2,-20(fp)
   15934:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   15938:	e0bff717 	ldw	r2,-36(fp)
}
   1593c:	e037883a 	mov	sp,fp
   15940:	dfc00117 	ldw	ra,4(sp)
   15944:	df000017 	ldw	fp,0(sp)
   15948:	dec00204 	addi	sp,sp,8
   1594c:	f800283a 	ret

00015950 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15950:	defff904 	addi	sp,sp,-28
   15954:	dfc00615 	stw	ra,24(sp)
   15958:	df000515 	stw	fp,20(sp)
   1595c:	df000504 	addi	fp,sp,20
   15960:	e13ffc15 	stw	r4,-16(fp)
   15964:	e17ffd15 	stw	r5,-12(fp)
   15968:	e1bffe15 	stw	r6,-8(fp)
   1596c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   15970:	e13ffd17 	ldw	r4,-12(fp)
   15974:	e17ffe17 	ldw	r5,-8(fp)
   15978:	e1bfff17 	ldw	r6,-4(fp)
   1597c:	0015ba40 	call	15ba4 <open>
   15980:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   15984:	e0bffb17 	ldw	r2,-20(fp)
   15988:	10001c16 	blt	r2,zero,159fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1598c:	00800074 	movhi	r2,1
   15990:	109bba04 	addi	r2,r2,28392
   15994:	e0fffb17 	ldw	r3,-20(fp)
   15998:	18c00324 	muli	r3,r3,12
   1599c:	10c5883a 	add	r2,r2,r3
   159a0:	10c00017 	ldw	r3,0(r2)
   159a4:	e0bffc17 	ldw	r2,-16(fp)
   159a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   159ac:	00800074 	movhi	r2,1
   159b0:	109bba04 	addi	r2,r2,28392
   159b4:	e0fffb17 	ldw	r3,-20(fp)
   159b8:	18c00324 	muli	r3,r3,12
   159bc:	18c00104 	addi	r3,r3,4
   159c0:	10c5883a 	add	r2,r2,r3
   159c4:	10c00017 	ldw	r3,0(r2)
   159c8:	e0bffc17 	ldw	r2,-16(fp)
   159cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   159d0:	00800074 	movhi	r2,1
   159d4:	109bba04 	addi	r2,r2,28392
   159d8:	e0fffb17 	ldw	r3,-20(fp)
   159dc:	18c00324 	muli	r3,r3,12
   159e0:	18c00204 	addi	r3,r3,8
   159e4:	10c5883a 	add	r2,r2,r3
   159e8:	10c00017 	ldw	r3,0(r2)
   159ec:	e0bffc17 	ldw	r2,-16(fp)
   159f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   159f4:	e13ffb17 	ldw	r4,-20(fp)
   159f8:	0013b300 	call	13b30 <alt_release_fd>
  }
} 
   159fc:	e037883a 	mov	sp,fp
   15a00:	dfc00117 	ldw	ra,4(sp)
   15a04:	df000017 	ldw	fp,0(sp)
   15a08:	dec00204 	addi	sp,sp,8
   15a0c:	f800283a 	ret

00015a10 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15a10:	defffb04 	addi	sp,sp,-20
   15a14:	dfc00415 	stw	ra,16(sp)
   15a18:	df000315 	stw	fp,12(sp)
   15a1c:	df000304 	addi	fp,sp,12
   15a20:	e13ffd15 	stw	r4,-12(fp)
   15a24:	e17ffe15 	stw	r5,-8(fp)
   15a28:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15a2c:	01000074 	movhi	r4,1
   15a30:	211bbd04 	addi	r4,r4,28404
   15a34:	e17ffd17 	ldw	r5,-12(fp)
   15a38:	01800044 	movi	r6,1
   15a3c:	01c07fc4 	movi	r7,511
   15a40:	00159500 	call	15950 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15a44:	01000074 	movhi	r4,1
   15a48:	211bba04 	addi	r4,r4,28392
   15a4c:	e17ffe17 	ldw	r5,-8(fp)
   15a50:	000d883a 	mov	r6,zero
   15a54:	01c07fc4 	movi	r7,511
   15a58:	00159500 	call	15950 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15a5c:	01000074 	movhi	r4,1
   15a60:	211bc004 	addi	r4,r4,28416
   15a64:	e17fff17 	ldw	r5,-4(fp)
   15a68:	01800044 	movi	r6,1
   15a6c:	01c07fc4 	movi	r7,511
   15a70:	00159500 	call	15950 <alt_open_fd>
}  
   15a74:	e037883a 	mov	sp,fp
   15a78:	dfc00117 	ldw	ra,4(sp)
   15a7c:	df000017 	ldw	fp,0(sp)
   15a80:	dec00204 	addi	sp,sp,8
   15a84:	f800283a 	ret

00015a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15a88:	defffe04 	addi	sp,sp,-8
   15a8c:	dfc00115 	stw	ra,4(sp)
   15a90:	df000015 	stw	fp,0(sp)
   15a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15a98:	008000b4 	movhi	r2,2
   15a9c:	10a06c04 	addi	r2,r2,-32336
   15aa0:	10800017 	ldw	r2,0(r2)
   15aa4:	10000526 	beq	r2,zero,15abc <alt_get_errno+0x34>
   15aa8:	008000b4 	movhi	r2,2
   15aac:	10a06c04 	addi	r2,r2,-32336
   15ab0:	10800017 	ldw	r2,0(r2)
   15ab4:	103ee83a 	callr	r2
   15ab8:	00000206 	br	15ac4 <alt_get_errno+0x3c>
   15abc:	008000b4 	movhi	r2,2
   15ac0:	10a74004 	addi	r2,r2,-25344
}
   15ac4:	e037883a 	mov	sp,fp
   15ac8:	dfc00117 	ldw	ra,4(sp)
   15acc:	df000017 	ldw	fp,0(sp)
   15ad0:	dec00204 	addi	sp,sp,8
   15ad4:	f800283a 	ret

00015ad8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15ad8:	defffd04 	addi	sp,sp,-12
   15adc:	df000215 	stw	fp,8(sp)
   15ae0:	df000204 	addi	fp,sp,8
   15ae4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15ae8:	e0bfff17 	ldw	r2,-4(fp)
   15aec:	10800217 	ldw	r2,8(r2)
   15af0:	10d00034 	orhi	r3,r2,16384
   15af4:	e0bfff17 	ldw	r2,-4(fp)
   15af8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15afc:	e03ffe15 	stw	zero,-8(fp)
   15b00:	00001d06 	br	15b78 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b04:	00800074 	movhi	r2,1
   15b08:	109bba04 	addi	r2,r2,28392
   15b0c:	e0fffe17 	ldw	r3,-8(fp)
   15b10:	18c00324 	muli	r3,r3,12
   15b14:	10c5883a 	add	r2,r2,r3
   15b18:	10c00017 	ldw	r3,0(r2)
   15b1c:	e0bfff17 	ldw	r2,-4(fp)
   15b20:	10800017 	ldw	r2,0(r2)
   15b24:	1880111e 	bne	r3,r2,15b6c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b28:	00800074 	movhi	r2,1
   15b2c:	109bba04 	addi	r2,r2,28392
   15b30:	e0fffe17 	ldw	r3,-8(fp)
   15b34:	18c00324 	muli	r3,r3,12
   15b38:	18c00204 	addi	r3,r3,8
   15b3c:	10c5883a 	add	r2,r2,r3
   15b40:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b44:	1000090e 	bge	r2,zero,15b6c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15b48:	e0bffe17 	ldw	r2,-8(fp)
   15b4c:	10c00324 	muli	r3,r2,12
   15b50:	00800074 	movhi	r2,1
   15b54:	109bba04 	addi	r2,r2,28392
   15b58:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b5c:	e0bfff17 	ldw	r2,-4(fp)
   15b60:	18800226 	beq	r3,r2,15b6c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15b64:	00bffcc4 	movi	r2,-13
   15b68:	00000a06 	br	15b94 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15b6c:	e0bffe17 	ldw	r2,-8(fp)
   15b70:	10800044 	addi	r2,r2,1
   15b74:	e0bffe15 	stw	r2,-8(fp)
   15b78:	008000b4 	movhi	r2,2
   15b7c:	10a06b04 	addi	r2,r2,-32340
   15b80:	10800017 	ldw	r2,0(r2)
   15b84:	1007883a 	mov	r3,r2
   15b88:	e0bffe17 	ldw	r2,-8(fp)
   15b8c:	18bfdd2e 	bgeu	r3,r2,15b04 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15b90:	0005883a 	mov	r2,zero
}
   15b94:	e037883a 	mov	sp,fp
   15b98:	df000017 	ldw	fp,0(sp)
   15b9c:	dec00104 	addi	sp,sp,4
   15ba0:	f800283a 	ret

00015ba4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15ba4:	defff604 	addi	sp,sp,-40
   15ba8:	dfc00915 	stw	ra,36(sp)
   15bac:	df000815 	stw	fp,32(sp)
   15bb0:	df000804 	addi	fp,sp,32
   15bb4:	e13ffd15 	stw	r4,-12(fp)
   15bb8:	e17ffe15 	stw	r5,-8(fp)
   15bbc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15bc0:	00bfffc4 	movi	r2,-1
   15bc4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15bc8:	00bffb44 	movi	r2,-19
   15bcc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15bd0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15bd4:	e13ffd17 	ldw	r4,-12(fp)
   15bd8:	014000b4 	movhi	r5,2
   15bdc:	29606904 	addi	r5,r5,-32348
   15be0:	0015eb80 	call	15eb8 <alt_find_dev>
   15be4:	e0bff815 	stw	r2,-32(fp)
   15be8:	e0bff817 	ldw	r2,-32(fp)
   15bec:	1000051e 	bne	r2,zero,15c04 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15bf0:	e13ffd17 	ldw	r4,-12(fp)
   15bf4:	0015f480 	call	15f48 <alt_find_file>
   15bf8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15bfc:	00800044 	movi	r2,1
   15c00:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15c04:	e0bff817 	ldw	r2,-32(fp)
   15c08:	10002926 	beq	r2,zero,15cb0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15c0c:	e13ff817 	ldw	r4,-32(fp)
   15c10:	001605c0 	call	1605c <alt_get_fd>
   15c14:	e0bff915 	stw	r2,-28(fp)
   15c18:	e0bff917 	ldw	r2,-28(fp)
   15c1c:	1000030e 	bge	r2,zero,15c2c <open+0x88>
    {
      status = index;
   15c20:	e0bff917 	ldw	r2,-28(fp)
   15c24:	e0bffa15 	stw	r2,-24(fp)
   15c28:	00002306 	br	15cb8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   15c2c:	e0bff917 	ldw	r2,-28(fp)
   15c30:	10c00324 	muli	r3,r2,12
   15c34:	00800074 	movhi	r2,1
   15c38:	109bba04 	addi	r2,r2,28392
   15c3c:	1885883a 	add	r2,r3,r2
   15c40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15c44:	e0fffe17 	ldw	r3,-8(fp)
   15c48:	00900034 	movhi	r2,16384
   15c4c:	10bfffc4 	addi	r2,r2,-1
   15c50:	1886703a 	and	r3,r3,r2
   15c54:	e0bffc17 	ldw	r2,-16(fp)
   15c58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15c5c:	e0bffb17 	ldw	r2,-20(fp)
   15c60:	1000051e 	bne	r2,zero,15c78 <open+0xd4>
   15c64:	e13ffc17 	ldw	r4,-16(fp)
   15c68:	0015ad80 	call	15ad8 <alt_file_locked>
   15c6c:	e0bffa15 	stw	r2,-24(fp)
   15c70:	e0bffa17 	ldw	r2,-24(fp)
   15c74:	10001016 	blt	r2,zero,15cb8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15c78:	e0bff817 	ldw	r2,-32(fp)
   15c7c:	10800317 	ldw	r2,12(r2)
   15c80:	10000826 	beq	r2,zero,15ca4 <open+0x100>
   15c84:	e0bff817 	ldw	r2,-32(fp)
   15c88:	10800317 	ldw	r2,12(r2)
   15c8c:	e13ffc17 	ldw	r4,-16(fp)
   15c90:	e17ffd17 	ldw	r5,-12(fp)
   15c94:	e1bffe17 	ldw	r6,-8(fp)
   15c98:	e1ffff17 	ldw	r7,-4(fp)
   15c9c:	103ee83a 	callr	r2
   15ca0:	00000106 	br	15ca8 <open+0x104>
   15ca4:	0005883a 	mov	r2,zero
   15ca8:	e0bffa15 	stw	r2,-24(fp)
   15cac:	00000206 	br	15cb8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15cb0:	00bffb44 	movi	r2,-19
   15cb4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15cb8:	e0bffa17 	ldw	r2,-24(fp)
   15cbc:	1000090e 	bge	r2,zero,15ce4 <open+0x140>
  {
    alt_release_fd (index);  
   15cc0:	e13ff917 	ldw	r4,-28(fp)
   15cc4:	0013b300 	call	13b30 <alt_release_fd>
    ALT_ERRNO = -status;
   15cc8:	0015a880 	call	15a88 <alt_get_errno>
   15ccc:	1007883a 	mov	r3,r2
   15cd0:	e0bffa17 	ldw	r2,-24(fp)
   15cd4:	0085c83a 	sub	r2,zero,r2
   15cd8:	18800015 	stw	r2,0(r3)
    return -1;
   15cdc:	00bfffc4 	movi	r2,-1
   15ce0:	00000106 	br	15ce8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   15ce4:	e0bff917 	ldw	r2,-28(fp)
}
   15ce8:	e037883a 	mov	sp,fp
   15cec:	dfc00117 	ldw	ra,4(sp)
   15cf0:	df000017 	ldw	fp,0(sp)
   15cf4:	dec00204 	addi	sp,sp,8
   15cf8:	f800283a 	ret

00015cfc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15cfc:	defffa04 	addi	sp,sp,-24
   15d00:	df000515 	stw	fp,20(sp)
   15d04:	df000504 	addi	fp,sp,20
   15d08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d0c:	0005303a 	rdctl	r2,status
   15d10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d14:	e0fffc17 	ldw	r3,-16(fp)
   15d18:	00bfff84 	movi	r2,-2
   15d1c:	1884703a 	and	r2,r3,r2
   15d20:	1001703a 	wrctl	status,r2
  
  return context;
   15d24:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15d28:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15d2c:	e0bfff17 	ldw	r2,-4(fp)
   15d30:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15d34:	e0bffd17 	ldw	r2,-12(fp)
   15d38:	10800017 	ldw	r2,0(r2)
   15d3c:	e0fffd17 	ldw	r3,-12(fp)
   15d40:	18c00117 	ldw	r3,4(r3)
   15d44:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15d48:	e0bffd17 	ldw	r2,-12(fp)
   15d4c:	10800117 	ldw	r2,4(r2)
   15d50:	e0fffd17 	ldw	r3,-12(fp)
   15d54:	18c00017 	ldw	r3,0(r3)
   15d58:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15d5c:	e0bffd17 	ldw	r2,-12(fp)
   15d60:	e0fffd17 	ldw	r3,-12(fp)
   15d64:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15d68:	e0bffd17 	ldw	r2,-12(fp)
   15d6c:	e0fffd17 	ldw	r3,-12(fp)
   15d70:	10c00015 	stw	r3,0(r2)
   15d74:	e0bffb17 	ldw	r2,-20(fp)
   15d78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d7c:	e0bffe17 	ldw	r2,-8(fp)
   15d80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   15d84:	e037883a 	mov	sp,fp
   15d88:	df000017 	ldw	fp,0(sp)
   15d8c:	dec00104 	addi	sp,sp,4
   15d90:	f800283a 	ret

00015d94 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15d94:	defffb04 	addi	sp,sp,-20
   15d98:	dfc00415 	stw	ra,16(sp)
   15d9c:	df000315 	stw	fp,12(sp)
   15da0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15da4:	d0a00c17 	ldw	r2,-32720(gp)
   15da8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15dac:	d0a6e317 	ldw	r2,-25716(gp)
   15db0:	10800044 	addi	r2,r2,1
   15db4:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15db8:	00002e06 	br	15e74 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15dbc:	e0bffd17 	ldw	r2,-12(fp)
   15dc0:	10800017 	ldw	r2,0(r2)
   15dc4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15dc8:	e0bffd17 	ldw	r2,-12(fp)
   15dcc:	10800403 	ldbu	r2,16(r2)
   15dd0:	10803fcc 	andi	r2,r2,255
   15dd4:	10000426 	beq	r2,zero,15de8 <alt_tick+0x54>
   15dd8:	d0a6e317 	ldw	r2,-25716(gp)
   15ddc:	1000021e 	bne	r2,zero,15de8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15de0:	e0bffd17 	ldw	r2,-12(fp)
   15de4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15de8:	e0bffd17 	ldw	r2,-12(fp)
   15dec:	10800217 	ldw	r2,8(r2)
   15df0:	d0e6e317 	ldw	r3,-25716(gp)
   15df4:	18801d36 	bltu	r3,r2,15e6c <alt_tick+0xd8>
   15df8:	e0bffd17 	ldw	r2,-12(fp)
   15dfc:	10800403 	ldbu	r2,16(r2)
   15e00:	10803fcc 	andi	r2,r2,255
   15e04:	1000191e 	bne	r2,zero,15e6c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15e08:	e0bffd17 	ldw	r2,-12(fp)
   15e0c:	10800317 	ldw	r2,12(r2)
   15e10:	e0fffd17 	ldw	r3,-12(fp)
   15e14:	18c00517 	ldw	r3,20(r3)
   15e18:	1809883a 	mov	r4,r3
   15e1c:	103ee83a 	callr	r2
   15e20:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15e24:	e0bfff17 	ldw	r2,-4(fp)
   15e28:	1000031e 	bne	r2,zero,15e38 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15e2c:	e13ffd17 	ldw	r4,-12(fp)
   15e30:	0015cfc0 	call	15cfc <alt_alarm_stop>
   15e34:	00000d06 	br	15e6c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15e38:	e0bffd17 	ldw	r2,-12(fp)
   15e3c:	10c00217 	ldw	r3,8(r2)
   15e40:	e0bfff17 	ldw	r2,-4(fp)
   15e44:	1887883a 	add	r3,r3,r2
   15e48:	e0bffd17 	ldw	r2,-12(fp)
   15e4c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15e50:	e0bffd17 	ldw	r2,-12(fp)
   15e54:	10c00217 	ldw	r3,8(r2)
   15e58:	d0a6e317 	ldw	r2,-25716(gp)
   15e5c:	1880032e 	bgeu	r3,r2,15e6c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15e60:	e0bffd17 	ldw	r2,-12(fp)
   15e64:	00c00044 	movi	r3,1
   15e68:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15e6c:	e0bffe17 	ldw	r2,-8(fp)
   15e70:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15e74:	e0fffd17 	ldw	r3,-12(fp)
   15e78:	d0a00c04 	addi	r2,gp,-32720
   15e7c:	18bfcf1e 	bne	r3,r2,15dbc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15e80:	0001883a 	nop
}
   15e84:	e037883a 	mov	sp,fp
   15e88:	dfc00117 	ldw	ra,4(sp)
   15e8c:	df000017 	ldw	fp,0(sp)
   15e90:	dec00204 	addi	sp,sp,8
   15e94:	f800283a 	ret

00015e98 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15e98:	deffff04 	addi	sp,sp,-4
   15e9c:	df000015 	stw	fp,0(sp)
   15ea0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15ea4:	000170fa 	wrctl	ienable,zero
}
   15ea8:	e037883a 	mov	sp,fp
   15eac:	df000017 	ldw	fp,0(sp)
   15eb0:	dec00104 	addi	sp,sp,4
   15eb4:	f800283a 	ret

00015eb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15eb8:	defffa04 	addi	sp,sp,-24
   15ebc:	dfc00515 	stw	ra,20(sp)
   15ec0:	df000415 	stw	fp,16(sp)
   15ec4:	df000404 	addi	fp,sp,16
   15ec8:	e13ffe15 	stw	r4,-8(fp)
   15ecc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15ed0:	e0bfff17 	ldw	r2,-4(fp)
   15ed4:	10800017 	ldw	r2,0(r2)
   15ed8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15edc:	e13ffe17 	ldw	r4,-8(fp)
   15ee0:	00106d80 	call	106d8 <strlen>
   15ee4:	10800044 	addi	r2,r2,1
   15ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15eec:	00000d06 	br	15f24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15ef0:	e0bffc17 	ldw	r2,-16(fp)
   15ef4:	10c00217 	ldw	r3,8(r2)
   15ef8:	e0bffd17 	ldw	r2,-12(fp)
   15efc:	1809883a 	mov	r4,r3
   15f00:	e17ffe17 	ldw	r5,-8(fp)
   15f04:	100d883a 	mov	r6,r2
   15f08:	00162840 	call	16284 <memcmp>
   15f0c:	1000021e 	bne	r2,zero,15f18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15f10:	e0bffc17 	ldw	r2,-16(fp)
   15f14:	00000706 	br	15f34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15f18:	e0bffc17 	ldw	r2,-16(fp)
   15f1c:	10800017 	ldw	r2,0(r2)
   15f20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15f24:	e0fffc17 	ldw	r3,-16(fp)
   15f28:	e0bfff17 	ldw	r2,-4(fp)
   15f2c:	18bff01e 	bne	r3,r2,15ef0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15f30:	0005883a 	mov	r2,zero
}
   15f34:	e037883a 	mov	sp,fp
   15f38:	dfc00117 	ldw	ra,4(sp)
   15f3c:	df000017 	ldw	fp,0(sp)
   15f40:	dec00204 	addi	sp,sp,8
   15f44:	f800283a 	ret

00015f48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15f48:	defffb04 	addi	sp,sp,-20
   15f4c:	dfc00415 	stw	ra,16(sp)
   15f50:	df000315 	stw	fp,12(sp)
   15f54:	df000304 	addi	fp,sp,12
   15f58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15f5c:	008000b4 	movhi	r2,2
   15f60:	10a06704 	addi	r2,r2,-32356
   15f64:	10800017 	ldw	r2,0(r2)
   15f68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15f6c:	00003106 	br	16034 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   15f70:	e0bffd17 	ldw	r2,-12(fp)
   15f74:	10800217 	ldw	r2,8(r2)
   15f78:	1009883a 	mov	r4,r2
   15f7c:	00106d80 	call	106d8 <strlen>
   15f80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15f84:	e0bffd17 	ldw	r2,-12(fp)
   15f88:	10c00217 	ldw	r3,8(r2)
   15f8c:	e0bffe17 	ldw	r2,-8(fp)
   15f90:	10bfffc4 	addi	r2,r2,-1
   15f94:	1885883a 	add	r2,r3,r2
   15f98:	10800003 	ldbu	r2,0(r2)
   15f9c:	10803fcc 	andi	r2,r2,255
   15fa0:	1080201c 	xori	r2,r2,128
   15fa4:	10bfe004 	addi	r2,r2,-128
   15fa8:	10800bd8 	cmpnei	r2,r2,47
   15fac:	1000031e 	bne	r2,zero,15fbc <alt_find_file+0x74>
    {
      len -= 1;
   15fb0:	e0bffe17 	ldw	r2,-8(fp)
   15fb4:	10bfffc4 	addi	r2,r2,-1
   15fb8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15fbc:	e0bffe17 	ldw	r2,-8(fp)
   15fc0:	e0ffff17 	ldw	r3,-4(fp)
   15fc4:	1885883a 	add	r2,r3,r2
   15fc8:	10800003 	ldbu	r2,0(r2)
   15fcc:	10803fcc 	andi	r2,r2,255
   15fd0:	1080201c 	xori	r2,r2,128
   15fd4:	10bfe004 	addi	r2,r2,-128
   15fd8:	10800be0 	cmpeqi	r2,r2,47
   15fdc:	1000081e 	bne	r2,zero,16000 <alt_find_file+0xb8>
   15fe0:	e0bffe17 	ldw	r2,-8(fp)
   15fe4:	e0ffff17 	ldw	r3,-4(fp)
   15fe8:	1885883a 	add	r2,r3,r2
   15fec:	10800003 	ldbu	r2,0(r2)
   15ff0:	10803fcc 	andi	r2,r2,255
   15ff4:	1080201c 	xori	r2,r2,128
   15ff8:	10bfe004 	addi	r2,r2,-128
   15ffc:	10000a1e 	bne	r2,zero,16028 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   16000:	e0bffd17 	ldw	r2,-12(fp)
   16004:	10c00217 	ldw	r3,8(r2)
   16008:	e0bffe17 	ldw	r2,-8(fp)
   1600c:	1809883a 	mov	r4,r3
   16010:	e17fff17 	ldw	r5,-4(fp)
   16014:	100d883a 	mov	r6,r2
   16018:	00162840 	call	16284 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1601c:	1000021e 	bne	r2,zero,16028 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   16020:	e0bffd17 	ldw	r2,-12(fp)
   16024:	00000806 	br	16048 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   16028:	e0bffd17 	ldw	r2,-12(fp)
   1602c:	10800017 	ldw	r2,0(r2)
   16030:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16034:	e0fffd17 	ldw	r3,-12(fp)
   16038:	008000b4 	movhi	r2,2
   1603c:	10a06704 	addi	r2,r2,-32356
   16040:	18bfcb1e 	bne	r3,r2,15f70 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   16044:	0005883a 	mov	r2,zero
}
   16048:	e037883a 	mov	sp,fp
   1604c:	dfc00117 	ldw	ra,4(sp)
   16050:	df000017 	ldw	fp,0(sp)
   16054:	dec00204 	addi	sp,sp,8
   16058:	f800283a 	ret

0001605c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1605c:	defffc04 	addi	sp,sp,-16
   16060:	df000315 	stw	fp,12(sp)
   16064:	df000304 	addi	fp,sp,12
   16068:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1606c:	00bffa04 	movi	r2,-24
   16070:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16074:	e03ffd15 	stw	zero,-12(fp)
   16078:	00001d06 	br	160f0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   1607c:	00800074 	movhi	r2,1
   16080:	109bba04 	addi	r2,r2,28392
   16084:	e0fffd17 	ldw	r3,-12(fp)
   16088:	18c00324 	muli	r3,r3,12
   1608c:	10c5883a 	add	r2,r2,r3
   16090:	10800017 	ldw	r2,0(r2)
   16094:	1000131e 	bne	r2,zero,160e4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   16098:	00800074 	movhi	r2,1
   1609c:	109bba04 	addi	r2,r2,28392
   160a0:	e0fffd17 	ldw	r3,-12(fp)
   160a4:	18c00324 	muli	r3,r3,12
   160a8:	10c5883a 	add	r2,r2,r3
   160ac:	e0ffff17 	ldw	r3,-4(fp)
   160b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   160b4:	008000b4 	movhi	r2,2
   160b8:	10a06b04 	addi	r2,r2,-32340
   160bc:	10c00017 	ldw	r3,0(r2)
   160c0:	e0bffd17 	ldw	r2,-12(fp)
   160c4:	1880040e 	bge	r3,r2,160d8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   160c8:	008000b4 	movhi	r2,2
   160cc:	10a06b04 	addi	r2,r2,-32340
   160d0:	e0fffd17 	ldw	r3,-12(fp)
   160d4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   160d8:	e0bffd17 	ldw	r2,-12(fp)
   160dc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   160e0:	00000606 	br	160fc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   160e4:	e0bffd17 	ldw	r2,-12(fp)
   160e8:	10800044 	addi	r2,r2,1
   160ec:	e0bffd15 	stw	r2,-12(fp)
   160f0:	e0bffd17 	ldw	r2,-12(fp)
   160f4:	10800810 	cmplti	r2,r2,32
   160f8:	103fe01e 	bne	r2,zero,1607c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   160fc:	e0bffe17 	ldw	r2,-8(fp)
}
   16100:	e037883a 	mov	sp,fp
   16104:	df000017 	ldw	fp,0(sp)
   16108:	dec00104 	addi	sp,sp,4
   1610c:	f800283a 	ret

00016110 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   16110:	defffb04 	addi	sp,sp,-20
   16114:	df000415 	stw	fp,16(sp)
   16118:	df000404 	addi	fp,sp,16
   1611c:	e13ffe15 	stw	r4,-8(fp)
   16120:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   16124:	e0bfff17 	ldw	r2,-4(fp)
   16128:	10840070 	cmpltui	r2,r2,4097
   1612c:	1000021e 	bne	r2,zero,16138 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   16130:	00840004 	movi	r2,4096
   16134:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   16138:	e0fffe17 	ldw	r3,-8(fp)
   1613c:	e0bfff17 	ldw	r2,-4(fp)
   16140:	1885883a 	add	r2,r3,r2
   16144:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   16148:	e0bffe17 	ldw	r2,-8(fp)
   1614c:	e0bffc15 	stw	r2,-16(fp)
   16150:	00000506 	br	16168 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   16154:	e0bffc17 	ldw	r2,-16(fp)
   16158:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1615c:	e0bffc17 	ldw	r2,-16(fp)
   16160:	10800804 	addi	r2,r2,32
   16164:	e0bffc15 	stw	r2,-16(fp)
   16168:	e0fffc17 	ldw	r3,-16(fp)
   1616c:	e0bffd17 	ldw	r2,-12(fp)
   16170:	18bff836 	bltu	r3,r2,16154 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   16174:	e0bffe17 	ldw	r2,-8(fp)
   16178:	108007cc 	andi	r2,r2,31
   1617c:	10000226 	beq	r2,zero,16188 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   16180:	e0bffc17 	ldw	r2,-16(fp)
   16184:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   16188:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1618c:	e037883a 	mov	sp,fp
   16190:	df000017 	ldw	fp,0(sp)
   16194:	dec00104 	addi	sp,sp,4
   16198:	f800283a 	ret

0001619c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1619c:	defffe04 	addi	sp,sp,-8
   161a0:	df000115 	stw	fp,4(sp)
   161a4:	df000104 	addi	fp,sp,4
   161a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   161ac:	e0bfff17 	ldw	r2,-4(fp)
   161b0:	10bffe84 	addi	r2,r2,-6
   161b4:	10c00428 	cmpgeui	r3,r2,16
   161b8:	18001a1e 	bne	r3,zero,16224 <alt_exception_cause_generated_bad_addr+0x88>
   161bc:	100690ba 	slli	r3,r2,2
   161c0:	00800074 	movhi	r2,1
   161c4:	10987504 	addi	r2,r2,25044
   161c8:	1885883a 	add	r2,r3,r2
   161cc:	10800017 	ldw	r2,0(r2)
   161d0:	1000683a 	jmp	r2
   161d4:	00016214 	movui	zero,1416
   161d8:	00016214 	movui	zero,1416
   161dc:	00016224 	muli	zero,zero,1416
   161e0:	00016224 	muli	zero,zero,1416
   161e4:	00016224 	muli	zero,zero,1416
   161e8:	00016214 	movui	zero,1416
   161ec:	0001621c 	xori	zero,zero,1416
   161f0:	00016224 	muli	zero,zero,1416
   161f4:	00016214 	movui	zero,1416
   161f8:	00016214 	movui	zero,1416
   161fc:	00016224 	muli	zero,zero,1416
   16200:	00016214 	movui	zero,1416
   16204:	0001621c 	xori	zero,zero,1416
   16208:	00016224 	muli	zero,zero,1416
   1620c:	00016224 	muli	zero,zero,1416
   16210:	00016214 	movui	zero,1416
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   16214:	00800044 	movi	r2,1
   16218:	00000306 	br	16228 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1621c:	0005883a 	mov	r2,zero
   16220:	00000106 	br	16228 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   16224:	0005883a 	mov	r2,zero
  }
}
   16228:	e037883a 	mov	sp,fp
   1622c:	df000017 	ldw	fp,0(sp)
   16230:	dec00104 	addi	sp,sp,4
   16234:	f800283a 	ret

00016238 <atexit>:
   16238:	200b883a 	mov	r5,r4
   1623c:	000d883a 	mov	r6,zero
   16240:	0009883a 	mov	r4,zero
   16244:	000f883a 	mov	r7,zero
   16248:	00163001 	jmpi	16300 <__register_exitproc>

0001624c <exit>:
   1624c:	defffe04 	addi	sp,sp,-8
   16250:	000b883a 	mov	r5,zero
   16254:	dc000015 	stw	r16,0(sp)
   16258:	dfc00115 	stw	ra,4(sp)
   1625c:	2021883a 	mov	r16,r4
   16260:	00164140 	call	16414 <__call_exitprocs>
   16264:	008000b4 	movhi	r2,2
   16268:	10a06304 	addi	r2,r2,-32372
   1626c:	11000017 	ldw	r4,0(r2)
   16270:	20800f17 	ldw	r2,60(r4)
   16274:	10000126 	beq	r2,zero,1627c <exit+0x30>
   16278:	103ee83a 	callr	r2
   1627c:	8009883a 	mov	r4,r16
   16280:	00165a80 	call	165a8 <_exit>

00016284 <memcmp>:
   16284:	01c000c4 	movi	r7,3
   16288:	3980192e 	bgeu	r7,r6,162f0 <memcmp+0x6c>
   1628c:	2144b03a 	or	r2,r4,r5
   16290:	11c4703a 	and	r2,r2,r7
   16294:	10000f26 	beq	r2,zero,162d4 <memcmp+0x50>
   16298:	20800003 	ldbu	r2,0(r4)
   1629c:	28c00003 	ldbu	r3,0(r5)
   162a0:	10c0151e 	bne	r2,r3,162f8 <memcmp+0x74>
   162a4:	31bfff84 	addi	r6,r6,-2
   162a8:	01ffffc4 	movi	r7,-1
   162ac:	00000406 	br	162c0 <memcmp+0x3c>
   162b0:	20800003 	ldbu	r2,0(r4)
   162b4:	28c00003 	ldbu	r3,0(r5)
   162b8:	31bfffc4 	addi	r6,r6,-1
   162bc:	10c00e1e 	bne	r2,r3,162f8 <memcmp+0x74>
   162c0:	21000044 	addi	r4,r4,1
   162c4:	29400044 	addi	r5,r5,1
   162c8:	31fff91e 	bne	r6,r7,162b0 <memcmp+0x2c>
   162cc:	0005883a 	mov	r2,zero
   162d0:	f800283a 	ret
   162d4:	20c00017 	ldw	r3,0(r4)
   162d8:	28800017 	ldw	r2,0(r5)
   162dc:	1880041e 	bne	r3,r2,162f0 <memcmp+0x6c>
   162e0:	31bfff04 	addi	r6,r6,-4
   162e4:	21000104 	addi	r4,r4,4
   162e8:	29400104 	addi	r5,r5,4
   162ec:	39bff936 	bltu	r7,r6,162d4 <memcmp+0x50>
   162f0:	303fe91e 	bne	r6,zero,16298 <memcmp+0x14>
   162f4:	003ff506 	br	162cc <memcmp+0x48>
   162f8:	10c5c83a 	sub	r2,r2,r3
   162fc:	f800283a 	ret

00016300 <__register_exitproc>:
   16300:	008000b4 	movhi	r2,2
   16304:	defffa04 	addi	sp,sp,-24
   16308:	10a06304 	addi	r2,r2,-32372
   1630c:	dc000315 	stw	r16,12(sp)
   16310:	14000017 	ldw	r16,0(r2)
   16314:	dc400415 	stw	r17,16(sp)
   16318:	dfc00515 	stw	ra,20(sp)
   1631c:	80805217 	ldw	r2,328(r16)
   16320:	2023883a 	mov	r17,r4
   16324:	10003626 	beq	r2,zero,16400 <__register_exitproc+0x100>
   16328:	10c00117 	ldw	r3,4(r2)
   1632c:	010007c4 	movi	r4,31
   16330:	20c00e16 	blt	r4,r3,1636c <__register_exitproc+0x6c>
   16334:	1a400044 	addi	r9,r3,1
   16338:	8800211e 	bne	r17,zero,163c0 <__register_exitproc+0xc0>
   1633c:	18c00084 	addi	r3,r3,2
   16340:	18c7883a 	add	r3,r3,r3
   16344:	18c7883a 	add	r3,r3,r3
   16348:	12400115 	stw	r9,4(r2)
   1634c:	10c7883a 	add	r3,r2,r3
   16350:	19400015 	stw	r5,0(r3)
   16354:	0005883a 	mov	r2,zero
   16358:	dfc00517 	ldw	ra,20(sp)
   1635c:	dc400417 	ldw	r17,16(sp)
   16360:	dc000317 	ldw	r16,12(sp)
   16364:	dec00604 	addi	sp,sp,24
   16368:	f800283a 	ret
   1636c:	00800034 	movhi	r2,0
   16370:	10800004 	addi	r2,r2,0
   16374:	10002526 	beq	r2,zero,1640c <__register_exitproc+0x10c>
   16378:	01006404 	movi	r4,400
   1637c:	d9400015 	stw	r5,0(sp)
   16380:	d9800115 	stw	r6,4(sp)
   16384:	d9c00215 	stw	r7,8(sp)
   16388:	00000000 	call	0 <__alt_mem_ram-0x10000>
   1638c:	d9400017 	ldw	r5,0(sp)
   16390:	d9800117 	ldw	r6,4(sp)
   16394:	d9c00217 	ldw	r7,8(sp)
   16398:	10001c26 	beq	r2,zero,1640c <__register_exitproc+0x10c>
   1639c:	80c05217 	ldw	r3,328(r16)
   163a0:	10000115 	stw	zero,4(r2)
   163a4:	02400044 	movi	r9,1
   163a8:	10c00015 	stw	r3,0(r2)
   163ac:	80805215 	stw	r2,328(r16)
   163b0:	10006215 	stw	zero,392(r2)
   163b4:	10006315 	stw	zero,396(r2)
   163b8:	0007883a 	mov	r3,zero
   163bc:	883fdf26 	beq	r17,zero,1633c <__register_exitproc+0x3c>
   163c0:	18d1883a 	add	r8,r3,r3
   163c4:	4211883a 	add	r8,r8,r8
   163c8:	1211883a 	add	r8,r2,r8
   163cc:	41802215 	stw	r6,136(r8)
   163d0:	01000044 	movi	r4,1
   163d4:	11806217 	ldw	r6,392(r2)
   163d8:	20c8983a 	sll	r4,r4,r3
   163dc:	310cb03a 	or	r6,r6,r4
   163e0:	11806215 	stw	r6,392(r2)
   163e4:	41c04215 	stw	r7,264(r8)
   163e8:	01800084 	movi	r6,2
   163ec:	89bfd31e 	bne	r17,r6,1633c <__register_exitproc+0x3c>
   163f0:	11806317 	ldw	r6,396(r2)
   163f4:	3108b03a 	or	r4,r6,r4
   163f8:	11006315 	stw	r4,396(r2)
   163fc:	003fcf06 	br	1633c <__register_exitproc+0x3c>
   16400:	80805304 	addi	r2,r16,332
   16404:	80805215 	stw	r2,328(r16)
   16408:	003fc706 	br	16328 <__register_exitproc+0x28>
   1640c:	00bfffc4 	movi	r2,-1
   16410:	003fd106 	br	16358 <__register_exitproc+0x58>

00016414 <__call_exitprocs>:
   16414:	008000b4 	movhi	r2,2
   16418:	10a06304 	addi	r2,r2,-32372
   1641c:	10800017 	ldw	r2,0(r2)
   16420:	defff404 	addi	sp,sp,-48
   16424:	dd800815 	stw	r22,32(sp)
   16428:	d8800015 	stw	r2,0(sp)
   1642c:	10805204 	addi	r2,r2,328
   16430:	dd000615 	stw	r20,24(sp)
   16434:	dc800415 	stw	r18,16(sp)
   16438:	dfc00b15 	stw	ra,44(sp)
   1643c:	df000a15 	stw	fp,40(sp)
   16440:	ddc00915 	stw	r23,36(sp)
   16444:	dd400715 	stw	r21,28(sp)
   16448:	dcc00515 	stw	r19,20(sp)
   1644c:	dc400315 	stw	r17,12(sp)
   16450:	dc000215 	stw	r16,8(sp)
   16454:	2025883a 	mov	r18,r4
   16458:	2829883a 	mov	r20,r5
   1645c:	d8800115 	stw	r2,4(sp)
   16460:	05bfffc4 	movi	r22,-1
   16464:	d8800017 	ldw	r2,0(sp)
   16468:	14c05217 	ldw	r19,328(r2)
   1646c:	98001d26 	beq	r19,zero,164e4 <__call_exitprocs+0xd0>
   16470:	dd400117 	ldw	r21,4(sp)
   16474:	98800117 	ldw	r2,4(r19)
   16478:	173fffc4 	addi	fp,r2,-1
   1647c:	e0000d16 	blt	fp,zero,164b4 <__call_exitprocs+0xa0>
   16480:	14000044 	addi	r16,r2,1
   16484:	8421883a 	add	r16,r16,r16
   16488:	8421883a 	add	r16,r16,r16
   1648c:	84402004 	addi	r17,r16,128
   16490:	9c63883a 	add	r17,r19,r17
   16494:	9c21883a 	add	r16,r19,r16
   16498:	a0001e26 	beq	r20,zero,16514 <__call_exitprocs+0x100>
   1649c:	80804017 	ldw	r2,256(r16)
   164a0:	15001c26 	beq	r2,r20,16514 <__call_exitprocs+0x100>
   164a4:	e73fffc4 	addi	fp,fp,-1
   164a8:	843fff04 	addi	r16,r16,-4
   164ac:	8c7fff04 	addi	r17,r17,-4
   164b0:	e5bff91e 	bne	fp,r22,16498 <__call_exitprocs+0x84>
   164b4:	00800034 	movhi	r2,0
   164b8:	10800004 	addi	r2,r2,0
   164bc:	10000926 	beq	r2,zero,164e4 <__call_exitprocs+0xd0>
   164c0:	98800117 	ldw	r2,4(r19)
   164c4:	1000311e 	bne	r2,zero,1658c <__call_exitprocs+0x178>
   164c8:	98800017 	ldw	r2,0(r19)
   164cc:	10003426 	beq	r2,zero,165a0 <__call_exitprocs+0x18c>
   164d0:	9809883a 	mov	r4,r19
   164d4:	a8800015 	stw	r2,0(r21)
   164d8:	00000000 	call	0 <__alt_mem_ram-0x10000>
   164dc:	acc00017 	ldw	r19,0(r21)
   164e0:	983fe41e 	bne	r19,zero,16474 <__call_exitprocs+0x60>
   164e4:	dfc00b17 	ldw	ra,44(sp)
   164e8:	df000a17 	ldw	fp,40(sp)
   164ec:	ddc00917 	ldw	r23,36(sp)
   164f0:	dd800817 	ldw	r22,32(sp)
   164f4:	dd400717 	ldw	r21,28(sp)
   164f8:	dd000617 	ldw	r20,24(sp)
   164fc:	dcc00517 	ldw	r19,20(sp)
   16500:	dc800417 	ldw	r18,16(sp)
   16504:	dc400317 	ldw	r17,12(sp)
   16508:	dc000217 	ldw	r16,8(sp)
   1650c:	dec00c04 	addi	sp,sp,48
   16510:	f800283a 	ret
   16514:	98800117 	ldw	r2,4(r19)
   16518:	80c00017 	ldw	r3,0(r16)
   1651c:	10bfffc4 	addi	r2,r2,-1
   16520:	17001526 	beq	r2,fp,16578 <__call_exitprocs+0x164>
   16524:	80000015 	stw	zero,0(r16)
   16528:	183fde26 	beq	r3,zero,164a4 <__call_exitprocs+0x90>
   1652c:	00800044 	movi	r2,1
   16530:	1708983a 	sll	r4,r2,fp
   16534:	98806217 	ldw	r2,392(r19)
   16538:	9dc00117 	ldw	r23,4(r19)
   1653c:	2084703a 	and	r2,r4,r2
   16540:	1000061e 	bne	r2,zero,1655c <__call_exitprocs+0x148>
   16544:	183ee83a 	callr	r3
   16548:	98800117 	ldw	r2,4(r19)
   1654c:	15ffc51e 	bne	r2,r23,16464 <__call_exitprocs+0x50>
   16550:	a8800017 	ldw	r2,0(r21)
   16554:	14ffd326 	beq	r2,r19,164a4 <__call_exitprocs+0x90>
   16558:	003fc206 	br	16464 <__call_exitprocs+0x50>
   1655c:	98806317 	ldw	r2,396(r19)
   16560:	2084703a 	and	r2,r4,r2
   16564:	1000061e 	bne	r2,zero,16580 <__call_exitprocs+0x16c>
   16568:	89400017 	ldw	r5,0(r17)
   1656c:	9009883a 	mov	r4,r18
   16570:	183ee83a 	callr	r3
   16574:	003ff406 	br	16548 <__call_exitprocs+0x134>
   16578:	9f000115 	stw	fp,4(r19)
   1657c:	003fea06 	br	16528 <__call_exitprocs+0x114>
   16580:	89000017 	ldw	r4,0(r17)
   16584:	183ee83a 	callr	r3
   16588:	003fef06 	br	16548 <__call_exitprocs+0x134>
   1658c:	98800017 	ldw	r2,0(r19)
   16590:	982b883a 	mov	r21,r19
   16594:	1027883a 	mov	r19,r2
   16598:	983fb61e 	bne	r19,zero,16474 <__call_exitprocs+0x60>
   1659c:	003fd106 	br	164e4 <__call_exitprocs+0xd0>
   165a0:	0005883a 	mov	r2,zero
   165a4:	003ffa06 	br	16590 <__call_exitprocs+0x17c>

000165a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   165a8:	defffd04 	addi	sp,sp,-12
   165ac:	df000215 	stw	fp,8(sp)
   165b0:	df000204 	addi	fp,sp,8
   165b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   165b8:	0001883a 	nop
   165bc:	e0bfff17 	ldw	r2,-4(fp)
   165c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   165c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   165c8:	10000226 	beq	r2,zero,165d4 <_exit+0x2c>
    ALT_SIM_FAIL();
   165cc:	002af070 	cmpltui	zero,zero,43969
   165d0:	00000106 	br	165d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   165d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   165d8:	003fff06 	br	165d8 <_exit+0x30>
